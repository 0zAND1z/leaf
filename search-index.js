var searchIndex = {};
searchIndex["leaf"] = {"doc":"Leaf is a open, modular and clear-designed Machine Intelligence Framework providing\nstate-of-the-art performance for distributed (Deep|Machine) Learning - sharing concepts from\nTensorflow and Caffe.","items":[[0,"layer","leaf","Provides the generics and interfaces for the specific Layers.",null,null],[3,"Layer","leaf::layer","The generic Layer",null,null],[12,"name","","Identifies the Network",0,null],[12,"config","","The configuration of the Layer",0,null],[12,"worker","","The [implementation][1] of the Layer.\n[1]: ../layers/index.html",0,null],[12,"weights_data","","The vector that stores shared references to the weights in the form of blobs.",0,null],[12,"weights_gradient","","The vector that stores shared references to the weights in the form of blobs.",0,null],[12,"input_blobs_data","","References to all the input blobs of the layer.",0,null],[12,"input_blobs_gradient","","References to all the input blobs of the layer.",0,null],[12,"input_blob_names","","Names for all the input blobs of the layer.",0,null],[12,"output_blobs_data","","References to all the output blobs of the layer.",0,null],[12,"output_blobs_gradient","","References to all the output blobs of the layer.",0,null],[12,"blob_names","","All the blobs of the layer that can be addressed by name.",0,null],[3,"LayerConfig","","Layer Configuration Struct",null,null],[12,"name","","The name of the Layer",1,null],[12,"layer_type","","The type of the Layer",1,null],[12,"outputs","","The name for each output Blob",1,null],[12,"inputs","","The name for each input Blob",1,null],[12,"params","","Specifies training configuration for each weight blob.",1,null],[12,"propagate_down","","Specifies on which inputs the backpropagation should be skipped.\nThe size must be either 0 or equal to the number of inputs.",1,null],[4,"LayerType","","The Layer Types",null,null],[13,"Linear","","Linear Layer",2,null],[13,"LogSoftmax","","LogSoftmax Layer",2,null],[13,"Sequential","","Sequential Layer",2,null],[13,"Softmax","","Softmax Layer",2,null],[13,"ReLU","","ReLU Layer",2,null],[13,"Sigmoid","","Sigmoid Layer",2,null],[13,"NegativeLogLikelihood","","NegativeLogLikelihood Layer",2,null],[13,"Reshape","","Reshape Layer",2,null],[8,"ILayer","","A Layer in a Neural Network that can handle forward and backward of a computation step.",null,null],[11,"init","","Initialize the layer for computation.",3,{"inputs":[{"name":"ilayer"},{"name":"rc"}],"output":null}],[11,"reshape","","Adjust to shapes of the output blobs to fit the shapes of the input blobs.",3,{"inputs":[{"name":"ilayer"},{"name":"rc"},{"name":"vec"},{"name":"vec"},{"name":"vec"},{"name":"vec"},{"name":"vec"},{"name":"vec"}],"output":null}],[11,"resize_shared_workspace","","Adjust size of shared workspace.",3,{"inputs":[{"name":"ilayer"},{"name":"rc"},{"name":"option"}],"output":{"name":"option"}}],[11,"forward","","Compute the [feedforward][1] layer output using the provided Backend.\n[1]: https://en.wikipedia.org/wiki/Feedforward_neural_network",3,null],[11,"backward_input","","Compute the [backpropagation][1] input gradient using the provided backend.\n[1]: https://en.wikipedia.org/wiki/Backpropagation",3,null],[11,"backward_parameters","","Compute the [backpropagation][1] parameters gradient using the provided backend.\n[1]: https://en.wikipedia.org/wiki/Backpropagation",3,null],[11,"sync","","Synchronize the blobs before doing a forward or backward operation.",3,null],[11,"auto_output_blobs","","Return whether &quot;anonymous&quot; output blobs are created automatically for the layer.",3,{"inputs":[{"name":"ilayer"}],"output":{"name":"bool"}}],[11,"min_output_blobs","","Returns the minimum number of output blobs required by the layer,\nor 0 if no minimum number is required.",3,{"inputs":[{"name":"ilayer"}],"output":{"name":"usize"}}],[11,"exact_num_output_blobs","","Returns the exact number of output blobs required by the layer,\nor `None` if no exact number is required.",3,{"inputs":[{"name":"ilayer"}],"output":{"name":"option"}}],[11,"auto_weight_blobs","","Return whether weight blobs are created automatically for the layer.",3,{"inputs":[{"name":"ilayer"}],"output":{"name":"bool"}}],[11,"exact_num_input_blobs","","Returns the exact number of input blobs required by the layer,\nor `None` if no exact number is required.",3,{"inputs":[{"name":"ilayer"}],"output":{"name":"option"}}],[11,"allow_force_backward","","Return whether to allow force_backward for a given input blob index.",3,{"inputs":[{"name":"ilayer"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"sync_native","","Return wether a simple native backend should be used to [sync][1] instead of the default backend.\n[1]: #method.sync",3,{"inputs":[{"name":"ilayer"}],"output":{"name":"bool"}}],[11,"compute_in_place","","Return wether the computations of a layer should be done in-place (the output will be written where the input was read from).",3,{"inputs":[{"name":"ilayer"}],"output":{"name":"bool"}}],[11,"is_container","","Return wether the layer is a container.",3,{"inputs":[{"name":"ilayer"}],"output":{"name":"bool"}}],[11,"loss_weight","","Return the associated loss weight for a given output blob index.",3,{"inputs":[{"name":"ilayer"},{"name":"usize"}],"output":{"name":"option"}}],[11,"inputs_data","","Return the input tensors of the layer.",3,{"inputs":[{"name":"ilayer"}],"output":{"name":"option"}}],[11,"inputs_gradients","","Return the gradients of the input tensors of the layer.",3,{"inputs":[{"name":"ilayer"}],"output":{"name":"option"}}],[11,"outputs_data","","Return the output tensors of the layer.",3,{"inputs":[{"name":"ilayer"}],"output":{"name":"option"}}],[11,"outputs_gradients","","Return the gradients of the output tensors of the layer.",3,{"inputs":[{"name":"ilayer"}],"output":{"name":"option"}}],[11,"learnable_weights","","Return the learnable weights inside the layer.",3,{"inputs":[{"name":"ilayer"}],"output":{"name":"option"}}],[11,"learnable_weights_gradients","","Return the gradients for the learnable weights inside the layer.",3,{"inputs":[{"name":"ilayer"}],"output":{"name":"option"}}],[11,"learnable_weights_names","","Return the names of the learnable weights inside the layer.",3,{"inputs":[{"name":"ilayer"}],"output":{"name":"option"}}],[11,"learnable_weights_lr","","Return the learning rates for the learnable weights inside the layer.",3,{"inputs":[{"name":"ilayer"}],"output":{"name":"option"}}],[8,"ComputeOutput","","A Layer that can compute the output for a given input.",null,null],[10,"compute_output","","Compute output for given input and write them into `output_data`.",4,null],[8,"ComputeInputGradient","","A Layer that can compute the gradient with respect to its input.",null,null],[10,"compute_input_gradient","","Compute gradients with respect to the inputs and write them into `input_gradients`.",5,null],[8,"ComputeParametersGradient","","A Layer that can compute the gradient with respect to its parameters (= weights, bias, etc.).",null,null],[11,"compute_parameters_gradient","","Compute gradients with respect to the parameters and write them into `parameters_gradients`.",6,null],[11,"fmt","","",0,{"inputs":[{"name":"layer"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"connect","","Connect the layer to another layers and set up tensors for intermediate results and weights.",0,{"inputs":[{"name":"layer"},{"name":"hashmap"},{"name":"hashmap"}],"output":null}],[11,"init_backprop","","Initializes layer for [backpropagation][1]\n[1]: https://en.wikipedia.org/wiki/Backpropagation",0,{"inputs":[{"name":"layer"},{"name":"hashset"},{"name":"hashset"}],"output":null}],[11,"init_force_backward","","Set [backpropagation][1] flags to force this layer to backpropagate.\n[1]: https://en.wikipedia.org/wiki/Backpropagation",0,{"inputs":[{"name":"layer"}],"output":null}],[11,"forward","","Uses the underlying layer implementation to compute a forward step.",0,null],[11,"backward","","Uses the underlying layer implementation to compute a backward step.",0,null],[11,"backward_input","","Calculate the gradient w.r.t. input.",0,null],[11,"backward_parameters","","Calculate the gradient w.r.t. parameters.",0,{"inputs":[{"name":"layer"}],"output":null}],[11,"synchronize","","Synchronize the layers backend.",0,{"inputs":[{"name":"layer"}],"output":null}],[11,"update_weights","","Updates the [weights][1] with the weight update computed by the [Solver][2].\n[1]: https://en.wikipedia.org/wiki/Synaptic_weight\n[2]: ../solver/struct.Solver.html",0,{"inputs":[{"name":"layer"},{"name":"solverb"}],"output":null}],[11,"clear_weights_gradients","","Clears the [weights][1] gradients and zero-inits them.\n[1]: https://en.wikipedia.org/wiki/Synaptic_weight",0,{"inputs":[{"name":"layer"}],"output":null}],[11,"save","","Serialize the Layer and it&#39;s weights to a Cap&#39;n Proto file at the specified path.",0,{"inputs":[{"name":"layer"},{"name":"p"}],"output":{"name":"result"}}],[11,"load","","Read a Cap&#39;n Proto file at the specified path and deserialize the Layer inside it.",0,{"inputs":[{"name":"rc"},{"name":"p"}],"output":{"name":"result"}}],[11,"set_weight_propagate_down","","Sets whether the layer should compute gradients w.r.t. a\nweight at a particular index given by `weight_id`.",0,{"inputs":[{"name":"layer"},{"name":"usize"},{"name":"bool"}],"output":null}],[11,"is_using_in_place","","Returns `true` when the layer is using in-place computation.",0,{"inputs":[{"name":"layer"}],"output":{"name":"bool"}}],[11,"input_blob_names","","Returns the names of all the input blobs.",0,null],[11,"loss","","Returns the [loss weight][1] associated with the weight blob\nwith id `weight_id`.\n[1]: http://caffe.berkeleyvision.org/tutorial/loss.html",0,{"inputs":[{"name":"layer"},{"name":"usize"}],"output":{"name":"option"}}],[11,"learnable_weights_data","","Returns all the learnable weights in the layer.",0,{"inputs":[{"name":"layer"}],"output":{"name":"vec"}}],[11,"learnable_weights_gradients","","Returns the gradients for all the learnable weights in the layer.",0,{"inputs":[{"name":"layer"}],"output":{"name":"vec"}}],[11,"learnable_weights_names","","Returns the names of all the learnable weights in the layer.",0,{"inputs":[{"name":"layer"}],"output":{"name":"vec"}}],[11,"learnable_weights_lr","","Returns the learning rate for all the learnable weights in the layer.",0,{"inputs":[{"name":"layer"}],"output":{"name":"vec"}}],[11,"from_config","","Creates a new Layer from a [LayerConfig][1].\n[1]: ./struct.LayerConfig.html",0,{"inputs":[{"name":"rc"},{"name":"layerconfig"}],"output":{"name":"layer"}}],[11,"fmt","leaf","",3,{"inputs":[{"name":"ilayer"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","leaf::layer","",1,{"inputs":[{"name":"layerconfig"}],"output":{"name":"layerconfig"}}],[11,"fmt","","",1,{"inputs":[{"name":"layerconfig"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"layertype"}],"output":{"name":"layertype"}}],[11,"fmt","","",2,{"inputs":[{"name":"layertype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"supports_in_place","","Returns wether the LayerType supports in-place operations.",2,{"inputs":[{"name":"layertype"}],"output":{"name":"bool"}}],[11,"new","","Creates a new LayerConfig",1,{"inputs":[{"name":"str"},{"name":"l"}],"output":{"name":"layerconfig"}}],[11,"output","","Returns the Name of the requested output Blob",1,{"inputs":[{"name":"layerconfig"},{"name":"usize"}],"output":{"name":"option"}}],[11,"outputs_len","","Returns the number of output Blobs",1,{"inputs":[{"name":"layerconfig"}],"output":{"name":"usize"}}],[11,"add_output","","Add a output by name",1,{"inputs":[{"name":"layerconfig"},{"name":"str"}],"output":null}],[11,"input","","Returns the Name of the requested input Blob",1,{"inputs":[{"name":"layerconfig"},{"name":"usize"}],"output":{"name":"option"}}],[11,"inputs_len","","Returns the number of input Blobs",1,{"inputs":[{"name":"layerconfig"}],"output":{"name":"usize"}}],[11,"add_input","","Add a input by name",1,{"inputs":[{"name":"layerconfig"},{"name":"str"}],"output":null}],[11,"param","","Returns the requested WeightConfig",1,{"inputs":[{"name":"layerconfig"},{"name":"usize"}],"output":{"name":"option"}}],[11,"params_len","","Returns the number of params",1,{"inputs":[{"name":"layerconfig"}],"output":{"name":"usize"}}],[11,"validate","","Check if the configured parameters make sense.",1,{"inputs":[{"name":"layerconfig"}],"output":{"name":"result"}}],[0,"layers","leaf","Provides the fundamental units of computation in a Neural Network.",null,null],[0,"activation","leaf::layers","Provides nonlinear activation methods.",null,null],[0,"relu","leaf::layers::activation","Applies the nonlinear Rectified Linear Unit.",null,null],[3,"ReLU","leaf::layers::activation::relu","ReLU Activation Layer",null,null],[11,"clone","","",7,{"inputs":[{"name":"relu"}],"output":{"name":"relu"}}],[11,"fmt","","",7,{"inputs":[{"name":"relu"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"exact_num_output_blobs","","",7,{"inputs":[{"name":"relu"}],"output":{"name":"option"}}],[11,"exact_num_input_blobs","","",7,{"inputs":[{"name":"relu"}],"output":{"name":"option"}}],[11,"reshape","","",7,{"inputs":[{"name":"relu"},{"name":"rc"},{"name":"vec"},{"name":"vec"},{"name":"vec"},{"name":"vec"},{"name":"vec"},{"name":"vec"}],"output":null}],[11,"compute_output","","",7,null],[11,"compute_input_gradient","","",7,null],[0,"sigmoid","leaf::layers::activation","Applies the nonlinear Log-Sigmoid function.",null,null],[3,"Sigmoid","leaf::layers::activation::sigmoid","Sigmoid Activation Layer",null,null],[11,"clone","","",8,{"inputs":[{"name":"sigmoid"}],"output":{"name":"sigmoid"}}],[11,"fmt","","",8,{"inputs":[{"name":"sigmoid"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"exact_num_output_blobs","","",8,{"inputs":[{"name":"sigmoid"}],"output":{"name":"option"}}],[11,"exact_num_input_blobs","","",8,{"inputs":[{"name":"sigmoid"}],"output":{"name":"option"}}],[11,"reshape","","",8,{"inputs":[{"name":"sigmoid"},{"name":"rc"},{"name":"vec"},{"name":"vec"},{"name":"vec"},{"name":"vec"},{"name":"vec"},{"name":"vec"}],"output":null}],[11,"compute_output","","",8,null],[11,"compute_input_gradient","","",8,null],[0,"tanh","leaf::layers::activation","Applies the nonlinear TanH function.",null,null],[3,"TanH","leaf::layers::activation::tanh","TanH Activation Layer",null,null],[11,"clone","","",9,{"inputs":[{"name":"tanh"}],"output":{"name":"tanh"}}],[11,"fmt","","",9,{"inputs":[{"name":"tanh"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"exact_num_output_blobs","","",9,{"inputs":[{"name":"tanh"}],"output":{"name":"option"}}],[11,"exact_num_input_blobs","","",9,{"inputs":[{"name":"tanh"}],"output":{"name":"option"}}],[11,"reshape","","",9,{"inputs":[{"name":"tanh"},{"name":"rc"},{"name":"vec"},{"name":"vec"},{"name":"vec"},{"name":"vec"},{"name":"vec"},{"name":"vec"}],"output":null}],[11,"compute_output","","",9,null],[11,"compute_input_gradient","","",9,null],[0,"common","leaf::layers","Provides common neural network layers.",null,null],[0,"linear","leaf::layers::common","Applies a linear transformation to the input data `y = a * x + b`",null,null],[3,"Linear","leaf::layers::common::linear","Linear Layer",null,null],[3,"LinearConfig","","Specifies configuration parameters for a Linear Layer.",null,null],[12,"output_size","","The number of output values",10,null],[11,"fmt","","",11,{"inputs":[{"name":"linear"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_config","","Create a Linear layer from a LinearConfig.",11,{"inputs":[{"name":"linearconfig"}],"output":{"name":"linear"}}],[11,"exact_num_output_blobs","","",11,{"inputs":[{"name":"linear"}],"output":{"name":"option"}}],[11,"exact_num_input_blobs","","",11,{"inputs":[{"name":"linear"}],"output":{"name":"option"}}],[11,"auto_weight_blobs","","",11,{"inputs":[{"name":"linear"}],"output":{"name":"bool"}}],[11,"init","","",11,{"inputs":[{"name":"linear"},{"name":"rc"}],"output":null}],[11,"reshape","","",11,{"inputs":[{"name":"linear"},{"name":"rc"},{"name":"vec"},{"name":"vec"},{"name":"vec"},{"name":"vec"},{"name":"vec"},{"name":"vec"}],"output":null}],[11,"compute_output","","",11,null],[11,"compute_input_gradient","","",11,null],[11,"compute_parameters_gradient","","",11,null],[11,"default","","",11,{"inputs":[],"output":{"name":"linear"}}],[11,"clone","","",10,{"inputs":[{"name":"linearconfig"}],"output":{"name":"linearconfig"}}],[11,"fmt","","",10,{"inputs":[{"name":"linearconfig"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into","","",10,{"inputs":[{"name":"linearconfig"}],"output":{"name":"layertype"}}],[0,"log_softmax","leaf::layers::common","Computes the logarithmic softmax of its input.",null,null],[3,"LogSoftmax","leaf::layers::common::log_softmax","LogSoftmax Layer",null,null],[11,"clone","","",12,{"inputs":[{"name":"logsoftmax"}],"output":{"name":"logsoftmax"}}],[11,"fmt","","",12,{"inputs":[{"name":"logsoftmax"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"reshape","","",12,{"inputs":[{"name":"logsoftmax"},{"name":"rc"},{"name":"vec"},{"name":"vec"},{"name":"vec"},{"name":"vec"},{"name":"vec"},{"name":"vec"}],"output":null}],[11,"compute_output","","",12,null],[11,"compute_input_gradient","","",12,null],[11,"default","","",12,{"inputs":[],"output":{"name":"logsoftmax"}}],[0,"softmax","leaf::layers::common","Computes the softmax of its input.",null,null],[3,"Softmax","leaf::layers::common::softmax","Softmax Layer",null,null],[11,"clone","","",13,{"inputs":[{"name":"softmax"}],"output":{"name":"softmax"}}],[11,"fmt","","",13,{"inputs":[{"name":"softmax"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"reshape","","",13,{"inputs":[{"name":"softmax"},{"name":"rc"},{"name":"vec"},{"name":"vec"},{"name":"vec"},{"name":"vec"},{"name":"vec"},{"name":"vec"}],"output":null}],[11,"compute_output","","",13,null],[11,"compute_input_gradient","","",13,null],[11,"default","","",13,{"inputs":[],"output":{"name":"softmax"}}],[8,"FilterLayer","leaf::layers::common","Provides common utilities for Layers that utilize a filter with stride and padding.",null,null],[11,"calculate_spatial_output_dims","","Computes the shape of the spatial dimensions.",14,null],[10,"calculate_output_shape","","Calculate output shape based on the shape of filter, padding, stride and input.",14,null],[10,"num_spatial_dims","","Calculates the number of spatial dimensions for the pooling operation.",14,null],[11,"spatial_filter_dims","","Retrievs the spatial dimensions for the filter based on `self.filter_shape()`\nand the number of spatial dimensions.",14,{"inputs":[{"name":"filterlayer"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"stride_dims","","Retrievs the stride for the convolution based on `self.stride`\nand the number of spatial dimensions.",14,{"inputs":[{"name":"filterlayer"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"padding_dims","","Retrievs the padding for the convolution based on `self.padding`\nand the number of spatial dimensions.",14,{"inputs":[{"name":"filterlayer"},{"name":"usize"}],"output":{"name":"vec"}}],[10,"filter_shape","","The filter_shape that will be used by `spatial_filter_dims`.",14,null],[10,"stride","","The stride that will be used by `stride_dims`.",14,null],[10,"padding","","The padding that will be used by `padding_dims`.",14,null],[0,"loss","leaf::layers","Provides methods to calculate the loss (cost) of some output.",null,null],[0,"negative_log_likelihood","leaf::layers::loss","TODO: DOC",null,null],[3,"NegativeLogLikelihood","leaf::layers::loss::negative_log_likelihood","NegativeLogLikelihood Loss Layer",null,null],[3,"NegativeLogLikelihoodConfig","","Specifies configuration parameters for a NegativeLogLikelihood Layer.",null,null],[12,"num_classes","","How many different classes can be classified.",15,null],[11,"clone","","",16,{"inputs":[{"name":"negativeloglikelihood"}],"output":{"name":"negativeloglikelihood"}}],[11,"fmt","","",16,{"inputs":[{"name":"negativeloglikelihood"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_config","","Create a NegativeLogLikelihood layer from a NegativeLogLikelihoodConfig.",16,{"inputs":[{"name":"negativeloglikelihoodconfig"}],"output":{"name":"negativeloglikelihood"}}],[11,"exact_num_output_blobs","","",16,{"inputs":[{"name":"negativeloglikelihood"}],"output":{"name":"option"}}],[11,"exact_num_input_blobs","","",16,{"inputs":[{"name":"negativeloglikelihood"}],"output":{"name":"option"}}],[11,"auto_output_blobs","","",16,{"inputs":[{"name":"negativeloglikelihood"}],"output":{"name":"bool"}}],[11,"loss_weight","","",16,{"inputs":[{"name":"negativeloglikelihood"},{"name":"usize"}],"output":{"name":"option"}}],[11,"sync_native","","",16,{"inputs":[{"name":"negativeloglikelihood"}],"output":{"name":"bool"}}],[11,"reshape","","",16,{"inputs":[{"name":"negativeloglikelihood"},{"name":"rc"},{"name":"vec"},{"name":"vec"},{"name":"vec"},{"name":"vec"},{"name":"vec"},{"name":"vec"}],"output":null}],[11,"compute_output","","",16,null],[11,"compute_input_gradient","","",16,null],[11,"clone","","",15,{"inputs":[{"name":"negativeloglikelihoodconfig"}],"output":{"name":"negativeloglikelihoodconfig"}}],[11,"fmt","","",15,{"inputs":[{"name":"negativeloglikelihoodconfig"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into","","",15,{"inputs":[{"name":"negativeloglikelihoodconfig"}],"output":{"name":"layertype"}}],[0,"utility","leaf::layers","Provides various helpful layers, which might be not directly related to\nneural networks in general.",null,null],[0,"flatten","leaf::layers::utility","Flattens the bottom Blob into a simpler top Blob.",null,null],[3,"Flatten","leaf::layers::utility::flatten","Flattening Utility Layer",null,null],[11,"clone","","",17,{"inputs":[{"name":"flatten"}],"output":{"name":"flatten"}}],[11,"fmt","","",17,{"inputs":[{"name":"flatten"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"reshape","leaf::layers::utility","Utility layer to give a tensor another shape.",null,null],[3,"Reshape","leaf::layers::utility::reshape","Reshape Utility Layer",null,null],[3,"ReshapeConfig","","Specifies configuration parameters for a Reshape Layer.",null,null],[12,"shape","","The target shape that the input should assume.",18,null],[11,"clone","","",19,{"inputs":[{"name":"reshape"}],"output":{"name":"reshape"}}],[11,"fmt","","",19,{"inputs":[{"name":"reshape"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_config","","Create a Reshape layer from a ReshapeConfig.",19,{"inputs":[{"name":"reshapeconfig"}],"output":{"name":"reshape"}}],[11,"compute_in_place","","",19,{"inputs":[{"name":"reshape"}],"output":{"name":"bool"}}],[11,"auto_output_blobs","","",19,{"inputs":[{"name":"reshape"}],"output":{"name":"bool"}}],[11,"reshape","","",19,{"inputs":[{"name":"reshape"},{"name":"rc"},{"name":"vec"},{"name":"vec"},{"name":"vec"},{"name":"vec"},{"name":"vec"},{"name":"vec"}],"output":null}],[11,"compute_output","","",19,null],[11,"compute_input_gradient","","",19,null],[11,"clone","","",18,{"inputs":[{"name":"reshapeconfig"}],"output":{"name":"reshapeconfig"}}],[11,"fmt","","",18,{"inputs":[{"name":"reshapeconfig"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"of_shape","","Create a ReshapeConfig that describes a Reshape layer with a provided shape.",18,null],[11,"into","","",18,{"inputs":[{"name":"reshapeconfig"}],"output":{"name":"layertype"}}],[0,"container","leaf::layers","Provides container layers.",null,null],[0,"sequential","leaf::layers::container","A container layer that runs operations sequentially on the contained layers.",null,null],[3,"Sequential","leaf::layers::container::sequential","Sequential Layer",null,null],[3,"SequentialConfig","","Specifies configuration parameters for a Sequential Layer.",null,null],[12,"layers","","Defines the layers of the container via [LayerConfig][layer_config]s.",20,null],[12,"inputs","","Defines the names and shapes of the input tensors.",20,null],[12,"force_backward","","Defines if the container will force every layer to do [backpropagation][1].\n[1]: https://en.wikipedia.org/wiki/Backpropagation",20,null],[11,"fmt","","",21,{"inputs":[{"name":"sequential"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Create a empty Sequential container layer.",21,{"inputs":[],"output":{"name":"sequential"}}],[11,"from_config","","Create a Sequential layer from a SequentialConfig.",21,{"inputs":[{"name":"rc"},{"name":"sequentialconfig"}],"output":{"name":"sequential"}}],[11,"init_layers","","Initializes a sequential container.",21,{"inputs":[{"name":"sequential"},{"name":"rc"},{"name":"sequentialconfig"}],"output":null}],[11,"is_container","","",21,{"inputs":[{"name":"sequential"}],"output":{"name":"bool"}}],[11,"inputs_data","","",21,{"inputs":[{"name":"sequential"}],"output":{"name":"option"}}],[11,"inputs_gradients","","",21,{"inputs":[{"name":"sequential"}],"output":{"name":"option"}}],[11,"outputs_data","","",21,{"inputs":[{"name":"sequential"}],"output":{"name":"option"}}],[11,"outputs_gradients","","",21,{"inputs":[{"name":"sequential"}],"output":{"name":"option"}}],[11,"learnable_weights","","",21,{"inputs":[{"name":"sequential"}],"output":{"name":"option"}}],[11,"learnable_weights_gradients","","",21,{"inputs":[{"name":"sequential"}],"output":{"name":"option"}}],[11,"learnable_weights_names","","",21,{"inputs":[{"name":"sequential"}],"output":{"name":"option"}}],[11,"resize_shared_workspace","","",21,{"inputs":[{"name":"sequential"},{"name":"rc"},{"name":"option"}],"output":{"name":"option"}}],[11,"forward","","",21,null],[11,"backward_input","","",21,null],[11,"backward_parameters","","",21,null],[11,"compute_output","","",21,null],[11,"compute_input_gradient","","",21,null],[11,"compute_parameters_gradient","","",21,null],[11,"clone","","",20,{"inputs":[{"name":"sequentialconfig"}],"output":{"name":"sequentialconfig"}}],[11,"fmt","","",20,{"inputs":[{"name":"sequentialconfig"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"find_in_place_output","","Tries to find the output of a previous layer that is usable as in-place output for the n-th layer.",20,{"inputs":[{"name":"sequentialconfig"},{"name":"usize"}],"output":{"name":"option"}}],[11,"add_layer","","Add layer at the end of the sequential container.",20,{"inputs":[{"name":"sequentialconfig"},{"name":"layerconfig"}],"output":null}],[11,"add_input","","Add a input to the network.",20,null],[11,"into","","",20,{"inputs":[{"name":"sequentialconfig"}],"output":{"name":"layertype"}}],[11,"default","","",20,{"inputs":[],"output":{"name":"sequentialconfig"}}],[0,"solver","leaf","Provides the generics and interfaces for the specific Solvers.",null,null],[3,"Solver","leaf::solver","Solver that optimizes a [Layer][1] with a given objective.\n[1]: ../layer/index.html",null,null],[12,"worker","","The implementation of the Solver",22,null],[3,"SolverConfig","","Configuration for a Solver",null,null],[12,"name","","Name of the solver.",23,null],[12,"network","","The [LayerConfig][1] that is used to initialize the network.\n[1]: ../layer/struct.LayerConfig.html",23,null],[12,"objective","","The [LayerConfig][1] that is used to initialize the objective.\n[1]: ../layer/struct.LayerConfig.html",23,null],[12,"solver","","The [Solver implementation][1] to be used.\n[1]: ../solvers/index.html",23,null],[12,"minibatch_size","","Accumulate gradients over `minibatch_size` instances.",23,null],[12,"lr_policy","","The learning rate policy to be used.",23,null],[12,"base_lr","","The base learning rate.",23,null],[12,"gamma","","gamma as used in the calculation of most learning rate policies.",23,null],[12,"stepsize","","The stepsize used in Step and Sigmoid learning policies.",23,null],[12,"clip_gradients","","The threshold for clipping gradients.",23,null],[12,"weight_decay","","The global [weight decay][1] multiplier for [regularization][2].\n[1]: http://www.alglib.net/dataanalysis/improvinggeneralization.php#header3\n[2]: https://cs231n.github.io/neural-networks-2/#reg",23,null],[12,"regularization_method","","The method of [regularization][1] to use.\n[1]: https://cs231n.github.io/neural-networks-2/#reg",23,null],[12,"momentum","","The [momentum][1] multiplier for [SGD solvers][2].\n[1]: https://en.wikipedia.org/wiki/Stochastic_gradient_descent#Momentum\n[2]: ../solvers/sgd/index.html",23,null],[4,"SolverKind","","All available types of solvers.",null,null],[13,"SGD","","Stochastic Gradient Descent.\nSee [SGDKind][1] for all available SGD solvers.\n[1]: ./enum.SGDKind.html",24,null],[4,"SGDKind","","All available types of Stochastic Gradient Descent solvers.",null,null],[13,"Momentum","","Stochastic Gradient Descent with Momentum. See [implementation][1]\n[1] ../solvers/",25,null],[4,"LRPolicy","","Learning Rate Policy for a [Solver][1]\n[1]: ./struct.Solver.html",null,null],[13,"Fixed","","always return base_lr",26,null],[13,"Step","","learning rate decays every `step` iterations.\nreturn base_lr * gamma ^ (floor(iter / step))",26,null],[13,"Exp","","return base_lr * gamma ^ iter",26,null],[4,"RegularizationMethod","","[Regularization][1] method for a [Solver][2].\n[1]: https://cs231n.github.io/neural-networks-2/#reg\n[2]: ./struct.Solver.html",null,null],[13,"L2","","L2 regularization",27,null],[0,"confusion_matrix","","TODO: DOC",null,null],[3,"ConfusionMatrix","leaf::solver::confusion_matrix","A [ConfusionMatrix][wiki].",null,null],[3,"Sample","","A single prediction Sample.",null,null],[3,"Accuracy","","The accuracy of the predictions in a ConfusionMatrix.",null,null],[11,"fmt","","",28,{"inputs":[{"name":"confusionmatrix"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a ConfusionMatrix that analyzes the prediction of `num_classes` classes.",28,{"inputs":[{"name":"usize"}],"output":{"name":"confusionmatrix"}}],[11,"add_sample","","Add a sample by providing the expected `target` class and the `prediction`.",28,{"inputs":[{"name":"confusionmatrix"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"add_samples","","Add a batch of samples.",28,null],[11,"get_predictions","","Get the predicted classes from the output of a network.",28,{"inputs":[{"name":"confusionmatrix"},{"name":"sharedtensor"}],"output":{"name":"vec"}}],[11,"set_capacity","","Set the `capacity` of the ConfusionMatrix",28,{"inputs":[{"name":"confusionmatrix"},{"name":"option"}],"output":null}],[11,"samples","","Return all collected samples.",28,{"inputs":[{"name":"confusionmatrix"}],"output":{"name":"vecdeque"}}],[11,"accuracy","","Return the accuracy of the collected predictions.",28,{"inputs":[{"name":"confusionmatrix"}],"output":{"name":"accuracy"}}],[11,"clone","","",29,{"inputs":[{"name":"sample"}],"output":{"name":"sample"}}],[11,"fmt","","",29,{"inputs":[{"name":"sample"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"correct","","Returns if the prediction is equal to the expected target.",29,{"inputs":[{"name":"sample"}],"output":{"name":"bool"}}],[11,"fmt","","",29,{"inputs":[{"name":"sample"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",30,{"inputs":[{"name":"accuracy"}],"output":{"name":"accuracy"}}],[11,"fmt","","",30,{"inputs":[{"name":"accuracy"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",30,{"inputs":[{"name":"accuracy"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"ISolver","leaf::solver","Implementation of a specific Solver.",null,null],[11,"init","","Initialize the solver, setting up any network related data.",31,{"inputs":[{"name":"isolver"},{"name":"layer"}],"output":null}],[10,"compute_update","","Update the weights of the net with part of the gradient.",31,{"inputs":[{"name":"isolver"},{"name":"solverconfig"},{"name":"layer"},{"name":"usize"}],"output":null}],[10,"backend","","Returns the backend used by the solver.",31,{"inputs":[{"name":"isolver"}],"output":{"name":"solverb"}}],[11,"fmt","","",22,{"inputs":[{"name":"solver"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_config","","Create Solver from [SolverConfig][1]\n[1]: ./struct.SolverConfig.html",22,{"inputs":[{"name":"rc"},{"name":"rc"},{"name":"solverconfig"}],"output":{"name":"solver"}}],[11,"train_minibatch","","Train the network with one minibatch",22,{"inputs":[{"name":"solver"},{"name":"arclock"},{"name":"arclock"}],"output":{"name":"arclock"}}],[11,"network","","Returns the network trained by the solver.",22,{"inputs":[{"name":"solver"}],"output":{"name":"layer"}}],[11,"mut_network","","Returns the network trained by the solver.",22,{"inputs":[{"name":"solver"}],"output":{"name":"layer"}}],[11,"fmt","leaf","",31,{"inputs":[{"name":"isolver"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","leaf::solver","",23,{"inputs":[{"name":"solverconfig"}],"output":{"name":"solverconfig"}}],[11,"fmt","","",23,{"inputs":[{"name":"solverconfig"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",23,{"inputs":[],"output":{"name":"solverconfig"}}],[11,"get_learning_rate","","Return the learning rate for a supplied iteration.",23,{"inputs":[{"name":"solverconfig"},{"name":"usize"}],"output":{"name":"f32"}}],[11,"clone","","",24,{"inputs":[{"name":"solverkind"}],"output":{"name":"solverkind"}}],[11,"fmt","","",24,{"inputs":[{"name":"solverkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"with_config","","Create a Solver of the specified kind with the supplied SolverConfig.",24,{"inputs":[{"name":"solverkind"},{"name":"rc"},{"name":"solverconfig"}],"output":{"name":"box"}}],[11,"clone","","",25,{"inputs":[{"name":"sgdkind"}],"output":{"name":"sgdkind"}}],[11,"fmt","","",25,{"inputs":[{"name":"sgdkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"with_config","","Create a Solver of the specified kind with the supplied SolverConfig.",25,{"inputs":[{"name":"sgdkind"},{"name":"rc"},{"name":"solverconfig"}],"output":{"name":"box"}}],[11,"clone","","",26,{"inputs":[{"name":"lrpolicy"}],"output":{"name":"lrpolicy"}}],[11,"fmt","","",26,{"inputs":[{"name":"lrpolicy"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",27,{"inputs":[{"name":"regularizationmethod"}],"output":{"name":"regularizationmethod"}}],[11,"fmt","","",27,{"inputs":[{"name":"regularizationmethod"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"solvers","leaf","Provides the trainers for the Layers.",null,null],[0,"sgd","leaf::solvers","Provides ISolver implementations based on [Stochastic Gradient\nDescent][2].\n[2]: https://en.wikipedia.org/wiki/Stochastic_gradient_descent",null,null],[0,"momentum","leaf::solvers::sgd","A [Stochastic Gradient Descent with Momentum][1]\n[1]: https://en.wikipedia.org/wiki/Stochastic_gradient_descent#Momentum",null,null],[3,"Momentum","leaf::solvers::sgd::momentum","Stochastic Gradient Descent with Momentum.",null,null],[11,"fmt","","",32,{"inputs":[{"name":"momentum"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new SGD Momentum solver.",32,{"inputs":[{"name":"rc"}],"output":{"name":"momentum"}}],[11,"init","","Initialize the SGD Momentum solver, allocating memory for its history.",32,{"inputs":[{"name":"momentum"},{"name":"layer"}],"output":null}],[11,"compute_update","","",32,{"inputs":[{"name":"momentum"},{"name":"solverconfig"},{"name":"layer"},{"name":"usize"}],"output":null}],[11,"backend","","",32,{"inputs":[{"name":"momentum"}],"output":{"name":"solverb"}}],[0,"weight","leaf","Provides configuration of weights and their initialization.",null,null],[3,"WeightConfig","leaf::weight","Specifies training configuration for a weight blob.",null,null],[12,"name","","The name of the weight blob -- useful for sharing weights among\nlayers, but never required otherwise. To share a weight between two\nlayers, give it a (non-empty) name.",33,null],[12,"share_mode","","Whether to require shared weights to have the same shape, or just the same\ncount",33,null],[12,"lr_mult","","The multiplier on the global learning rate for this parameter.",33,null],[12,"decay_mult","","The multiplier on the global weight decay for this parameter.",33,null],[12,"filler","","The filler that initializes the weights in the weight blob.",33,null],[4,"DimCheckMode","","Enum for specifing the shared weights behaviour",null,null],[13,"Strict","","Strict requires that shapes match.",34,null],[13,"Permissive","","Permissive requires only the count of weights to match.",34,null],[4,"FillerType","","Enum for specifing the type of Filler.",null,null],[13,"Constant","","Fills the weight blob with a constant `value` (all values are the same).",35,null],[12,"value","leaf::weight::FillerType","The value that will be used to fill the blob.",35,null],[13,"Glorot","leaf::weight","Fills the weight blobs based on the paper:",35,null],[12,"input_size","leaf::weight::FillerType","Number of input nodes for each output.",35,null],[12,"output_size","","Number of output nodes for each input.",35,null],[11,"clone","leaf::weight","",33,{"inputs":[{"name":"weightconfig"}],"output":{"name":"weightconfig"}}],[11,"fmt","","",33,{"inputs":[{"name":"weightconfig"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",33,{"inputs":[],"output":{"name":"weightconfig"}}],[11,"check_dimensions","","Checks dimensions of two blobs according to the `share_mode`.\nReturns an error if there is a count/shape mismatch.",33,{"inputs":[{"name":"weightconfig"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"string"},{"name":"string"},{"name":"string"}],"output":{"name":"result"}}],[11,"lr_mult","","The multiplier on the global learning rate for this weight blob.",33,{"inputs":[{"name":"weightconfig"}],"output":{"name":"f32"}}],[11,"decay_mult","","The multiplier on the global weight decay for this weight blob.",33,{"inputs":[{"name":"weightconfig"}],"output":{"name":"f32"}}],[11,"clone","","",34,{"inputs":[{"name":"dimcheckmode"}],"output":{"name":"dimcheckmode"}}],[11,"fmt","","",34,{"inputs":[{"name":"dimcheckmode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",35,{"inputs":[{"name":"fillertype"}],"output":{"name":"fillertype"}}],[11,"fmt","","",35,{"inputs":[{"name":"fillertype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fill","","Uses a filler as specified by this FillerType to fill the values in a SharedTensor",35,{"inputs":[{"name":"fillertype"},{"name":"sharedtensor"}],"output":null}],[11,"fill_constant","","Directly use the [Constant Filler](#variant.Constant).",35,{"inputs":[{"name":"sharedtensor"},{"name":"f32"}],"output":null}],[11,"fill_glorot","","Directly use the [Glorot Filler](#variant.Glorot).",35,{"inputs":[{"name":"sharedtensor"},{"name":"usize"},{"name":"usize"}],"output":null}],[0,"util","leaf","Provides common utility functions",null,null],[5,"native_backend","leaf::util","Create a simple native backend.",null,{"inputs":[],"output":{"name":"backend"}}],[5,"write_to_memory","","Write into a native Collenchyma Memory.",null,null],[5,"write_to_memory_offset","","Write into a native Collenchyma Memory with a offset.",null,null],[5,"write_batch_sample","","Write the `i`th sample of a batch into a SharedTensor.",null,null],[5,"native_scalar","","Create a Collenchyma SharedTensor for a scalar value.",null,{"inputs":[{"name":"t"}],"output":{"name":"sharedtensor"}}],[5,"cast_vec_usize_to_i32","","Casts a Vec&lt;usize&gt; to as Vec&lt;i32&gt;",null,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[6,"ArcLock","","Shared Lock used for our tensors",null,null],[8,"Axpby","","Extends IBlas with Axpby",null,null],[11,"axpby","","Performs the operation y := a*x + b*y .",36,{"inputs":[{"name":"axpby"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[11,"axpby_plain","","Performs the operation y := a*x + b*y .",36,{"inputs":[{"name":"axpby"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[8,"SolverOps","","Encapsulates all traits required by Solvers.",null,null],[8,"LayerOps","","Encapsulates all traits used in Layers.",null,null],[14,"impl_ilayer_activation!","leaf","",null,null],[14,"impl_ilayer_common!","","",null,null],[14,"impl_ilayer_loss!","","",null,null],[14,"impl_ilayer_common!","","",null,null],[14,"impl_isolver_sgd!","","Implement [ISolver][1] for [SGD solvers][2].\n[1]: ./solver/trait.ISolver.html\n[2]: ./solvers/sgd/index.html",null,null]],"paths":[[3,"Layer"],[3,"LayerConfig"],[4,"LayerType"],[8,"ILayer"],[8,"ComputeOutput"],[8,"ComputeInputGradient"],[8,"ComputeParametersGradient"],[3,"ReLU"],[3,"Sigmoid"],[3,"TanH"],[3,"LinearConfig"],[3,"Linear"],[3,"LogSoftmax"],[3,"Softmax"],[8,"FilterLayer"],[3,"NegativeLogLikelihoodConfig"],[3,"NegativeLogLikelihood"],[3,"Flatten"],[3,"ReshapeConfig"],[3,"Reshape"],[3,"SequentialConfig"],[3,"Sequential"],[3,"Solver"],[3,"SolverConfig"],[4,"SolverKind"],[4,"SGDKind"],[4,"LRPolicy"],[4,"RegularizationMethod"],[3,"ConfusionMatrix"],[3,"Sample"],[3,"Accuracy"],[8,"ISolver"],[3,"Momentum"],[3,"WeightConfig"],[4,"DimCheckMode"],[4,"FillerType"],[8,"Axpby"]]};
searchIndex["collenchyma_nn"] = {"doc":"Provides a [Collenchyma][collenchyma] Plugin, to extend Collenchyma with Neural Network related\noperations such as convolutions, pooling, ReLU, etc. A full list of operations provided by this Plugin,\ncan be found at the [provided Operations section](#operations).","items":[[4,"ConvForwardAlgo","collenchyma_nn","Different algorithms to compute the convolution forward algorithm.",null,null],[13,"Auto","","Attempt to automatically find the best algorithm of all the other available ones.",0,null],[13,"GEMM","","Compute the convolution as explicit matrix product.",0,null],[13,"ImplicitGEMM","","Compute the convolution as matrix product without forming the matrix that holds the input data.",0,null],[13,"ImplicitPrecompiledGEMM","","Similar to `ImplicitGEMM` but needs some workspace to precompile the implicit indices.",0,null],[13,"FFT","","Compute the convolution as Fast-Fourier Transform.",0,null],[13,"FFTTiling","","Compute the convolution as Fast-Fourier Transform with 32x32 tiles.",0,null],[13,"Direct","","Compute the convolution without implicit or explicit matrix-multiplication. **Do not try to use this**.",0,null],[4,"ConvBackwardFilterAlgo","","Different algorithms to compute the gradient with respect to the filter.",null,null],[13,"Auto","","Attempt to automatically find the best algorithm of all the other available ones.",1,null],[13,"ImplicitGEMM","","Compute the convolution as matrix product without forming the matrix that holds the input data.",1,null],[13,"ImplicitGEMMSum","","Compute the convolution as sum of matrix product without forming the matrix that holds the input data.",1,null],[13,"ImplicitPrecompiledGEMMSum","","Similar to `ImplicitGEMMSum` but needs some workspace to precompile the implicit indices.",1,null],[13,"FFT","","Compute the convolution as Fast-Fourier Transform.",1,null],[4,"ConvBackwardDataAlgo","","Different algorithms to compute the gradient with respect to the filter.",null,null],[13,"Auto","","Attempt to automatically find the best algorithm of all the other available ones.",2,null],[13,"ImplicitGEMM","","Compute the convolution as matrix product without forming the matrix that holds the input data.",2,null],[13,"ImplicitGEMMSum","","Compute the convolution as sum of matrix product without forming the matrix that holds the input data.",2,null],[13,"FFT","","Compute the convolution as Fast-Fourier Transform.",2,null],[13,"FFTTiling","","Compute the convolution as Fast-Fourier Transform with 32x32 tiles.",2,null],[11,"clone","","",0,{"inputs":[{"name":"convforwardalgo"}],"output":{"name":"convforwardalgo"}}],[11,"fmt","","",0,{"inputs":[{"name":"convforwardalgo"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_auto","","Check if algorithim should be chosen automatically.",0,{"inputs":[{"name":"convforwardalgo"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"convbackwardfilteralgo"}],"output":{"name":"convbackwardfilteralgo"}}],[11,"fmt","","",1,{"inputs":[{"name":"convbackwardfilteralgo"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_auto","","Check if algorithim should be chosen automatically.",1,{"inputs":[{"name":"convbackwardfilteralgo"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"convbackwarddataalgo"}],"output":{"name":"convbackwarddataalgo"}}],[11,"fmt","","",2,{"inputs":[{"name":"convbackwarddataalgo"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_auto","","Check if algorithim should be chosen automatically.",2,{"inputs":[{"name":"convbackwarddataalgo"}],"output":{"name":"bool"}}],[0,"frameworks","","Provides the specific Framework implementations for the Library Operations.",null,null],[0,"native","collenchyma_nn::frameworks","Provides NN for a Native backend.",null,null],[0,"helper","collenchyma_nn::frameworks::native","Provides useful macros for easier NN implementation for native.",null,null],[3,"ConvolutionConfig","collenchyma_nn::frameworks::native::helper","",null,null],[3,"NormalizationConfig","","",null,null],[3,"PoolingConfig","","",null,null],[5,"write_to_memory","","Just a helper function until SharedTensor has a nice interface for writing data",null,{"inputs":[{"name":"memorytype"},{"name":"t"}],"output":null}],[5,"sigmoid","","Computes the Sigmoid Function on the CPU",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"sigmoid_grad","","Computes the Sigmoid Gradient on the CPU",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"relu","","Computes the ReLU Function on the CPU",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"relu_grad","","Computes the ReLU Gradient on the CPU",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"tanh","","Computes the Tanh Function on the CPU",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"tanh_grad","","Computes the Tanh Gradient on the CPU",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[11,"clone","","",3,{"inputs":[{"name":"convolutionconfig"}],"output":{"name":"convolutionconfig"}}],[11,"fmt","","",3,{"inputs":[{"name":"convolutionconfig"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"normalizationconfig"}],"output":{"name":"normalizationconfig"}}],[11,"fmt","","",4,{"inputs":[{"name":"normalizationconfig"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"poolingconfig"}],"output":{"name":"poolingconfig"}}],[11,"fmt","","",5,{"inputs":[{"name":"poolingconfig"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"init_nn","collenchyma::backend","",6,{"inputs":[],"output":null}],[11,"device","","",6,{"inputs":[{"name":"backend"}],"output":{"name":"devicetype"}}],[11,"sigmoid","","",6,{"inputs":[{"name":"backend"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[11,"sigmoid_plain","","",6,{"inputs":[{"name":"backend"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[11,"sigmoid_grad","","",6,{"inputs":[{"name":"backend"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[11,"sigmoid_grad_plain","","",6,{"inputs":[{"name":"backend"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[11,"relu","","",6,{"inputs":[{"name":"backend"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[11,"relu_plain","","",6,{"inputs":[{"name":"backend"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[11,"relu_grad","","",6,{"inputs":[{"name":"backend"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[11,"relu_grad_plain","","",6,{"inputs":[{"name":"backend"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[11,"tanh","","",6,{"inputs":[{"name":"backend"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[11,"tanh_plain","","",6,{"inputs":[{"name":"backend"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[11,"tanh_grad","","",6,{"inputs":[{"name":"backend"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[11,"tanh_grad_plain","","",6,{"inputs":[{"name":"backend"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[11,"softmax","","",6,{"inputs":[{"name":"backend"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[11,"softmax_plain","","",6,{"inputs":[{"name":"backend"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[11,"softmax_grad","","",6,{"inputs":[{"name":"backend"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[11,"softmax_grad_plain","","",6,{"inputs":[{"name":"backend"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[11,"log_softmax","","",6,{"inputs":[{"name":"backend"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[11,"log_softmax_plain","","",6,{"inputs":[{"name":"backend"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[11,"log_softmax_grad","","",6,{"inputs":[{"name":"backend"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[11,"log_softmax_grad_plain","","",6,{"inputs":[{"name":"backend"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[11,"init_nn","","",6,{"inputs":[],"output":null}],[11,"device","","",6,{"inputs":[{"name":"backend"}],"output":{"name":"devicetype"}}],[11,"sigmoid","","",6,{"inputs":[{"name":"backend"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[11,"sigmoid_plain","","",6,{"inputs":[{"name":"backend"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[11,"sigmoid_grad","","",6,{"inputs":[{"name":"backend"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[11,"sigmoid_grad_plain","","",6,{"inputs":[{"name":"backend"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[11,"relu","","",6,{"inputs":[{"name":"backend"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[11,"relu_plain","","",6,{"inputs":[{"name":"backend"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[11,"relu_grad","","",6,{"inputs":[{"name":"backend"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[11,"relu_grad_plain","","",6,{"inputs":[{"name":"backend"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[11,"tanh","","",6,{"inputs":[{"name":"backend"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[11,"tanh_plain","","",6,{"inputs":[{"name":"backend"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[11,"tanh_grad","","",6,{"inputs":[{"name":"backend"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[11,"tanh_grad_plain","","",6,{"inputs":[{"name":"backend"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[11,"softmax","","",6,{"inputs":[{"name":"backend"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[11,"softmax_plain","","",6,{"inputs":[{"name":"backend"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[11,"softmax_grad","","",6,{"inputs":[{"name":"backend"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[11,"softmax_grad_plain","","",6,{"inputs":[{"name":"backend"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[11,"log_softmax","","",6,{"inputs":[{"name":"backend"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[11,"log_softmax_plain","","",6,{"inputs":[{"name":"backend"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[11,"log_softmax_grad","","",6,{"inputs":[{"name":"backend"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[11,"log_softmax_grad_plain","","",6,{"inputs":[{"name":"backend"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[8,"NNOperationConfig","collenchyma_nn","Provides generic NN Operation Config functionality.",null,null],[8,"ConvolutionConfig","","Provides Convolution Config functionality.",null,null],[11,"workspace_size","","Returns the largest workspace size in bytes needed\nfor any of the convolution operations.",7,{"inputs":[{"name":"convolutionconfig"}],"output":{"name":"usize"}}],[8,"NN","","Provides the functionality for a backend to support Neural Network related operations.",null,null],[16,"CC","","The Convolution Operation Config representation for this Plugin.",8,null],[16,"CLRN","","The LRN Operation Config representation for this Plugin.",8,null],[16,"CPOOL","","The Pooling Operation Config representation for this Plugin.",8,null],[10,"init_nn","","Initializes the Plugin.",8,{"inputs":[],"output":null}],[10,"device","","Returns the device on which the Plugin operations will run.",8,{"inputs":[{"name":"nn"}],"output":{"name":"devicetype"}}],[8,"Sigmoid","","Provides the functionality for a Backend to support Sigmoid operations.",null,null],[10,"sigmoid","","Computes the [Sigmoid function][sigmoid] over the input Tensor `x` with complete memory management.\n[sigmoid]: https://en.wikipedia.org/wiki/Sigmoid_function",9,{"inputs":[{"name":"sigmoid"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[10,"sigmoid_plain","","Computes the Sigmoid function over the input Tensor `x` without any memory management.",9,{"inputs":[{"name":"sigmoid"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[10,"sigmoid_grad","","Computes the gradient of a [Sigmoid function][sigmoid] over the input Tensor `x` with complete memory management.\n[sigmoid]: https://en.wikipedia.org/wiki/Sigmoid_function",9,{"inputs":[{"name":"sigmoid"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[10,"sigmoid_grad_plain","","Computes the gradient of a Sigmoid function over the input Tensor `x` without any memory management.",9,{"inputs":[{"name":"sigmoid"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[8,"SigmoidPointwise","","Provides the functionality for pointwise Sigmoid operations (overwrites the input with the result of the operation).",null,null],[10,"sigmoid_pointwise","","Computes the [Sigmoid function][sigmoid] over the input Tensor `x` with complete memory management.\n[sigmoid]: https://en.wikipedia.org/wiki/Sigmoid_function",10,{"inputs":[{"name":"sigmoidpointwise"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[10,"sigmoid_pointwise_plain","","Computes the Sigmoid function over the input Tensor `x` without any memory management.",10,{"inputs":[{"name":"sigmoidpointwise"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[10,"sigmoid_pointwise_grad","","Computes the gradient of a [Sigmoid function][sigmoid] over the input Tensor `x` with complete memory management.\n[sigmoid]: https://en.wikipedia.org/wiki/Sigmoid_function",10,{"inputs":[{"name":"sigmoidpointwise"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[10,"sigmoid_pointwise_grad_plain","","Computes the gradient of a Sigmoid function over the input Tensor `x` without any memory management.",10,{"inputs":[{"name":"sigmoidpointwise"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[8,"Relu","","Provides the functionality for a Backend to support ReLU operations.",null,null],[10,"relu","","Computes the [Rectified linear units][relu] over the input Tensor `x` with complete memory management.\n[relu]: https://en.wikipedia.org/wiki/Rectifier_(neural_networks)",11,{"inputs":[{"name":"relu"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[10,"relu_plain","","Computes the ReLU over the input Tensor `x` without any memory management.",11,{"inputs":[{"name":"relu"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[10,"relu_grad","","Computes the gradient of [ReLU][relu] over the input Tensor `x` with complete memory management.\n[relu]: https://en.wikipedia.org/wiki/Rectifier_(neural_networks)",11,{"inputs":[{"name":"relu"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[10,"relu_grad_plain","","Computes the gradient of ReLU over the input Tensor `x` without any memory management.",11,{"inputs":[{"name":"relu"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[8,"ReluPointwise","","Provides the functionality for pointwise ReLU operations (overwrites the input with the result of the operation).",null,null],[10,"relu_pointwise","","Computes the [Rectified linear units][relu] over the input Tensor `x` with complete memory management.\n[relu]: https://en.wikipedia.org/wiki/Rectifier_(neural_networks)",12,{"inputs":[{"name":"relupointwise"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[10,"relu_pointwise_plain","","Computes the ReLU over the input Tensor `x` without any memory management.",12,{"inputs":[{"name":"relupointwise"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[10,"relu_pointwise_grad","","Computes the gradient of [ReLU][relu] over the input Tensor `x` with complete memory management.\n[relu]: https://en.wikipedia.org/wiki/Rectifier_(neural_networks)",12,{"inputs":[{"name":"relupointwise"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[10,"relu_pointwise_grad_plain","","Computes the gradient of ReLU over the input Tensor `x` without any memory management.",12,{"inputs":[{"name":"relupointwise"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[8,"Tanh","","Provides the functionality for a Backend to support TanH operations.",null,null],[10,"tanh","","Computes the [hyperbolic Tangent][tanh] over the input Tensor `x` with complete memory management.\n[tanh]: https://en.wikipedia.org/wiki/Hyperbolic_function",13,{"inputs":[{"name":"tanh"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[10,"tanh_plain","","Computes the tanh over the input Tensor `x` without any memory management.",13,{"inputs":[{"name":"tanh"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[10,"tanh_grad","","Computes the gradient of [tanh][tanh] over the input Tensor `x` with complete memory management.\n[tanh]: https://en.wikipedia.org/wiki/Hyperbolic_function",13,{"inputs":[{"name":"tanh"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[10,"tanh_grad_plain","","Computes the gradient of tanh over the input Tensor `x` without any memory management.",13,{"inputs":[{"name":"tanh"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[8,"TanhPointwise","","Provides the functionality for pointwise ReLU operations (overwrites the input with the result of the operation).",null,null],[10,"tanh_pointwise","","Computes the [hyperbolic Tangent][tanh] over the input Tensor `x` with complete memory management.\n[tanh]: https://en.wikipedia.org/wiki/Hyperbolic_function",14,{"inputs":[{"name":"tanhpointwise"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[10,"tanh_pointwise_plain","","Computes the tanh over the input Tensor `x` without any memory management.",14,{"inputs":[{"name":"tanhpointwise"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[10,"tanh_pointwise_grad","","Computes the gradient of [tanh][tanh] over the input Tensor `x` with complete memory management.\n[tanh]: https://en.wikipedia.org/wiki/Hyperbolic_function",14,{"inputs":[{"name":"tanhpointwise"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[10,"tanh_pointwise_grad_plain","","Computes the gradient of tanh over the input Tensor `x` without any memory management.",14,{"inputs":[{"name":"tanhpointwise"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[8,"Convolution","","Provides the functionality for a Backend to support Convolution operations.",null,null],[10,"new_convolution_config","","Creates a new ConvolutionConfig, which needs to be passed to further convolution Operations.",15,null],[10,"convolution","","Computes a [CNN convolution][convolution] over the input Tensor `x` with complete memory management.\n[convolution]: https://en.wikipedia.org/wiki/Convolutional_neural_network",15,{"inputs":[{"name":"convolution"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"cc"}],"output":{"name":"result"}}],[10,"convolution_plain","","Computes the convolution over the input Tensor `x` without any memory management.",15,{"inputs":[{"name":"convolution"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"cc"}],"output":{"name":"result"}}],[10,"convolution_grad_filter","","Computes the gradient of a [CNN convolution][convolution] with respect to the filter and complete memory management.\n[convolution]: https://en.wikipedia.org/wiki/Convolutional_neural_network",15,{"inputs":[{"name":"convolution"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"cc"}],"output":{"name":"result"}}],[10,"convolution_grad_filter_plain","","Computes the gradient of a convolution with respect to the filter and without any memory management.",15,{"inputs":[{"name":"convolution"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"cc"}],"output":{"name":"result"}}],[10,"convolution_grad_data","","Computes the gradient of a [CNN convolution][convolution] over the input Tensor `x` with respect to the data and complete memory management.\n[convolution]: https://en.wikipedia.org/wiki/Convolutional_neural_network",15,{"inputs":[{"name":"convolution"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"cc"}],"output":{"name":"result"}}],[10,"convolution_grad_data_plain","","Computes the gradient of a convolution over the input Tensor `x` with respect to the data and without any memory management.",15,{"inputs":[{"name":"convolution"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"cc"}],"output":{"name":"result"}}],[8,"Softmax","","Provides the functionality for a Backend to support Softmax operations.",null,null],[10,"softmax","","Computes a [Softmax][softmax] over the input Tensor `x` with complete memory management.\n[softmax]: https://en.wikipedia.org/wiki/Softmax_function",16,{"inputs":[{"name":"softmax"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[10,"softmax_plain","","Computes the softmax over the input Tensor `x` without any memory management.",16,{"inputs":[{"name":"softmax"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[10,"softmax_grad","","Computes the gradient of a [Softmax][softmax] over the input Tensor `x` with complete memory management.\n[softmax]: https://en.wikipedia.org/wiki/Softmax_function",16,{"inputs":[{"name":"softmax"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[10,"softmax_grad_plain","","Computes the gradient of a softmax over the input Tensor `x` without any memory management.",16,{"inputs":[{"name":"softmax"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[8,"LogSoftmax","","Provides the functionality for a Backend to support LogSoftmax operations.",null,null],[10,"log_softmax","","Computes a logarithmic softmax over the input Tensor `x` with complete memory management.",17,{"inputs":[{"name":"logsoftmax"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[10,"log_softmax_plain","","Computes the logarithmic softmax over the input Tensor `x` without any memory management.",17,{"inputs":[{"name":"logsoftmax"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[10,"log_softmax_grad","","Computes the gradient of a logarithmic softmax over the input Tensor `x` with complete memory management.",17,{"inputs":[{"name":"logsoftmax"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[10,"log_softmax_grad_plain","","Computes the gradient of a logarithmic softmax over the input Tensor `x` without any memory management.",17,{"inputs":[{"name":"logsoftmax"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[8,"LRN","","Provides the functionality for a Backend to support Local Response Normalization operations.",null,null],[10,"new_lrn_config","","Creates a new (Local Response Normalization) LRNConfig, which needs to be passed to further LRN Operations.",18,{"inputs":[{"name":"lrn"},{"name":"u32"},{"name":"f64"},{"name":"f64"},{"name":"f64"}],"output":{"name":"result"}}],[10,"lrn","","Computes a [LRN][lrn] over the input Tensor `x` with complete memory management.\n[lrn]: https://en.wikipedia.org/wiki/lrnal_neural_network",18,{"inputs":[{"name":"lrn"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"clrn"}],"output":{"name":"result"}}],[10,"lrn_plain","","Computes the LRN over the input Tensor `x` without any memory management.",18,{"inputs":[{"name":"lrn"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"clrn"}],"output":{"name":"result"}}],[10,"lrn_grad","","Computes the gradient of a [LRN][lrn] over the input Tensor `x` with complete memory management.\n[lrn]: https://en.wikipedia.org/wiki/lrnal_neural_network",18,{"inputs":[{"name":"lrn"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"clrn"}],"output":{"name":"result"}}],[10,"lrn_grad_plain","","Computes the gradient of a LRN over the input Tensor `x` without any memory management.",18,{"inputs":[{"name":"lrn"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"clrn"}],"output":{"name":"result"}}],[8,"Pooling","","Provides the functionality for a Backend to support Pooling operations.",null,null],[10,"new_pooling_config","","Creates a new PoolingConfig, which needs to be passed to further pooling Operations.",19,null],[10,"pooling_max","","Computes non-linear down-sampling ([max Pooling][pooling]) over the input Tensor `x` with complete memory management.\n[pooling]: https://en.wikipedia.org/wiki/Convolutional_neural_network#Pooling_layer",19,{"inputs":[{"name":"pooling"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"cpool"}],"output":{"name":"result"}}],[10,"pooling_max_plain","","Computes the max pooling over the input Tensor `x` without any memory management.",19,{"inputs":[{"name":"pooling"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"cpool"}],"output":{"name":"result"}}],[10,"pooling_max_grad","","Computes the gradient of [max Pooling][pooling] over the input Tensor `x` with complete memory management.\n[pooling]: https://en.wikipedia.org/wiki/Convolutional_neural_network#Pooling_layer",19,{"inputs":[{"name":"pooling"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"cpool"}],"output":{"name":"result"}}],[10,"pooling_max_grad_plain","","Computes the gradient of max pooling over the input Tensor `x` without any memory management.",19,{"inputs":[{"name":"pooling"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"cpool"}],"output":{"name":"result"}}],[14,"impl_ops_sigmoid_for!","","",null,null],[14,"impl_ops_relu_for!","","",null,null],[14,"impl_ops_tanh_for!","","",null,null],[14,"impl_ops_convolution_for!","","",null,null],[14,"impl_ops_softmax_for!","","",null,null],[14,"impl_ops_log_softmax_for!","","",null,null],[14,"impl_ops_lrn_for!","","",null,null],[14,"impl_ops_pooling_for!","","",null,null],[11,"workspace_size","","Returns the largest workspace size in bytes needed\nfor any of the convolution operations.",7,{"inputs":[{"name":"convolutionconfig"}],"output":{"name":"usize"}}]],"paths":[[4,"ConvForwardAlgo"],[4,"ConvBackwardFilterAlgo"],[4,"ConvBackwardDataAlgo"],[3,"ConvolutionConfig"],[3,"NormalizationConfig"],[3,"PoolingConfig"],[3,"Backend"],[8,"ConvolutionConfig"],[8,"NN"],[8,"Sigmoid"],[8,"SigmoidPointwise"],[8,"Relu"],[8,"ReluPointwise"],[8,"Tanh"],[8,"TanhPointwise"],[8,"Convolution"],[8,"Softmax"],[8,"LogSoftmax"],[8,"LRN"],[8,"Pooling"]]};
searchIndex["collenchyma_blas"] = {"doc":"Provides backend-agnostic BLAS operations for [Collenchyma][collenchyma].","items":[[0,"plugin","collenchyma_blas","Provides the IBlas library trait for Collenchyma implementation.",null,null],[8,"IBlas","collenchyma_blas::plugin","Provides the functionality for a backend to support Basic Linear Algebra Subprogram operations.",null,null],[8,"Asum","","Provides the asum operation.",null,null],[10,"asum","","Computes the absolute sum of vector `x` with complete memory management.",0,{"inputs":[{"name":"asum"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[10,"asum_plain","","Computes the absolute sum of vector `x` without any memory management.",0,{"inputs":[{"name":"asum"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[8,"Axpy","","Provides the axpy operation.",null,null],[10,"axpy","","Computes a vector `x` times a constant `a` plus a vector `y` aka. `a * x + y` with complete memory management.",1,{"inputs":[{"name":"axpy"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[10,"axpy_plain","","Computes a vector `x` times a constant `a` plus a vector `y` aka. `a * x + y` without any memory management.",1,{"inputs":[{"name":"axpy"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[8,"Copy","","Provides the copy operation.",null,null],[10,"copy","","Copies `x.len()` elements of vector `x` into vector `y` with complete memory management.",2,{"inputs":[{"name":"copy"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[10,"copy_plain","","Copies `x.len()` elements of vector `x` into vector `y` without any memory management.",2,{"inputs":[{"name":"copy"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[8,"Dot","","Provides the dot operation.",null,null],[10,"dot","","Computes the [dot product][dot-product] over x and y with complete memory management.\n[dot-product]: https://en.wikipedia.org/wiki/Dot_product",3,{"inputs":[{"name":"dot"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[10,"dot_plain","","Computes the [dot product][dot-product] over x and y without any memory management.\n[dot-product]: https://en.wikipedia.org/wiki/Dot_product",3,{"inputs":[{"name":"dot"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[8,"Nrm2","","Provides the nrm2 operation.",null,null],[10,"nrm2","","Computes the L2 norm aka. euclidean length of vector `x` with complete memory management.",4,{"inputs":[{"name":"nrm2"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[10,"nrm2_plain","","Computes the L2 norm aka. euclidean length of vector `x` without any memory management.",4,{"inputs":[{"name":"nrm2"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[8,"Scal","","Provides the scal operation.",null,null],[10,"scal","","Scales a vector `x` by a constant `a` aka. `a * x` with complete memory management.",5,{"inputs":[{"name":"scal"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[10,"scal_plain","","Scales a vector `x` by a constant `a` aka. `a * x` without any memory management.",5,{"inputs":[{"name":"scal"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[8,"Swap","","Provides the swap operation.",null,null],[10,"swap","","Swaps the content of vector `x` and vector `y` with complete memory management.",6,{"inputs":[{"name":"swap"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[10,"swap_plain","","Swaps the content of vector `x` and vector `y` without any memory management.",6,{"inputs":[{"name":"swap"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[8,"Gemm","","Provides the gemm operation.",null,null],[10,"gemm","","Computes a matrix-matrix product with general matrices.",7,{"inputs":[{"name":"gemm"},{"name":"sharedtensor"},{"name":"transpose"},{"name":"sharedtensor"},{"name":"transpose"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[10,"gemm_plain","","Computes a matrix-matrix product with general matrices.",7,{"inputs":[{"name":"gemm"},{"name":"sharedtensor"},{"name":"transpose"},{"name":"sharedtensor"},{"name":"transpose"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[8,"BlasBinaryProvider","","Allows a BlasBinary to be provided which is used for a IBlas implementation.",null,null],[10,"binary","","Returns the binary representation",8,{"inputs":[{"name":"blasbinaryprovider"}],"output":{"name":"b"}}],[10,"device","","Returns the device representation",8,{"inputs":[{"name":"blasbinaryprovider"}],"output":{"name":"devicetype"}}],[0,"binary","collenchyma_blas","Provides the IBlasBinary binary trait for Collenchyma&#39;s Framework implementation.",null,null],[8,"IBlasBinary","collenchyma_blas::binary","Describes the operation binding for a Blas Binary implementation.",null,null],[16,"Asum","","Describes the Asum Operation.",9,null],[16,"Axpy","","Describes the Axpy Operation.",9,null],[16,"Copy","","Describes the Copy Operation.",9,null],[16,"Dot","","Describes the Dot Operation.",9,null],[16,"Nrm2","","Describes the Nrm2 Operation.",9,null],[16,"Scale","","Describes the Scale Operation.",9,null],[16,"Swap","","Describes the Swap Operation.",9,null],[10,"asum","","Returns an initialized Asum operation.",9,{"inputs":[{"name":"iblasbinary"}],"output":{"name":"asum"}}],[10,"axpy","","Returns an initialized Axpy operation.",9,{"inputs":[{"name":"iblasbinary"}],"output":{"name":"axpy"}}],[10,"copy","","Returns an initialized Copy operation.",9,{"inputs":[{"name":"iblasbinary"}],"output":{"name":"copy"}}],[10,"dot","","Returns an initialized Dot operation.",9,{"inputs":[{"name":"iblasbinary"}],"output":{"name":"dot"}}],[10,"nrm2","","Returns an initialized Nrm2 operation.",9,{"inputs":[{"name":"iblasbinary"}],"output":{"name":"nrm2"}}],[10,"scale","","Returns an initialized Scale operation.",9,{"inputs":[{"name":"iblasbinary"}],"output":{"name":"scale"}}],[10,"swap","","Returns an initialized Swap operation.",9,{"inputs":[{"name":"iblasbinary"}],"output":{"name":"swap"}}],[0,"operation","collenchyma_blas","Provides the IOperationX operation traits for Collenchyma&#39;s Framework implementation.",null,null],[8,"IOperationAsum","collenchyma_blas::operation","Describes a Asum Operation.",null,null],[10,"compute","","Computes the Asum operation.",10,{"inputs":[{"name":"ioperationasum"},{"name":"memorytype"},{"name":"memorytype"}],"output":{"name":"result"}}],[8,"IOperationAxpy","","Describes a Axpy Operation.",null,null],[10,"compute","","Computes the Axpy operation.",11,{"inputs":[{"name":"ioperationaxpy"},{"name":"memorytype"},{"name":"memorytype"},{"name":"memorytype"}],"output":{"name":"result"}}],[8,"IOperationCopy","","Describes a Copy Operation.",null,null],[10,"compute","","Computes the Copy operation.",12,{"inputs":[{"name":"ioperationcopy"},{"name":"memorytype"},{"name":"memorytype"}],"output":{"name":"result"}}],[8,"IOperationDot","","Describes a Dot Operation.",null,null],[10,"compute","","Computes the Dot operation.",13,{"inputs":[{"name":"ioperationdot"},{"name":"memorytype"},{"name":"memorytype"},{"name":"memorytype"}],"output":{"name":"result"}}],[8,"IOperationNrm2","","Describes a Nrm2 Operation.",null,null],[10,"compute","","Computes the Nrm2 operation.",14,{"inputs":[{"name":"ioperationnrm2"},{"name":"memorytype"},{"name":"memorytype"}],"output":{"name":"result"}}],[8,"IOperationScale","","Describes a Scale Operation.",null,null],[10,"compute","","Computes the Scale operation.",15,{"inputs":[{"name":"ioperationscale"},{"name":"memorytype"},{"name":"memorytype"}],"output":{"name":"result"}}],[8,"IOperationSwap","","Describes a Swap Operation.",null,null],[10,"compute","","Computes the Swap operation.",16,{"inputs":[{"name":"ioperationswap"},{"name":"memorytype"},{"name":"memorytype"}],"output":{"name":"result"}}],[8,"IOperationGemm","","Describes a Gemm Operation.",null,null],[10,"compute","","Computes the Gemm operation.",17,null],[0,"transpose","collenchyma_blas","Provides the Transpose functionality for Matrix operations.",null,null],[4,"Transpose","collenchyma_blas::transpose","Possible transpose operations that can be applied in Level 2 and Level 3 BLAS operations.",null,null],[13,"NoTrans","","Take the matrix as it is.",18,null],[13,"Trans","","Take the transpose of the matrix.",18,null],[13,"ConjTrans","","Take the conjugate transpose of the matrix.",18,null],[11,"clone","","",18,{"inputs":[{"name":"transpose"}],"output":{"name":"transpose"}}],[11,"fmt","","",18,{"inputs":[{"name":"transpose"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_rblas","","Create a rust-blas `Transpose` from collenchyma-blas `Transpose`.",18,{"inputs":[{"name":"transpose"}],"output":{"name":"transpose"}}],[0,"helper","collenchyma_blas","Provides macros for convenient implementation of BLAS operations.",null,null],[0,"frameworks","","Provides the specific Framework implementations for the Library Operations.",null,null],[0,"native","collenchyma_blas::frameworks","Provides BLAS for a Native backend.",null,null],[11,"compute","collenchyma::backend","",19,{"inputs":[{"name":"backend"},{"name":"memorytype"},{"name":"memorytype"}],"output":{"name":"result"}}],[11,"compute","","",19,{"inputs":[{"name":"backend"},{"name":"memorytype"},{"name":"memorytype"},{"name":"memorytype"}],"output":{"name":"result"}}],[11,"compute","","",19,{"inputs":[{"name":"backend"},{"name":"memorytype"},{"name":"memorytype"}],"output":{"name":"result"}}],[11,"compute","","",19,{"inputs":[{"name":"backend"},{"name":"memorytype"},{"name":"memorytype"},{"name":"memorytype"}],"output":{"name":"result"}}],[11,"compute","","",19,{"inputs":[{"name":"backend"},{"name":"memorytype"},{"name":"memorytype"}],"output":{"name":"result"}}],[11,"compute","","",19,{"inputs":[{"name":"backend"},{"name":"memorytype"},{"name":"memorytype"}],"output":{"name":"result"}}],[11,"compute","","",19,{"inputs":[{"name":"backend"},{"name":"memorytype"},{"name":"memorytype"}],"output":{"name":"result"}}],[11,"compute","","",19,null],[11,"asum","","",19,{"inputs":[{"name":"backend"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[11,"asum_plain","","",19,{"inputs":[{"name":"backend"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[11,"axpy","","",19,{"inputs":[{"name":"backend"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[11,"axpy_plain","","",19,{"inputs":[{"name":"backend"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[11,"copy","","",19,{"inputs":[{"name":"backend"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[11,"copy_plain","","",19,{"inputs":[{"name":"backend"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[11,"dot","","",19,{"inputs":[{"name":"backend"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[11,"dot_plain","","",19,{"inputs":[{"name":"backend"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[11,"nrm2","","",19,{"inputs":[{"name":"backend"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[11,"nrm2_plain","","",19,{"inputs":[{"name":"backend"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[11,"scal","","",19,{"inputs":[{"name":"backend"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[11,"scal_plain","","",19,{"inputs":[{"name":"backend"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[11,"swap","","",19,{"inputs":[{"name":"backend"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[11,"swap_plain","","",19,{"inputs":[{"name":"backend"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[11,"gemm","","",19,{"inputs":[{"name":"backend"},{"name":"sharedtensor"},{"name":"transpose"},{"name":"sharedtensor"},{"name":"transpose"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[11,"gemm_plain","","",19,{"inputs":[{"name":"backend"},{"name":"sharedtensor"},{"name":"transpose"},{"name":"sharedtensor"},{"name":"transpose"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[11,"compute","","",19,{"inputs":[{"name":"backend"},{"name":"memorytype"},{"name":"memorytype"}],"output":{"name":"result"}}],[11,"compute","","",19,{"inputs":[{"name":"backend"},{"name":"memorytype"},{"name":"memorytype"},{"name":"memorytype"}],"output":{"name":"result"}}],[11,"compute","","",19,{"inputs":[{"name":"backend"},{"name":"memorytype"},{"name":"memorytype"}],"output":{"name":"result"}}],[11,"compute","","",19,{"inputs":[{"name":"backend"},{"name":"memorytype"},{"name":"memorytype"},{"name":"memorytype"}],"output":{"name":"result"}}],[11,"compute","","",19,{"inputs":[{"name":"backend"},{"name":"memorytype"},{"name":"memorytype"}],"output":{"name":"result"}}],[11,"compute","","",19,{"inputs":[{"name":"backend"},{"name":"memorytype"},{"name":"memorytype"}],"output":{"name":"result"}}],[11,"compute","","",19,{"inputs":[{"name":"backend"},{"name":"memorytype"},{"name":"memorytype"}],"output":{"name":"result"}}],[11,"compute","","",19,null],[11,"asum","","",19,{"inputs":[{"name":"backend"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[11,"asum_plain","","",19,{"inputs":[{"name":"backend"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[11,"axpy","","",19,{"inputs":[{"name":"backend"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[11,"axpy_plain","","",19,{"inputs":[{"name":"backend"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[11,"copy","","",19,{"inputs":[{"name":"backend"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[11,"copy_plain","","",19,{"inputs":[{"name":"backend"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[11,"dot","","",19,{"inputs":[{"name":"backend"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[11,"dot_plain","","",19,{"inputs":[{"name":"backend"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[11,"nrm2","","",19,{"inputs":[{"name":"backend"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[11,"nrm2_plain","","",19,{"inputs":[{"name":"backend"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[11,"scal","","",19,{"inputs":[{"name":"backend"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[11,"scal_plain","","",19,{"inputs":[{"name":"backend"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[11,"swap","","",19,{"inputs":[{"name":"backend"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[11,"swap_plain","","",19,{"inputs":[{"name":"backend"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[11,"gemm","","",19,{"inputs":[{"name":"backend"},{"name":"sharedtensor"},{"name":"transpose"},{"name":"sharedtensor"},{"name":"transpose"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[11,"gemm_plain","","",19,{"inputs":[{"name":"backend"},{"name":"sharedtensor"},{"name":"transpose"},{"name":"sharedtensor"},{"name":"transpose"},{"name":"sharedtensor"},{"name":"sharedtensor"},{"name":"sharedtensor"}],"output":{"name":"result"}}],[14,"iblas_asum_for!","collenchyma_blas","",null,null],[14,"iblas_axpy_for!","","",null,null],[14,"iblas_copy_for!","","",null,null],[14,"iblas_dot_for!","","",null,null],[14,"iblas_nrm2_for!","","",null,null],[14,"iblas_scale_for!","","",null,null],[14,"iblas_swap_for!","","",null,null],[14,"iblas_gemm_for!","","",null,null]],"paths":[[8,"Asum"],[8,"Axpy"],[8,"Copy"],[8,"Dot"],[8,"Nrm2"],[8,"Scal"],[8,"Swap"],[8,"Gemm"],[8,"BlasBinaryProvider"],[8,"IBlasBinary"],[8,"IOperationAsum"],[8,"IOperationAxpy"],[8,"IOperationCopy"],[8,"IOperationDot"],[8,"IOperationNrm2"],[8,"IOperationScale"],[8,"IOperationSwap"],[8,"IOperationGemm"],[4,"Transpose"],[3,"Backend"]]};
searchIndex["collenchyma"] = {"doc":"Provides a simple and unified API to run fast and highly parallel computations on different\ndevices such as CPUs and GPUs, accross different computation languages such as OpenCL and\nCUDA and allows you to swap your backend on run-time.","items":[[0,"backend","collenchyma","Provides the interface for running parallel computations on one ore many devices.",null,null],[3,"Backend","collenchyma::backend","Defines the main and highest struct of Collenchyma.",null,null],[3,"BackendConfig","","Provides Backend Configuration.",null,null],[8,"IBackend","","Describes a Backend.",null,null],[16,"F","","Represents the Framework of a Backend.",0,null],[10,"device","","Returns the backend device.",0,{"inputs":[{"name":"ibackend"}],"output":{"name":"devicetype"}}],[11,"default","","Try to create a default backend.",0,{"inputs":[],"output":{"name":"result"}}],[11,"synchronize","","Synchronize backend.",0,{"inputs":[{"name":"ibackend"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"backend"}],"output":{"name":"backend"}}],[11,"fmt","","",1,{"inputs":[{"name":"backend"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Initialize a new native Backend from a BackendConfig.",1,{"inputs":[{"name":"backendconfig"}],"output":{"name":"result"}}],[11,"hardwares","","Returns the available hardware.",1,null],[11,"framework","","Returns the backend framework.",1,{"inputs":[{"name":"backend"}],"output":{"name":"box"}}],[11,"device","","Returns the backend device.",1,{"inputs":[{"name":"backend"}],"output":{"name":"devicetype"}}],[11,"clone","","",2,{"inputs":[{"name":"backendconfig"}],"output":{"name":"backendconfig"}}],[11,"fmt","","",2,{"inputs":[{"name":"backendconfig"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new BackendConfig.",2,null],[0,"device","collenchyma","Provides a representation for one or many ready to use hardwares.",null,null],[4,"DeviceType","collenchyma::device","Container for all known IDevice implementations",null,null],[13,"Native","","A native CPU",3,null],[4,"Error","","Defines a generic set of Memory Errors.",null,null],[13,"Native","","Failures related to the Native framework implementation.",4,null],[8,"IDevice","","Specifies Hardware behavior across frameworks.",null,null],[16,"H","","The Hardware representation for this Device.",5,null],[16,"M","","The Memory representation for this Device.",5,null],[10,"id","","Returns the unique identifier of the Device.",5,{"inputs":[{"name":"idevice"}],"output":{"name":"isize"}}],[10,"hardwares","","Returns the hardwares, which define the Device.",5,{"inputs":[{"name":"idevice"}],"output":{"name":"vec"}}],[10,"alloc_memory","","Allocate memory on the Device.",5,{"inputs":[{"name":"idevice"},{"name":"usize"}],"output":{"name":"result"}}],[10,"sync_in","","Synchronize memory from `source_data` to the memory at `dest_data`.",5,{"inputs":[{"name":"idevice"},{"name":"devicetype"},{"name":"memorytype"},{"name":"m"}],"output":{"name":"result"}}],[8,"IDeviceSyncOut","","Specifies Sync out behavior across frameworks.",null,null],[16,"M","","The Memory representation for this Device.",6,null],[10,"sync_out","","Synchronizes memory from `source_data` to `dest_data`.",6,{"inputs":[{"name":"idevicesyncout"},{"name":"m"},{"name":"t"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"devicetype"}],"output":{"name":"devicetype"}}],[11,"hash","","",3,null],[11,"eq","","",3,{"inputs":[{"name":"devicetype"},{"name":"devicetype"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"devicetype"},{"name":"devicetype"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"devicetype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"fmt","","",4,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",4,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"cause","","",4,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"from","","",4,{"inputs":[{"name":"nativeerror"}],"output":{"name":"error"}}],[0,"hardware","collenchyma","Provides a representation for a collection of available compute units e.g. CPUs or GPUs.",null,null],[4,"HardwareType","collenchyma::hardware","Specifies the available Hardware types.",null,null],[13,"CPU","","CPU devices",7,null],[13,"GPU","","GPU devices",7,null],[13,"ACCELERATOR","","Hardware Accelerator devices",7,null],[13,"OTHER","","Used for anything else",7,null],[8,"IHardware","","Specifies Hardware behavior accross frameworks.",null,null],[10,"id","","Returns the ID of the Hardware",8,{"inputs":[{"name":"ihardware"}],"output":{"name":"isize"}}],[10,"name","","Returns the name of the Hardware",8,{"inputs":[{"name":"ihardware"}],"output":{"name":"option"}}],[10,"set_name","","Defines the name of the Hardware",8,{"inputs":[{"name":"ihardware"},{"name":"option"}],"output":{"name":"self"}}],[10,"hardware_type","","Returns the device_type of the Hardware",8,{"inputs":[{"name":"ihardware"}],"output":{"name":"option"}}],[10,"set_hardware_type","","Defines the hardware_type of the Hardware",8,{"inputs":[{"name":"ihardware"},{"name":"option"}],"output":{"name":"self"}}],[10,"compute_units","","Returns the compute_units of the Hardware",8,{"inputs":[{"name":"ihardware"}],"output":{"name":"option"}}],[10,"set_compute_units","","Defines the compute_units of the Hardware",8,{"inputs":[{"name":"ihardware"},{"name":"option"}],"output":{"name":"self"}}],[10,"build","","Build an inmutable Hardware",8,{"inputs":[{"name":"ihardware"}],"output":{"name":"self"}}],[11,"hash","","",7,null],[11,"eq","","",7,{"inputs":[{"name":"hardwaretype"},{"name":"hardwaretype"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"hardwaretype"},{"name":"hardwaretype"}],"output":{"name":"bool"}}],[11,"clone","","",7,{"inputs":[{"name":"hardwaretype"}],"output":{"name":"hardwaretype"}}],[11,"fmt","","",7,{"inputs":[{"name":"hardwaretype"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"framework","collenchyma","Provides the generic functionality of a hardware supporting frameworks such as native CPU, OpenCL,\nCUDA, etc..\n[hardware]: ../hardware/index.html",null,null],[4,"Error","collenchyma::framework","Defines a generic set of Framework Errors.",null,null],[13,"Implementation","","Failure related to the Collenchyma implementation of a specific Framework.",9,null],[8,"IFramework","","Defines a Framework.",null,null],[16,"H","","The Hardware representation for this Framework.",10,null],[16,"D","","The Device representation for this Framework.",10,null],[16,"B","","The Binary representation for this Framework.",10,null],[10,"ID","","Defines the Framework by a Name.",10,{"inputs":[],"output":{"name":"str"}}],[10,"new","","Initializes a new Framework.",10,{"inputs":[],"output":{"name":"self"}}],[10,"load_hardwares","","Initializes all the available hardwares.",10,{"inputs":[],"output":{"name":"result"}}],[10,"hardwares","","Returns the cached and available hardwares.",10,null],[10,"binary","","Returns the initialized binary.",10,{"inputs":[{"name":"iframework"}],"output":{"name":"b"}}],[10,"new_device","","Initializes a new Device from the provided hardwares.",10,null],[11,"fmt","","",9,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",9,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"cause","","",9,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[0,"frameworks","collenchyma","Exposes the specific Framework implementations.",null,null],[0,"native","collenchyma::frameworks","Provides informations about the software system, such as OpenCL, CUDA, that contains the set of\ncomponents to support [hardwares][hardware] with kernel execution.\n[hardware]: ../hardware/index.html",null,null],[3,"Native","collenchyma::frameworks::native","Provides the Native framework.",null,null],[4,"Error","","Defines the Native Error.",null,null],[13,"Memory","","Failure related to allocation, syncing memory",11,null],[5,"allocate_boxed_slice","","Traditional allocation via creation of a filled Vec.",null,{"inputs":[{"name":"usize"}],"output":{"name":"box"}}],[0,"device","","Provides a hardware aka. the host CPU.",null,null],[3,"Cpu","collenchyma::frameworks::native::device","Defines the host CPU Hardware.",null,null],[11,"clone","","",12,{"inputs":[{"name":"cpu"}],"output":{"name":"cpu"}}],[11,"fmt","","",12,{"inputs":[{"name":"cpu"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Initializes a new OpenCL hardware.",12,{"inputs":[{"name":"vec"}],"output":{"name":"cpu"}}],[11,"id","","",12,{"inputs":[{"name":"cpu"}],"output":{"name":"isize"}}],[11,"hardwares","","",12,{"inputs":[{"name":"cpu"}],"output":{"name":"vec"}}],[11,"alloc_memory","","",12,{"inputs":[{"name":"cpu"},{"name":"usize"}],"output":{"name":"result"}}],[11,"sync_in","","",12,{"inputs":[{"name":"cpu"},{"name":"devicetype"},{"name":"memorytype"},{"name":"flatbox"}],"output":{"name":"result"}}],[11,"eq","","",12,{"inputs":[{"name":"cpu"},{"name":"self"}],"output":{"name":"bool"}}],[11,"hash","","",12,{"inputs":[{"name":"cpu"},{"name":"h"}],"output":null}],[0,"flatbox","collenchyma::frameworks::native","Provides a Box without any knowledge of its underlying type.",null,null],[3,"FlatBox","collenchyma::frameworks::native::flatbox","A Box without any knowledge of its underlying type.",null,null],[11,"from_box","","Create FlatBox from Box, consuming it.",13,{"inputs":[{"name":"box"}],"output":{"name":"flatbox"}}],[11,"as_slice","","Access memory as slice.",13,null],[11,"as_mut_slice","","Access memory as mutable slice.",13,null],[11,"byte_size","","Returns memory size of the Flatbox.",13,{"inputs":[{"name":"flatbox"}],"output":{"name":"usize"}}],[11,"drop","","",13,{"inputs":[{"name":"flatbox"}],"output":null}],[11,"fmt","","",13,{"inputs":[{"name":"flatbox"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"hardware","collenchyma::frameworks::native","Provides a hardware aka. the host CPU.",null,null],[3,"Hardware","collenchyma::frameworks::native::hardware","Defines the host CPU Hardware.",null,null],[11,"clone","","",14,{"inputs":[{"name":"hardware"}],"output":{"name":"hardware"}}],[11,"fmt","","",14,{"inputs":[{"name":"hardware"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",14,{"inputs":[],"output":{"name":"self"}}],[11,"new","","Initializes a new OpenCL hardware.",14,{"inputs":[{"name":"isize"}],"output":{"name":"hardware"}}],[11,"id","","",14,{"inputs":[{"name":"hardware"}],"output":{"name":"isize"}}],[11,"name","","",14,{"inputs":[{"name":"hardware"}],"output":{"name":"option"}}],[11,"set_name","","",14,{"inputs":[{"name":"hardware"},{"name":"option"}],"output":{"name":"self"}}],[11,"hardware_type","","",14,{"inputs":[{"name":"hardware"}],"output":{"name":"option"}}],[11,"set_hardware_type","","",14,{"inputs":[{"name":"hardware"},{"name":"option"}],"output":{"name":"self"}}],[11,"compute_units","","",14,{"inputs":[{"name":"hardware"}],"output":{"name":"option"}}],[11,"set_compute_units","","",14,{"inputs":[{"name":"hardware"},{"name":"option"}],"output":{"name":"self"}}],[11,"build","","",14,{"inputs":[{"name":"hardware"}],"output":{"name":"hardware"}}],[0,"function","collenchyma::frameworks::native","Provides a operation on native CPU.",null,null],[3,"Function","collenchyma::frameworks::native::function","Defines a host CPU operation.",null,null],[11,"clone","","",15,{"inputs":[{"name":"function"}],"output":{"name":"function"}}],[11,"fmt","","",15,{"inputs":[{"name":"function"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Initializes a native CPU hardware.",15,{"inputs":[],"output":{"name":"function"}}],[0,"binary","collenchyma::frameworks::native","Provides a binary on native CPU.",null,null],[3,"Binary","collenchyma::frameworks::native::binary","Defines a host CPU binary.",null,null],[11,"clone","","",16,{"inputs":[{"name":"binary"}],"output":{"name":"binary"}}],[11,"fmt","","",16,{"inputs":[{"name":"binary"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Initializes the native CPU binary.",16,{"inputs":[],"output":{"name":"binary"}}],[11,"clone","collenchyma::frameworks::native","",11,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"fmt","","",11,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",11,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"cause","","",11,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[8,"INative","","Provides the Native framework trait for explicit Backend behaviour.",null,null],[11,"clone","","",17,{"inputs":[{"name":"native"}],"output":{"name":"native"}}],[11,"fmt","","",17,{"inputs":[{"name":"native"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"ID","","",17,{"inputs":[],"output":{"name":"str"}}],[11,"new","","",17,{"inputs":[],"output":{"name":"native"}}],[11,"load_hardwares","","",17,{"inputs":[],"output":{"name":"result"}}],[11,"hardwares","","",17,null],[11,"binary","","",17,{"inputs":[{"name":"native"}],"output":{"name":"binary"}}],[11,"new_device","","",17,null],[11,"device","collenchyma::backend","",1,{"inputs":[{"name":"backend"}],"output":{"name":"devicetype"}}],[0,"memory","collenchyma","Provides a representation for memory across different frameworks.",null,null],[4,"MemoryType","collenchyma::memory","Container for all known IMemory implementations",null,null],[13,"Native","","A Native Memory representation.",18,null],[8,"IMemory","","Specifies Memory behavior accross frameworks.",null,null],[11,"fmt","","",18,{"inputs":[{"name":"memorytype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_native","","Extract the FlatBox if MemoryType is Native.",18,{"inputs":[{"name":"memorytype"}],"output":{"name":"option"}}],[11,"as_mut_native","","Extract the FlatBox mutably if MemoryType is Native.",18,{"inputs":[{"name":"memorytype"}],"output":{"name":"option"}}],[11,"into_native","","Consumes the Memory and returns an owned OpenCL Memory.",18,{"inputs":[{"name":"memorytype"}],"output":{"name":"option"}}],[0,"tensor","collenchyma","Provides the functionality for memory management across devices.",null,null],[3,"SharedTensor","collenchyma::tensor","Container that handles synchronization of [Memory][1] of type `T`.\n[1]: ../memory/index.html",null,null],[4,"Error","","Errors than can occur when synchronizing memory.",null,null],[13,"MissingSource","","No copy on source device.",19,null],[13,"MissingDestination","","No copy on destination device.",19,null],[13,"InvalidMemory","","No valid MemoryType provided. Other than expected.",19,null],[13,"InvalidMemoryAllocation","","No memory allocation on specified device happened.",19,null],[13,"InvalidRemove","","Unable to remove Memory copy from SharedTensor.",19,null],[13,"MemoryAllocationError","","Framework error at memory allocation.",19,null],[13,"MemorySynchronizationError","","Framework error at memory synchronization.",19,null],[13,"InvalidShape","","Shape provided for reshaping is not compatible with old shape.",19,null],[6,"TensorDesc","","Describes the Descriptor of a SharedTensor.",null,null],[8,"ITensorDesc","","Describes the Descriptor of a Tensor.",null,null],[10,"rank","","Returns the rank of the Tensor.",20,{"inputs":[{"name":"itensordesc"}],"output":{"name":"usize"}}],[10,"size","","Returns the summed up length of all dimensions of the Tensor.",20,{"inputs":[{"name":"itensordesc"}],"output":{"name":"usize"}}],[10,"dims","","Returns the dimensions of the Tensor.",20,{"inputs":[{"name":"itensordesc"}],"output":{"name":"vec"}}],[10,"dims_i32","","Returns the dimensions of the Tensor as Vec&lt;i32&gt;.",20,{"inputs":[{"name":"itensordesc"}],"output":{"name":"vec"}}],[11,"default_stride","","Returns the default stride for an Rust allocated Tensor.",20,{"inputs":[{"name":"itensordesc"}],"output":{"name":"vec"}}],[11,"default_stride_i32","","Returns the default stride for a Rust allocated Tensor as i32.",20,{"inputs":[{"name":"itensordesc"}],"output":{"name":"vec"}}],[8,"IntoTensorDesc","","Describes a conversion into a Tensor Descriptor.",null,null],[10,"into","","Converts the implemented type into a TensorDesc.",21,{"inputs":[{"name":"intotensordesc"}],"output":{"name":"tensordesc"}}],[11,"fmt","","",22,{"inputs":[{"name":"sharedtensor"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into","collections::vec","",23,{"inputs":[{"name":"vec"}],"output":{"name":"tensordesc"}}],[11,"rank","collenchyma::tensor","",24,{"inputs":[{"name":"tensordesc"}],"output":{"name":"usize"}}],[11,"size","","",24,{"inputs":[{"name":"tensordesc"}],"output":{"name":"usize"}}],[11,"dims","","",24,{"inputs":[{"name":"tensordesc"}],"output":{"name":"vec"}}],[11,"dims_i32","","",24,{"inputs":[{"name":"tensordesc"}],"output":{"name":"vec"}}],[11,"new","","Create new Tensor by allocating [Memory][1] on a Device.\n[1]: ../memory/index.html",22,{"inputs":[{"name":"devicetype"},{"name":"d"}],"output":{"name":"result"}}],[11,"reshape","","Change the shape of the Tensor.",22,{"inputs":[{"name":"sharedtensor"},{"name":"d"}],"output":{"name":"result"}}],[11,"resize","","Change the size and shape of the Tensor.",22,{"inputs":[{"name":"sharedtensor"},{"name":"d"}],"output":{"name":"result"}}],[11,"sync","","Synchronize memory from latest location to `destination`.",22,{"inputs":[{"name":"sharedtensor"},{"name":"devicetype"}],"output":{"name":"result"}}],[11,"get","","Get a reference to the memory copy on the provided `device`.",22,{"inputs":[{"name":"sharedtensor"},{"name":"devicetype"}],"output":{"name":"option"}}],[11,"get_mut","","Get a mutable reference to the memory copy on the provided `device`.",22,{"inputs":[{"name":"sharedtensor"},{"name":"devicetype"}],"output":{"name":"option"}}],[11,"remove_copy","","Removes Copy from SharedTensor and therefore aquires ownership over the removed memory copy for synchronizing.",22,{"inputs":[{"name":"sharedtensor"},{"name":"devicetype"}],"output":{"name":"result"}}],[11,"add_device","","Track a new `device` and allocate memory on it.",22,{"inputs":[{"name":"sharedtensor"},{"name":"devicetype"}],"output":{"name":"result"}}],[11,"latest_device","","Returns the device that contains the up-to-date memory copy.",22,{"inputs":[{"name":"sharedtensor"}],"output":{"name":"devicetype"}}],[11,"capacity","","Returns the number of elements for which the Tensor has been allocated.",22,{"inputs":[{"name":"sharedtensor"}],"output":{"name":"usize"}}],[11,"desc","","Returns the descriptor of the Tensor.",22,{"inputs":[{"name":"sharedtensor"}],"output":{"name":"tensordesc"}}],[11,"mem_size","","Returns the allocated Memory size in bytes.",22,{"inputs":[{"name":"usize"}],"output":{"name":"usize"}}],[11,"clone","","",19,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"fmt","","",19,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",19,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",19,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"cause","","",19,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[0,"operation","collenchyma","Provides the generic functionality for backend-agnostic operations.",null,null],[8,"IOperation","collenchyma::operation","Defines the functionality of an operation.",null,null],[0,"binary","collenchyma","Provides the generic functionality for a backend-specific implementation of a\n[library][libraries].\n[libraries]: ../libraries/index.html",null,null],[8,"IBinary","collenchyma::binary","Defines the functionality for turning a library into backend-specific, executable operations.",null,null],[0,"error","collenchyma","Defines the general set of error types in Collenchyma.",null,null],[4,"Error","collenchyma::error","Defines the set of available Collenchyma error types.",null,null],[13,"Framework","","Failure related to the Framework implementation.",25,null],[13,"Tensor","","Failure related to the Tensor.",25,null],[13,"Plugin","","Failure at Plugin Operation.",25,null],[13,"Device","","Failure related to a Device.",25,null],[11,"fmt","","",25,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",25,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",25,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"cause","","",25,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[0,"plugin","collenchyma","Provides helpers for explicit implementations of Backend [Operations][operation].\n[operation]: ../operation/index.html",null,null],[8,"Float","collenchyma::plugin","",null,null],[10,"nan","","Returns the `NaN` value.",26,{"inputs":[],"output":{"name":"self"}}],[10,"infinity","","Returns the infinite value.",26,{"inputs":[],"output":{"name":"self"}}],[10,"neg_infinity","","Returns the negative infinite value.",26,{"inputs":[],"output":{"name":"self"}}],[10,"neg_zero","","Returns `-0.0`.",26,{"inputs":[],"output":{"name":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",26,{"inputs":[],"output":{"name":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",26,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",26,{"inputs":[],"output":{"name":"self"}}],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",26,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and\nfalse otherwise.",26,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",26,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_normal","","Returns `true` if the number is neither zero, infinite,\n[subnormal][subnormal], or `NaN`.",26,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"classify","","Returns the floating point category of the number. If only one property\nis going to be tested, it is generally faster to use the specific\npredicate instead.",26,{"inputs":[{"name":"float"}],"output":{"name":"fpcategory"}}],[10,"floor","","Returns the largest integer less than or equal to a number.",26,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",26,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from\n`0.0`.",26,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"trunc","","Return the integer part of a number.",26,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"fract","","Returns the fractional part of a number.",26,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the\nnumber is `Float::nan()`.",26,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"signum","","Returns a number that represents the sign of `self`.",26,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0` and\n`Float::infinity()`.",26,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0` and\n`Float::neg_infinity()`.",26,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding\nerror. This produces a more accurate result with better performance than\na separate multiplication operation followed by an add.",26,{"inputs":[{"name":"float"},{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",26,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"powi","","Raise a number to an integer power.",26,{"inputs":[{"name":"float"},{"name":"i32"}],"output":{"name":"self"}}],[10,"powf","","Raise a number to a floating point power.",26,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"sqrt","","Take the square root of a number.",26,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"exp","","Returns `e^(self)`, (the exponential function).",26,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"exp2","","Returns `2^(self)`.",26,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"ln","","Returns the natural logarithm of the number.",26,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",26,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"log2","","Returns the base 2 logarithm of the number.",26,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"log10","","Returns the base 10 logarithm of the number.",26,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"max","","Returns the maximum of the two numbers.",26,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"min","","Returns the minimum of the two numbers.",26,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",26,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"cbrt","","Take the cubic root of a number.",26,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given\nlegs of length `x` and `y`.",26,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin","","Computes the sine of a number (in radians).",26,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"cos","","Computes the cosine of a number (in radians).",26,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"tan","","Computes the tangent of a number (in radians).",26,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"asin","","Computes the arcsine of a number. Return value is in radians in\nthe range [-pi/2, pi/2] or NaN if the number is outside the range\n[-1, 1].",26,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"acos","","Computes the arccosine of a number. Return value is in radians in\nthe range [0, pi] or NaN if the number is outside the range\n[-1, 1].",26,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the\nrange [-pi/2, pi/2];",26,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",26,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns\n`(sin(x), cos(x))`.",26,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the\nnumber is close to zero.",26,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if\nthe operations were performed separately.",26,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"sinh","","Hyperbolic sine function.",26,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"cosh","","Hyperbolic cosine function.",26,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"tanh","","Hyperbolic tangent function.",26,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"asinh","","Inverse hyperbolic sine function.",26,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"acosh","","Inverse hyperbolic cosine function.",26,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"atanh","","Inverse hyperbolic tangent function.",26,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively.\nThe original number can be recovered by `sign * mantissa * 2 ^ exponent`.\nThe floating point encoding is documented in the [Reference][floating-point].",26,null],[4,"Error","","Defines a high-level Plugin Error.",null,null],[13,"MissingMemoryForDevice","","Failure at receiving the correct device memory from the SharedMemory.",27,null],[13,"Operation","","Failure at the execution of the Operation.",27,null],[13,"Plugin","","Failure at the Plugin.",27,null],[0,"numeric_helpers","","Describes numeric types and traits for a Plugin.",null,null],[11,"clone","","",27,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"fmt","","",27,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",27,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",27,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"cause","","",27,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"from","collenchyma::error","",25,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[0,"prelude","collenchyma","A module meant to be glob imported when using Collenchyma.",null,null],[11,"from","collenchyma::tensor","",19,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"from","collenchyma::error","",25,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"from","","",25,{"inputs":[{"name":"error"}],"output":{"name":"error"}}]],"paths":[[8,"IBackend"],[3,"Backend"],[3,"BackendConfig"],[4,"DeviceType"],[4,"Error"],[8,"IDevice"],[8,"IDeviceSyncOut"],[4,"HardwareType"],[8,"IHardware"],[4,"Error"],[8,"IFramework"],[4,"Error"],[3,"Cpu"],[3,"FlatBox"],[3,"Hardware"],[3,"Function"],[3,"Binary"],[3,"Native"],[4,"MemoryType"],[4,"Error"],[8,"ITensorDesc"],[8,"IntoTensorDesc"],[3,"SharedTensor"],[3,"Vec"],[6,"TensorDesc"],[4,"Error"],[8,"Float"],[4,"Error"]]};
searchIndex["rblas"] = {"doc":"BLAS bindings and wrappers.","items":[[0,"attribute","rblas","Various attributes of vectors and matrices.",null,null],[4,"Order","rblas::attribute","",null,null],[13,"RowMajor","","",0,null],[13,"ColMajor","","",0,null],[4,"Transpose","","",null,null],[13,"NoTrans","","",1,null],[13,"Trans","","",1,null],[13,"ConjTrans","","",1,null],[4,"Symmetry","","",null,null],[13,"Upper","","",2,null],[13,"Lower","","",2,null],[4,"Diagonal","","",null,null],[13,"NonUnit","","",3,null],[13,"Unit","","",3,null],[4,"Side","","",null,null],[13,"Left","","",4,null],[13,"Right","","",4,null],[11,"clone","","",0,{"inputs":[{"name":"order"}],"output":{"name":"order"}}],[11,"clone","","",1,{"inputs":[{"name":"transpose"}],"output":{"name":"transpose"}}],[11,"clone","","",2,{"inputs":[{"name":"symmetry"}],"output":{"name":"symmetry"}}],[11,"clone","","",3,{"inputs":[{"name":"diagonal"}],"output":{"name":"diagonal"}}],[11,"clone","","",4,{"inputs":[{"name":"side"}],"output":{"name":"side"}}],[0,"default","rblas","",null,null],[8,"Default","rblas::default","",null,null],[10,"one","","",5,{"inputs":[],"output":{"name":"self"}}],[10,"zero","","",5,{"inputs":[],"output":{"name":"self"}}],[10,"neg_one","","",5,{"inputs":[],"output":{"name":"self"}}],[11,"one","num_complex","",6,{"inputs":[],"output":{"name":"complex"}}],[11,"zero","","",6,{"inputs":[],"output":{"name":"complex"}}],[11,"neg_one","","",6,{"inputs":[],"output":{"name":"complex"}}],[11,"one","","",6,{"inputs":[],"output":{"name":"complex"}}],[11,"zero","","",6,{"inputs":[],"output":{"name":"complex"}}],[11,"neg_one","","",6,{"inputs":[],"output":{"name":"complex"}}],[0,"vector","rblas","Vector operations.",null,null],[0,"ll","rblas::vector","Bindings for vector functions.",null,null],[0,"cblas_s","rblas::vector::ll","",null,null],[5,"cblas_scopy","rblas::vector::ll::cblas_s","",null,null],[5,"cblas_saxpy","","",null,null],[5,"cblas_sscal","","",null,null],[5,"cblas_sswap","","",null,null],[5,"cblas_sdsdot","","",null,null],[5,"cblas_sdot","","",null,null],[5,"cblas_sasum","","",null,null],[5,"cblas_scasum","","",null,null],[5,"cblas_snrm2","","",null,null],[5,"cblas_scnrm2","","",null,null],[5,"cblas_srot","","",null,null],[5,"cblas_srotm","","",null,null],[5,"cblas_srotg","","",null,null],[5,"cblas_srotmg","","",null,null],[0,"cblas_d","rblas::vector::ll","",null,null],[5,"cblas_dcopy","rblas::vector::ll::cblas_d","",null,null],[5,"cblas_daxpy","","",null,null],[5,"cblas_dscal","","",null,null],[5,"cblas_dswap","","",null,null],[5,"cblas_dsdot","","",null,null],[5,"cblas_ddot","","",null,null],[5,"cblas_dasum","","",null,null],[5,"cblas_dzasum","","",null,null],[5,"cblas_dnrm2","","",null,null],[5,"cblas_dznrm2","","",null,null],[5,"cblas_drot","","",null,null],[5,"cblas_drotm","","",null,null],[5,"cblas_drotg","","",null,null],[5,"cblas_drotmg","","",null,null],[0,"cblas_c","rblas::vector::ll","",null,null],[5,"cblas_ccopy","rblas::vector::ll::cblas_c","",null,null],[5,"cblas_caxpy","","",null,null],[5,"cblas_cscal","","",null,null],[5,"cblas_csscal","","",null,null],[5,"cblas_cswap","","",null,null],[5,"cblas_cdotu_sub","","",null,null],[5,"cblas_cdotc_sub","","",null,null],[0,"cblas_z","rblas::vector::ll","",null,null],[5,"cblas_zcopy","rblas::vector::ll::cblas_z","",null,null],[5,"cblas_zaxpy","","",null,null],[5,"cblas_zscal","","",null,null],[5,"cblas_zdscal","","",null,null],[5,"cblas_zswap","","",null,null],[5,"cblas_zdotu_sub","","",null,null],[5,"cblas_zdotc_sub","","",null,null],[0,"cblas_i","rblas::vector::ll","",null,null],[5,"cblas_isamax","rblas::vector::ll::cblas_i","",null,null],[5,"cblas_idamax","","",null,null],[5,"cblas_icamax","","",null,null],[5,"cblas_izamax","","",null,null],[0,"ops","rblas::vector","Wrappers for vector functions.",null,null],[8,"Copy","rblas::vector::ops","",null,null],[10,"copy","","Copies `src.len()` elements of `src` into `dst`.",7,{"inputs":[{"name":"v"},{"name":"w"}],"output":null}],[10,"copy_mat","","Copies the entire matrix `dst` into `src`.",7,{"inputs":[{"name":"matrix"},{"name":"matrix"}],"output":null}],[8,"Axpy","","Computes `a * x + y` and stores the result in `y`.",null,null],[10,"axpy","","",8,{"inputs":[{"name":"self"},{"name":"v"},{"name":"w"}],"output":null}],[10,"axpy_mat","","",8,{"inputs":[{"name":"self"},{"name":"matrix"},{"name":"matrix"}],"output":null}],[8,"Scal","","Computes `a * x` and stores the result in `x`.",null,null],[10,"scal","","",9,{"inputs":[{"name":"self"},{"name":"v"}],"output":null}],[10,"scal_mat","","",9,{"inputs":[{"name":"self"},{"name":"matrix"}],"output":null}],[8,"Swap","","Swaps the content of `x` and `y`.",null,null],[10,"swap","","If they are different lengths, the shorter length is used.",10,{"inputs":[{"name":"v"},{"name":"w"}],"output":null}],[8,"Dot","","Computes `x^T * y`.",null,null],[10,"dot","","",11,{"inputs":[{"name":"v"},{"name":"w"}],"output":{"name":"self"}}],[8,"Dotc","","Computes `x^H * y`.",null,null],[11,"dotc","","",12,{"inputs":[{"name":"v"},{"name":"w"}],"output":{"name":"self"}}],[8,"Asum","","Computes the sum of the absolute values of elements in a vector.",null,null],[10,"asum","","",13,{"inputs":[{"name":"v"}],"output":{"name":"self"}}],[8,"Nrm2","","Computes the L2 norm (Euclidian length) of a vector.",null,null],[10,"nrm2","","",14,{"inputs":[{"name":"v"}],"output":{"name":"self"}}],[8,"Iamax","","Finds the index of the maximum element in a vector.",null,null],[10,"iamax","","",15,{"inputs":[{"name":"v"}],"output":{"name":"usize"}}],[8,"Rot","","Applies a Givens rotation matrix to a pair of vectors, where `cos` is\nthe value of the cosine of the angle in the Givens matrix, and `sin` is\nthe sine.",null,null],[10,"rot","","",16,{"inputs":[{"name":"v"},{"name":"w"},{"name":"self"},{"name":"self"}],"output":null}],[11,"copy","","",17,{"inputs":[{"name":"v"},{"name":"w"}],"output":null}],[11,"copy_mat","","",17,{"inputs":[{"name":"matrix"},{"name":"matrix"}],"output":null}],[11,"copy","","",18,{"inputs":[{"name":"v"},{"name":"w"}],"output":null}],[11,"copy_mat","","",18,{"inputs":[{"name":"matrix"},{"name":"matrix"}],"output":null}],[11,"axpy","","",17,{"inputs":[{"name":"complex32"},{"name":"v"},{"name":"w"}],"output":null}],[11,"axpy_mat","","",17,{"inputs":[{"name":"complex32"},{"name":"matrix"},{"name":"matrix"}],"output":null}],[11,"axpy","","",18,{"inputs":[{"name":"complex64"},{"name":"v"},{"name":"w"}],"output":null}],[11,"axpy_mat","","",18,{"inputs":[{"name":"complex64"},{"name":"matrix"},{"name":"matrix"}],"output":null}],[11,"scal","","",17,{"inputs":[{"name":"complex32"},{"name":"v"}],"output":null}],[11,"scal_mat","","",17,{"inputs":[{"name":"complex32"},{"name":"matrix"}],"output":null}],[11,"scal","","",18,{"inputs":[{"name":"complex64"},{"name":"v"}],"output":null}],[11,"scal_mat","","",18,{"inputs":[{"name":"complex64"},{"name":"matrix"}],"output":null}],[11,"swap","","",17,{"inputs":[{"name":"v"},{"name":"w"}],"output":null}],[11,"swap","","",18,{"inputs":[{"name":"v"},{"name":"w"}],"output":null}],[11,"dot","","",17,{"inputs":[{"name":"v"},{"name":"w"}],"output":{"name":"complex32"}}],[11,"dot","","",18,{"inputs":[{"name":"v"},{"name":"w"}],"output":{"name":"complex64"}}],[11,"dotc","","",17,{"inputs":[{"name":"v"},{"name":"w"}],"output":{"name":"complex32"}}],[11,"dotc","","",18,{"inputs":[{"name":"v"},{"name":"w"}],"output":{"name":"complex64"}}],[11,"asum","","",17,{"inputs":[{"name":"v"}],"output":{"name":"complex32"}}],[11,"asum","","",18,{"inputs":[{"name":"v"}],"output":{"name":"complex64"}}],[11,"nrm2","","",17,{"inputs":[{"name":"v"}],"output":{"name":"complex32"}}],[11,"nrm2","","",18,{"inputs":[{"name":"v"}],"output":{"name":"complex64"}}],[11,"iamax","","",17,{"inputs":[{"name":"v"}],"output":{"name":"usize"}}],[11,"iamax","","",18,{"inputs":[{"name":"v"}],"output":{"name":"usize"}}],[8,"Vector","rblas::vector","Methods that allow a type to be used in BLAS functions as a vector.",null,null],[11,"inc","","The stride within the vector. For example, if `inc` returns 7, every\n7th element is used. Defaults to 1.",19,{"inputs":[{"name":"vector"}],"output":{"name":"i32"}}],[10,"len","","The number of elements in the vector.",19,{"inputs":[{"name":"vector"}],"output":{"name":"i32"}}],[10,"as_ptr","","An unsafe pointer to a contiguous block of memory.",19,null],[10,"as_mut_ptr","","An unsafe mutable pointer to a contiguous block of memory.",19,null],[8,"VectorOperations","","",null,null],[11,"update","","",20,{"inputs":[{"name":"vectoroperations"},{"name":"t"},{"name":"vector"}],"output":{"name":"self"}}],[11,"scale","","",20,{"inputs":[{"name":"vectoroperations"},{"name":"t"}],"output":{"name":"self"}}],[11,"dot","","",20,{"inputs":[{"name":"vectoroperations"},{"name":"vector"}],"output":{"name":"t"}}],[11,"abs_sum","","",20,{"inputs":[{"name":"vectoroperations"}],"output":{"name":"t"}}],[11,"norm","","",20,{"inputs":[{"name":"vectoroperations"}],"output":{"name":"t"}}],[11,"max_index","","",20,{"inputs":[{"name":"vectoroperations"}],"output":{"name":"usize"}}],[11,"len","collections::vec","",21,{"inputs":[{"name":"vec"}],"output":{"name":"i32"}}],[11,"as_ptr","","",21,null],[11,"as_mut_ptr","","",21,null],[0,"matrix_vector","rblas","Matrix-vector operations.",null,null],[0,"ll","rblas::matrix_vector","Bindings for matrix-vector functions.",null,null],[0,"cblas_s","rblas::matrix_vector::ll","",null,null],[5,"cblas_sgemv","rblas::matrix_vector::ll::cblas_s","",null,null],[5,"cblas_ssymv","","",null,null],[5,"cblas_strmv","","",null,null],[5,"cblas_strsv","","",null,null],[5,"cblas_sger","","",null,null],[5,"cblas_ssyr","","",null,null],[5,"cblas_ssyr2","","",null,null],[5,"cblas_sspmv","","",null,null],[5,"cblas_sgbmv","","",null,null],[5,"cblas_ssbmv","","",null,null],[5,"cblas_stbmv","","",null,null],[5,"cblas_stbsv","","",null,null],[5,"cblas_stpmv","","",null,null],[5,"cblas_stpsv","","",null,null],[5,"cblas_sspr","","",null,null],[5,"cblas_sspr2","","",null,null],[0,"cblas_d","rblas::matrix_vector::ll","",null,null],[5,"cblas_dgemv","rblas::matrix_vector::ll::cblas_d","",null,null],[5,"cblas_dsymv","","",null,null],[5,"cblas_dtrmv","","",null,null],[5,"cblas_dtrsv","","",null,null],[5,"cblas_dger","","",null,null],[5,"cblas_dsyr","","",null,null],[5,"cblas_dsyr2","","",null,null],[5,"cblas_dspmv","","",null,null],[5,"cblas_dgbmv","","",null,null],[5,"cblas_dsbmv","","",null,null],[5,"cblas_dtbmv","","",null,null],[5,"cblas_dtbsv","","",null,null],[5,"cblas_dtpmv","","",null,null],[5,"cblas_dtpsv","","",null,null],[5,"cblas_dspr","","",null,null],[5,"cblas_dspr2","","",null,null],[0,"cblas_c","rblas::matrix_vector::ll","",null,null],[5,"cblas_cgemv","rblas::matrix_vector::ll::cblas_c","",null,null],[5,"cblas_csymv","","",null,null],[5,"cblas_chemv","","",null,null],[5,"cblas_ctrmv","","",null,null],[5,"cblas_ctrsv","","",null,null],[5,"cblas_cgeru","","",null,null],[5,"cblas_cgerc","","",null,null],[5,"cblas_cher","","",null,null],[5,"cblas_cher2","","",null,null],[5,"cblas_cgbmv","","",null,null],[5,"cblas_chbmv","","",null,null],[5,"cblas_ctbmv","","",null,null],[5,"cblas_ctbsv","","",null,null],[5,"cblas_chpmv","","",null,null],[5,"cblas_ctpmv","","",null,null],[5,"cblas_ctpsv","","",null,null],[5,"cblas_chpr","","",null,null],[5,"cblas_chpr2","","",null,null],[0,"cblas_z","rblas::matrix_vector::ll","",null,null],[5,"cblas_zgemv","rblas::matrix_vector::ll::cblas_z","",null,null],[5,"cblas_zsymv","","",null,null],[5,"cblas_zhemv","","",null,null],[5,"cblas_ztrmv","","",null,null],[5,"cblas_ztrsv","","",null,null],[5,"cblas_zgeru","","",null,null],[5,"cblas_zgerc","","",null,null],[5,"cblas_zher","","",null,null],[5,"cblas_zher2","","",null,null],[5,"cblas_zgbmv","","",null,null],[5,"cblas_zhbmv","","",null,null],[5,"cblas_ztbmv","","",null,null],[5,"cblas_ztbsv","","",null,null],[5,"cblas_zhpmv","","",null,null],[5,"cblas_ztpmv","","",null,null],[5,"cblas_ztpsv","","",null,null],[5,"cblas_zhpr","","",null,null],[5,"cblas_zhpr2","","",null,null],[0,"ops","rblas::matrix_vector","Wrappers for matrix-vector functions.",null,null],[8,"Gemv","rblas::matrix_vector::ops","",null,null],[10,"gemv","","",22,{"inputs":[{"name":"transpose"},{"name":"self"},{"name":"matrix"},{"name":"v"},{"name":"self"},{"name":"w"}],"output":null}],[8,"Symv","","",null,null],[10,"symv","","",23,{"inputs":[{"name":"symmetry"},{"name":"self"},{"name":"matrix"},{"name":"v"},{"name":"self"},{"name":"w"}],"output":null}],[8,"Hemv","","",null,null],[10,"hemv","","",24,{"inputs":[{"name":"symmetry"},{"name":"self"},{"name":"matrix"},{"name":"v"},{"name":"self"},{"name":"w"}],"output":null}],[8,"Ger","","",null,null],[10,"ger","","",25,{"inputs":[{"name":"self"},{"name":"v"},{"name":"w"},{"name":"matrix"}],"output":null}],[8,"Gerc","","",null,null],[11,"gerc","","",26,{"inputs":[{"name":"self"},{"name":"v"},{"name":"w"},{"name":"matrix"}],"output":null}],[8,"Syr","","",null,null],[10,"syr","","",27,{"inputs":[{"name":"symmetry"},{"name":"self"},{"name":"v"},{"name":"matrix"}],"output":null}],[8,"Her","","",null,null],[10,"her","","",28,{"inputs":[{"name":"symmetry"},{"name":"self"},{"name":"v"},{"name":"matrix"}],"output":null}],[8,"Syr2","","",null,null],[10,"syr2","","",29,{"inputs":[{"name":"symmetry"},{"name":"self"},{"name":"v"},{"name":"w"},{"name":"matrix"}],"output":null}],[8,"Her2","","",null,null],[10,"her2","","",30,{"inputs":[{"name":"symmetry"},{"name":"self"},{"name":"v"},{"name":"w"},{"name":"matrix"}],"output":null}],[8,"Gbmv","","",null,null],[10,"gbmv","","",31,{"inputs":[{"name":"transpose"},{"name":"self"},{"name":"bandmatrix"},{"name":"v"},{"name":"self"},{"name":"w"}],"output":null}],[8,"Sbmv","","",null,null],[10,"sbmv","","",32,{"inputs":[{"name":"symmetry"},{"name":"self"},{"name":"bandmatrix"},{"name":"v"},{"name":"self"},{"name":"w"}],"output":null}],[8,"Hbmv","","",null,null],[10,"hbmv","","",33,{"inputs":[{"name":"symmetry"},{"name":"self"},{"name":"bandmatrix"},{"name":"v"},{"name":"self"},{"name":"w"}],"output":null}],[8,"Tbmv","","",null,null],[10,"tbmv","","",34,{"inputs":[{"name":"symmetry"},{"name":"transpose"},{"name":"diagonal"},{"name":"bandmatrix"},{"name":"v"}],"output":null}],[8,"Tbsv","","",null,null],[10,"tbsv","","",35,{"inputs":[{"name":"symmetry"},{"name":"transpose"},{"name":"diagonal"},{"name":"bandmatrix"},{"name":"v"}],"output":null}],[8,"Spmv","","",null,null],[10,"spmv","","",36,{"inputs":[{"name":"symmetry"},{"name":"self"},{"name":"matrix"},{"name":"v"},{"name":"self"},{"name":"w"}],"output":null}],[8,"Hpmv","","",null,null],[10,"hpmv","","",37,{"inputs":[{"name":"symmetry"},{"name":"self"},{"name":"matrix"},{"name":"v"},{"name":"self"},{"name":"w"}],"output":null}],[8,"Tpmv","","",null,null],[10,"tpmv","","",38,{"inputs":[{"name":"symmetry"},{"name":"transpose"},{"name":"diagonal"},{"name":"matrix"},{"name":"v"}],"output":null}],[8,"Tpsv","","",null,null],[10,"tpsv","","",39,{"inputs":[{"name":"symmetry"},{"name":"transpose"},{"name":"diagonal"},{"name":"matrix"},{"name":"v"}],"output":null}],[8,"Hpr","","",null,null],[10,"hpr","","",40,{"inputs":[{"name":"symmetry"},{"name":"self"},{"name":"v"},{"name":"matrix"}],"output":null}],[8,"Spr","","",null,null],[10,"spr","","",41,{"inputs":[{"name":"symmetry"},{"name":"self"},{"name":"v"},{"name":"matrix"}],"output":null}],[8,"Spr2","","",null,null],[10,"spr2","","",42,{"inputs":[{"name":"symmetry"},{"name":"self"},{"name":"v"},{"name":"w"},{"name":"matrix"}],"output":null}],[8,"Hpr2","","",null,null],[10,"hpr2","","",43,{"inputs":[{"name":"symmetry"},{"name":"self"},{"name":"v"},{"name":"w"},{"name":"matrix"}],"output":null}],[11,"gemv","","",17,{"inputs":[{"name":"transpose"},{"name":"complex32"},{"name":"matrix"},{"name":"v"},{"name":"complex32"},{"name":"w"}],"output":null}],[11,"gemv","","",18,{"inputs":[{"name":"transpose"},{"name":"complex64"},{"name":"matrix"},{"name":"v"},{"name":"complex64"},{"name":"w"}],"output":null}],[11,"symv","","",17,{"inputs":[{"name":"symmetry"},{"name":"complex32"},{"name":"matrix"},{"name":"v"},{"name":"complex32"},{"name":"w"}],"output":null}],[11,"symv","","",18,{"inputs":[{"name":"symmetry"},{"name":"complex64"},{"name":"matrix"},{"name":"v"},{"name":"complex64"},{"name":"w"}],"output":null}],[11,"hemv","","",17,{"inputs":[{"name":"symmetry"},{"name":"complex32"},{"name":"matrix"},{"name":"v"},{"name":"complex32"},{"name":"w"}],"output":null}],[11,"hemv","","",18,{"inputs":[{"name":"symmetry"},{"name":"complex64"},{"name":"matrix"},{"name":"v"},{"name":"complex64"},{"name":"w"}],"output":null}],[11,"ger","","",17,{"inputs":[{"name":"complex32"},{"name":"v"},{"name":"w"},{"name":"matrix"}],"output":null}],[11,"ger","","",18,{"inputs":[{"name":"complex64"},{"name":"v"},{"name":"w"},{"name":"matrix"}],"output":null}],[11,"gerc","","",17,{"inputs":[{"name":"complex32"},{"name":"v"},{"name":"w"},{"name":"matrix"}],"output":null}],[11,"gerc","","",18,{"inputs":[{"name":"complex64"},{"name":"v"},{"name":"w"},{"name":"matrix"}],"output":null}],[11,"her2","","",17,{"inputs":[{"name":"symmetry"},{"name":"complex32"},{"name":"v"},{"name":"w"},{"name":"matrix"}],"output":null}],[11,"her2","","",18,{"inputs":[{"name":"symmetry"},{"name":"complex64"},{"name":"v"},{"name":"w"},{"name":"matrix"}],"output":null}],[11,"gbmv","","",17,{"inputs":[{"name":"transpose"},{"name":"complex32"},{"name":"bandmatrix"},{"name":"v"},{"name":"complex32"},{"name":"w"}],"output":null}],[11,"gbmv","","",18,{"inputs":[{"name":"transpose"},{"name":"complex64"},{"name":"bandmatrix"},{"name":"v"},{"name":"complex64"},{"name":"w"}],"output":null}],[11,"hbmv","","",17,{"inputs":[{"name":"symmetry"},{"name":"complex32"},{"name":"bandmatrix"},{"name":"v"},{"name":"complex32"},{"name":"w"}],"output":null}],[11,"hbmv","","",18,{"inputs":[{"name":"symmetry"},{"name":"complex64"},{"name":"bandmatrix"},{"name":"v"},{"name":"complex64"},{"name":"w"}],"output":null}],[11,"tbmv","","",17,{"inputs":[{"name":"symmetry"},{"name":"transpose"},{"name":"diagonal"},{"name":"bandmatrix"},{"name":"v"}],"output":null}],[11,"tbmv","","",18,{"inputs":[{"name":"symmetry"},{"name":"transpose"},{"name":"diagonal"},{"name":"bandmatrix"},{"name":"v"}],"output":null}],[11,"tbsv","","",17,{"inputs":[{"name":"symmetry"},{"name":"transpose"},{"name":"diagonal"},{"name":"bandmatrix"},{"name":"v"}],"output":null}],[11,"tbsv","","",18,{"inputs":[{"name":"symmetry"},{"name":"transpose"},{"name":"diagonal"},{"name":"bandmatrix"},{"name":"v"}],"output":null}],[11,"hpmv","","",17,{"inputs":[{"name":"symmetry"},{"name":"complex32"},{"name":"matrix"},{"name":"v"},{"name":"complex32"},{"name":"w"}],"output":null}],[11,"hpmv","","",18,{"inputs":[{"name":"symmetry"},{"name":"complex64"},{"name":"matrix"},{"name":"v"},{"name":"complex64"},{"name":"w"}],"output":null}],[11,"tpmv","","",17,{"inputs":[{"name":"symmetry"},{"name":"transpose"},{"name":"diagonal"},{"name":"matrix"},{"name":"v"}],"output":null}],[11,"tpmv","","",18,{"inputs":[{"name":"symmetry"},{"name":"transpose"},{"name":"diagonal"},{"name":"matrix"},{"name":"v"}],"output":null}],[11,"tpsv","","",17,{"inputs":[{"name":"symmetry"},{"name":"transpose"},{"name":"diagonal"},{"name":"matrix"},{"name":"v"}],"output":null}],[11,"tpsv","","",18,{"inputs":[{"name":"symmetry"},{"name":"transpose"},{"name":"diagonal"},{"name":"matrix"},{"name":"v"}],"output":null}],[11,"hpr2","","",17,{"inputs":[{"name":"symmetry"},{"name":"complex32"},{"name":"v"},{"name":"w"},{"name":"matrix"}],"output":null}],[11,"hpr2","","",18,{"inputs":[{"name":"symmetry"},{"name":"complex64"},{"name":"v"},{"name":"w"},{"name":"matrix"}],"output":null}],[0,"matrix","rblas","Matrix operations.",null,null],[0,"ll","rblas::matrix","Bindings for matrix functions.",null,null],[0,"cblas_s","rblas::matrix::ll","",null,null],[5,"cblas_sgemm","rblas::matrix::ll::cblas_s","",null,null],[5,"cblas_ssymm","","",null,null],[5,"cblas_strmm","","",null,null],[5,"cblas_strsm","","",null,null],[5,"cblas_ssyrk","","",null,null],[5,"cblas_ssyr2k","","",null,null],[0,"cblas_d","rblas::matrix::ll","",null,null],[5,"cblas_dgemm","rblas::matrix::ll::cblas_d","",null,null],[5,"cblas_dsymm","","",null,null],[5,"cblas_dtrmm","","",null,null],[5,"cblas_dtrsm","","",null,null],[5,"cblas_dsyrk","","",null,null],[5,"cblas_dsyr2k","","",null,null],[0,"cblas_c","rblas::matrix::ll","",null,null],[5,"cblas_cgemm","rblas::matrix::ll::cblas_c","",null,null],[5,"cblas_csymm","","",null,null],[5,"cblas_chemm","","",null,null],[5,"cblas_ctrmm","","",null,null],[5,"cblas_ctrsm","","",null,null],[5,"cblas_cherk","","",null,null],[5,"cblas_cher2k","","",null,null],[5,"cblas_csyrk","","",null,null],[5,"cblas_csyr2k","","",null,null],[0,"cblas_z","rblas::matrix::ll","",null,null],[5,"cblas_zgemm","rblas::matrix::ll::cblas_z","",null,null],[5,"cblas_zsymm","","",null,null],[5,"cblas_zhemm","","",null,null],[5,"cblas_ztrmm","","",null,null],[5,"cblas_ztrsm","","",null,null],[5,"cblas_zherk","","",null,null],[5,"cblas_zher2k","","",null,null],[5,"cblas_zsyrk","","",null,null],[5,"cblas_zsyr2k","","",null,null],[0,"ops","rblas::matrix","Wrappers for matrix functions.",null,null],[8,"Gemm","rblas::matrix::ops","",null,null],[10,"gemm","","",44,{"inputs":[{"name":"self"},{"name":"transpose"},{"name":"matrix"},{"name":"transpose"},{"name":"matrix"},{"name":"self"},{"name":"matrix"}],"output":null}],[8,"Symm","","",null,null],[10,"symm","","",45,{"inputs":[{"name":"side"},{"name":"symmetry"},{"name":"self"},{"name":"matrix"},{"name":"matrix"},{"name":"self"},{"name":"matrix"}],"output":null}],[8,"Hemm","","",null,null],[10,"hemm","","",46,{"inputs":[{"name":"side"},{"name":"symmetry"},{"name":"self"},{"name":"matrix"},{"name":"matrix"},{"name":"self"},{"name":"matrix"}],"output":null}],[8,"Trmm","","",null,null],[10,"trmm","","",47,{"inputs":[{"name":"side"},{"name":"symmetry"},{"name":"transpose"},{"name":"diagonal"},{"name":"self"},{"name":"matrix"},{"name":"matrix"}],"output":null}],[8,"Trsm","","",null,null],[10,"trsm","","",48,{"inputs":[{"name":"side"},{"name":"symmetry"},{"name":"transpose"},{"name":"diagonal"},{"name":"self"},{"name":"matrix"},{"name":"matrix"}],"output":null}],[8,"Herk","","",null,null],[10,"herk","","",49,{"inputs":[{"name":"symmetry"},{"name":"transpose"},{"name":"self"},{"name":"matrix"},{"name":"self"},{"name":"matrix"}],"output":null}],[8,"Her2k","","",null,null],[10,"her2k","","",50,{"inputs":[{"name":"symmetry"},{"name":"transpose"},{"name":"complex"},{"name":"matrix"},{"name":"matrix"},{"name":"self"},{"name":"matrix"}],"output":null}],[8,"Syrk","","",null,null],[10,"syrk","","",51,{"inputs":[{"name":"symmetry"},{"name":"transpose"},{"name":"self"},{"name":"matrix"},{"name":"self"},{"name":"matrix"}],"output":null}],[8,"Syr2k","","",null,null],[10,"syr2k","","",52,{"inputs":[{"name":"symmetry"},{"name":"transpose"},{"name":"self"},{"name":"matrix"},{"name":"matrix"},{"name":"self"},{"name":"matrix"}],"output":null}],[11,"gemm","","",17,{"inputs":[{"name":"complex32"},{"name":"transpose"},{"name":"matrix"},{"name":"transpose"},{"name":"matrix"},{"name":"complex32"},{"name":"matrix"}],"output":null}],[11,"gemm","","",18,{"inputs":[{"name":"complex64"},{"name":"transpose"},{"name":"matrix"},{"name":"transpose"},{"name":"matrix"},{"name":"complex64"},{"name":"matrix"}],"output":null}],[11,"symm","","",17,{"inputs":[{"name":"side"},{"name":"symmetry"},{"name":"complex32"},{"name":"matrix"},{"name":"matrix"},{"name":"complex32"},{"name":"matrix"}],"output":null}],[11,"symm","","",18,{"inputs":[{"name":"side"},{"name":"symmetry"},{"name":"complex64"},{"name":"matrix"},{"name":"matrix"},{"name":"complex64"},{"name":"matrix"}],"output":null}],[11,"hemm","","",17,{"inputs":[{"name":"side"},{"name":"symmetry"},{"name":"complex32"},{"name":"matrix"},{"name":"matrix"},{"name":"complex32"},{"name":"matrix"}],"output":null}],[11,"hemm","","",18,{"inputs":[{"name":"side"},{"name":"symmetry"},{"name":"complex64"},{"name":"matrix"},{"name":"matrix"},{"name":"complex64"},{"name":"matrix"}],"output":null}],[11,"trmm","","",17,{"inputs":[{"name":"side"},{"name":"symmetry"},{"name":"transpose"},{"name":"diagonal"},{"name":"complex32"},{"name":"matrix"},{"name":"matrix"}],"output":null}],[11,"trmm","","",18,{"inputs":[{"name":"side"},{"name":"symmetry"},{"name":"transpose"},{"name":"diagonal"},{"name":"complex64"},{"name":"matrix"},{"name":"matrix"}],"output":null}],[11,"trsm","","",17,{"inputs":[{"name":"side"},{"name":"symmetry"},{"name":"transpose"},{"name":"diagonal"},{"name":"complex32"},{"name":"matrix"},{"name":"matrix"}],"output":null}],[11,"trsm","","",18,{"inputs":[{"name":"side"},{"name":"symmetry"},{"name":"transpose"},{"name":"diagonal"},{"name":"complex64"},{"name":"matrix"},{"name":"matrix"}],"output":null}],[11,"syrk","","",17,{"inputs":[{"name":"symmetry"},{"name":"transpose"},{"name":"complex32"},{"name":"matrix"},{"name":"complex32"},{"name":"matrix"}],"output":null}],[11,"syr2k","","",17,{"inputs":[{"name":"symmetry"},{"name":"transpose"},{"name":"complex32"},{"name":"matrix"},{"name":"matrix"},{"name":"complex32"},{"name":"matrix"}],"output":null}],[11,"syrk","","",18,{"inputs":[{"name":"symmetry"},{"name":"transpose"},{"name":"complex64"},{"name":"matrix"},{"name":"complex64"},{"name":"matrix"}],"output":null}],[11,"syr2k","","",18,{"inputs":[{"name":"symmetry"},{"name":"transpose"},{"name":"complex64"},{"name":"matrix"},{"name":"matrix"},{"name":"complex64"},{"name":"matrix"}],"output":null}],[8,"Matrix","rblas::matrix","Methods that allow a type to be used in BLAS functions as a matrix.",null,null],[11,"lead_dim","","The leading dimension of the matrix. Defaults to `cols` for `RowMajor`\norder and &#39;rows&#39; for `ColMajor` order.",53,{"inputs":[{"name":"matrix"}],"output":{"name":"i32"}}],[11,"order","","The order of the matrix. Defaults to `RowMajor`.",53,{"inputs":[{"name":"matrix"}],"output":{"name":"order"}}],[10,"rows","","Returns the number of rows.",53,{"inputs":[{"name":"matrix"}],"output":{"name":"i32"}}],[10,"cols","","Returns the number of columns.",53,{"inputs":[{"name":"matrix"}],"output":{"name":"i32"}}],[10,"as_ptr","","An unsafe pointer to a contiguous block of memory.",53,null],[10,"as_mut_ptr","","An unsafe pointer to a contiguous block of memory.",53,null],[8,"BandMatrix","","",null,null],[10,"sub_diagonals","","",54,{"inputs":[{"name":"bandmatrix"}],"output":{"name":"i32"}}],[10,"sup_diagonals","","",54,{"inputs":[{"name":"bandmatrix"}],"output":{"name":"i32"}}],[0,"math","rblas","",null,null],[4,"Trans","rblas::math","",null,null],[13,"T","","",55,null],[13,"H","","",55,null],[4,"Marker","","",null,null],[13,"T","","",56,null],[13,"H","","",56,null],[0,"mat","","",null,null],[3,"Mat","rblas::math::mat","",null,null],[11,"eq","","",57,{"inputs":[{"name":"mat"},{"name":"mat"}],"output":{"name":"bool"}}],[11,"ne","","",57,{"inputs":[{"name":"mat"},{"name":"mat"}],"output":{"name":"bool"}}],[11,"fmt","","",57,{"inputs":[{"name":"mat"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",57,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"mat"}}],[11,"rows","","",57,{"inputs":[{"name":"mat"}],"output":{"name":"usize"}}],[11,"cols","","",57,{"inputs":[{"name":"mat"}],"output":{"name":"usize"}}],[11,"set_rows","","",57,{"inputs":[{"name":"mat"},{"name":"usize"}],"output":null}],[11,"set_cols","","",57,{"inputs":[{"name":"mat"},{"name":"usize"}],"output":null}],[11,"push","","",57,{"inputs":[{"name":"mat"},{"name":"t"}],"output":null}],[11,"fill","","",57,{"inputs":[{"name":"t"},{"name":"usize"},{"name":"usize"}],"output":{"name":"mat"}}],[11,"index","","",57,null],[11,"fmt","","",57,{"inputs":[{"name":"mat"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"rows","","",57,{"inputs":[{"name":"mat"}],"output":{"name":"i32"}}],[11,"cols","","",57,{"inputs":[{"name":"mat"}],"output":{"name":"i32"}}],[11,"as_ptr","","",57,null],[11,"as_mut_ptr","","",57,null],[11,"from","","",57,{"inputs":[{"name":"matrix"}],"output":{"name":"mat"}}],[0,"vector","rblas::math","",null,null],[11,"mul","","",55,{"inputs":[{"name":"trans"},{"name":"vector"}],"output":{"name":"t"}}],[11,"mul","rblas::math::vector","",17,{"inputs":[{"name":"complex32"},{"name":"vector"}],"output":{"name":"vec"}}],[11,"mul","","",18,{"inputs":[{"name":"complex64"},{"name":"vector"}],"output":{"name":"vec"}}],[0,"matrix_vector","rblas::math","",null,null],[0,"matrix","","",null,null],[11,"mul","rblas::math::matrix","",17,{"inputs":[{"name":"complex32"},{"name":"matrix"}],"output":{"name":"mat"}}],[11,"mul","","",18,{"inputs":[{"name":"complex64"},{"name":"matrix"}],"output":{"name":"mat"}}],[11,"mul","rblas::math","",55,{"inputs":[{"name":"trans"},{"name":"matrix"}],"output":{"name":"mat"}}],[11,"mul","","",55,{"inputs":[{"name":"trans"},{"name":"trans"}],"output":{"name":"mat"}}],[11,"deref","","",55,{"inputs":[{"name":"trans"}],"output":{"name":"a"}}],[14,"mat!","rblas","",null,null]],"paths":[[4,"Order"],[4,"Transpose"],[4,"Symmetry"],[4,"Diagonal"],[4,"Side"],[8,"Default"],[3,"Complex"],[8,"Copy"],[8,"Axpy"],[8,"Scal"],[8,"Swap"],[8,"Dot"],[8,"Dotc"],[8,"Asum"],[8,"Nrm2"],[8,"Iamax"],[8,"Rot"],[6,"Complex32"],[6,"Complex64"],[8,"Vector"],[8,"VectorOperations"],[3,"Vec"],[8,"Gemv"],[8,"Symv"],[8,"Hemv"],[8,"Ger"],[8,"Gerc"],[8,"Syr"],[8,"Her"],[8,"Syr2"],[8,"Her2"],[8,"Gbmv"],[8,"Sbmv"],[8,"Hbmv"],[8,"Tbmv"],[8,"Tbsv"],[8,"Spmv"],[8,"Hpmv"],[8,"Tpmv"],[8,"Tpsv"],[8,"Hpr"],[8,"Spr"],[8,"Spr2"],[8,"Hpr2"],[8,"Gemm"],[8,"Symm"],[8,"Hemm"],[8,"Trmm"],[8,"Trsm"],[8,"Herk"],[8,"Her2k"],[8,"Syrk"],[8,"Syr2k"],[8,"Matrix"],[8,"BandMatrix"],[4,"Trans"],[4,"Marker"],[3,"Mat"]]};
searchIndex["enum_primitive"] = {"doc":"This crate exports a macro `enum_from_primitive!` that wraps an\n`enum` declaration and automatically adds an implementation of\n`num::FromPrimitive` (reexported here), to allow conversion from\nprimitive integers to the enum.  It therefore provides an\nalternative to the built-in `#[derive(FromPrimitive)]`, which\nrequires the unstable `std::num::FromPrimitive` and is disabled in\nRust 1.0.","items":[[11,"is_some","core::option","Returns `true` if the option is a `Some` value",0,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[11,"is_none","","Returns `true` if the option is a `None` value",0,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[11,"as_ref","","Converts from `Option&lt;T&gt;` to `Option&lt;&amp;T&gt;`",0,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"as_mut","","Converts from `Option&lt;T&gt;` to `Option&lt;&amp;mut T&gt;`",0,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"expect","","Unwraps an option, yielding the content of a `Some`.",0,{"inputs":[{"name":"option"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap","","Moves the value `v` out of the `Option&lt;T&gt;` if it is `Some(v)`.",0,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"unwrap_or","","Returns the contained value or a default.",0,{"inputs":[{"name":"option"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",0,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"t"}}],[11,"map","","Maps an `Option&lt;T&gt;` to `Option&lt;U&gt;` by applying a function to a contained value",0,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"map_or","","Applies a function to the contained value (if any),\nor returns a `default` (if not).",0,{"inputs":[{"name":"option"},{"name":"u"},{"name":"f"}],"output":{"name":"u"}}],[11,"map_or_else","","Applies a function to the contained value (if any),\nor computes a `default` (if not).",0,{"inputs":[{"name":"option"},{"name":"d"},{"name":"f"}],"output":{"name":"u"}}],[11,"ok_or","","Transforms the `Option&lt;T&gt;` into a `Result&lt;T, E&gt;`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err)`.",0,{"inputs":[{"name":"option"},{"name":"e"}],"output":{"name":"result"}}],[11,"ok_or_else","","Transforms the `Option&lt;T&gt;` into a `Result&lt;T, E&gt;`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err())`.",0,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",0,{"inputs":[{"name":"option"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",0,{"inputs":[{"name":"option"}],"output":{"name":"itermut"}}],[11,"and","","Returns `None` if the option is `None`, otherwise returns `optb`.",0,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"and_then","","Returns `None` if the option is `None`, otherwise calls `f` with the\nwrapped value and returns the result.",0,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",0,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and\nreturns the result.",0,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"take","","Takes the value out of the option, leaving a `None` in its place.",0,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"cloned","","Maps an `Option&lt;&amp;T&gt;` to an `Option&lt;T&gt;` by cloning the contents of the\noption.",0,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"unwrap_or_default","","Returns the contained value or a default",0,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"default","core::num","",1,{"inputs":[],"output":{"name":"wrapping"}}],[11,"fmt","","",1,{"inputs":[{"name":"wrapping"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"cmp","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"eq","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"shl","","",1,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",1,null],[11,"shr","","",1,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",1,null],[11,"shl","","",1,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",1,null],[11,"shr","","",1,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",1,null],[11,"shl","","",1,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",1,null],[11,"shr","","",1,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",1,null],[11,"shl","","",1,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",1,null],[11,"shr","","",1,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",1,null],[11,"shl","","",1,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",1,null],[11,"shr","","",1,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",1,null],[11,"shl","","",1,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",1,null],[11,"shr","","",1,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",1,null],[11,"shl","","",1,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",1,null],[11,"shr","","",1,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",1,null],[11,"shl","","",1,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",1,null],[11,"shr","","",1,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",1,null],[11,"shl","","",1,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",1,null],[11,"shr","","",1,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",1,null],[11,"shl","","",1,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",1,null],[11,"shr","","",1,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",1,null],[11,"add","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",1,null],[11,"sub","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",1,null],[11,"mul","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",1,null],[11,"div","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",1,null],[11,"rem","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",1,null],[11,"not","","",1,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",1,null],[11,"bitor","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",1,null],[11,"bitand","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",1,null],[11,"add","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",1,null],[11,"sub","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",1,null],[11,"mul","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",1,null],[11,"div","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",1,null],[11,"rem","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",1,null],[11,"not","","",1,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",1,null],[11,"bitor","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",1,null],[11,"bitand","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",1,null],[11,"add","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",1,null],[11,"sub","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",1,null],[11,"mul","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",1,null],[11,"div","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",1,null],[11,"rem","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",1,null],[11,"not","","",1,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",1,null],[11,"bitor","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",1,null],[11,"bitand","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",1,null],[11,"add","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",1,null],[11,"sub","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",1,null],[11,"mul","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",1,null],[11,"div","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",1,null],[11,"rem","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",1,null],[11,"not","","",1,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",1,null],[11,"bitor","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",1,null],[11,"bitand","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",1,null],[11,"add","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",1,null],[11,"sub","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",1,null],[11,"mul","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",1,null],[11,"div","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",1,null],[11,"rem","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",1,null],[11,"not","","",1,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",1,null],[11,"bitor","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",1,null],[11,"bitand","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",1,null],[11,"add","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",1,null],[11,"sub","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",1,null],[11,"mul","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",1,null],[11,"div","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",1,null],[11,"rem","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",1,null],[11,"not","","",1,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",1,null],[11,"bitor","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",1,null],[11,"bitand","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",1,null],[11,"add","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",1,null],[11,"sub","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",1,null],[11,"mul","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",1,null],[11,"div","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",1,null],[11,"rem","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",1,null],[11,"not","","",1,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",1,null],[11,"bitor","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",1,null],[11,"bitand","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",1,null],[11,"add","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",1,null],[11,"sub","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",1,null],[11,"mul","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",1,null],[11,"div","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",1,null],[11,"rem","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",1,null],[11,"not","","",1,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",1,null],[11,"bitor","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",1,null],[11,"bitand","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",1,null],[11,"add","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",1,null],[11,"sub","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",1,null],[11,"mul","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",1,null],[11,"div","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",1,null],[11,"rem","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",1,null],[11,"not","","",1,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",1,null],[11,"bitor","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",1,null],[11,"bitand","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",1,null],[11,"add","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",1,null],[11,"sub","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",1,null],[11,"mul","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",1,null],[11,"div","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",1,null],[11,"rem","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",1,null],[11,"not","","",1,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",1,null],[11,"bitor","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",1,null],[11,"bitand","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",1,null],[11,"fmt","","",2,{"inputs":[{"name":"fpcategory"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"fpcategory"},{"name":"fpcategory"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"fpcategory"},{"name":"fpcategory"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"fpcategory"}],"output":{"name":"fpcategory"}}],[11,"eq","","",3,{"inputs":[{"name":"parseinterror"},{"name":"parseinterror"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"parseinterror"},{"name":"parseinterror"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"parseinterror"}],"output":{"name":"parseinterror"}}],[11,"fmt","","",3,{"inputs":[{"name":"parseinterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"interrorkind"},{"name":"interrorkind"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"interrorkind"},{"name":"interrorkind"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"interrorkind"}],"output":{"name":"interrorkind"}}],[11,"fmt","","",4,{"inputs":[{"name":"interrorkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"parseinterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","core::nonzero","",5,null],[11,"fmt","","",5,{"inputs":[{"name":"nonzero"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",5,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"option"}}],[11,"lt","","",5,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"le","","",5,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"gt","","",5,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"ge","","",5,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"cmp","","",5,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"ordering"}}],[11,"eq","","",5,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"clone","","",5,{"inputs":[{"name":"nonzero"}],"output":{"name":"nonzero"}}],[11,"new","","Creates an instance of NonZero with the provided value.\nYou must indeed ensure that the value is actually &quot;non-zero&quot;.",5,{"inputs":[{"name":"t"}],"output":{"name":"nonzero"}}],[11,"deref","","",5,{"inputs":[{"name":"nonzero"}],"output":{"name":"t"}}],[11,"new","core::ptr","Creates a new `Unique`.",6,null],[11,"get","","Dereferences the content.",6,{"inputs":[{"name":"unique"}],"output":{"name":"t"}}],[11,"get_mut","","Mutably dereferences the content.",6,{"inputs":[{"name":"unique"}],"output":{"name":"t"}}],[11,"deref","","",6,null],[11,"fmt","","",6,{"inputs":[{"name":"unique"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `Shared`.",7,null],[11,"clone","","",7,{"inputs":[{"name":"shared"}],"output":{"name":"shared"}}],[11,"deref","","",7,null],[11,"fmt","","",7,{"inputs":[{"name":"shared"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","core::marker","",8,null],[11,"eq","","",8,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",8,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"option"}}],[11,"cmp","","",8,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"ordering"}}],[11,"clone","","",8,{"inputs":[{"name":"phantomdata"}],"output":{"name":"phantomdata"}}],[11,"default","","",8,{"inputs":[],"output":{"name":"phantomdata"}}],[11,"eq","core::ops","",9,{"inputs":[{"name":"rangefull"},{"name":"rangefull"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"rangefull"},{"name":"rangefull"}],"output":{"name":"bool"}}],[11,"clone","","",9,{"inputs":[{"name":"rangefull"}],"output":{"name":"rangefull"}}],[11,"fmt","","",9,{"inputs":[{"name":"rangefull"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",10,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"bool"}}],[11,"clone","","",10,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"fmt","","",10,{"inputs":[{"name":"range"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",11,{"inputs":[{"name":"rangefrom"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"rangefrom"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"clone","","",11,{"inputs":[{"name":"rangefrom"}],"output":{"name":"rangefrom"}}],[11,"fmt","","",11,{"inputs":[{"name":"rangefrom"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",12,{"inputs":[{"name":"rangeto"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"rangeto"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"clone","","",12,{"inputs":[{"name":"rangeto"}],"output":{"name":"rangeto"}}],[11,"fmt","","",12,{"inputs":[{"name":"rangeto"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::cmp","",13,{"inputs":[{"name":"ordering"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",13,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"clone","","",13,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"reverse","","Reverse the `Ordering`.",13,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"cmp","","",13,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",13,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"option"}}],[11,"fmt","","",14,{"inputs":[{"name":"any"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",14,{"inputs":[{"name":"any"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is","","Returns true if the boxed type is the same as `T`",14,{"inputs":[{"name":"any"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",14,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",14,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"is","","Forwards to the method defined on the type `Any`.",14,{"inputs":[{"name":"any"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",14,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",14,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"hash","core::any","",15,null],[11,"fmt","","",15,{"inputs":[{"name":"typeid"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",15,{"inputs":[{"name":"typeid"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"typeid"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"clone","","",15,{"inputs":[{"name":"typeid"}],"output":{"name":"typeid"}}],[11,"of","","Returns the `TypeId` of the type this generic function has been\ninstantiated with",15,{"inputs":[],"output":{"name":"typeid"}}],[11,"default","core::sync::atomic","",16,{"inputs":[],"output":{"name":"atomicbool"}}],[11,"default","","",17,{"inputs":[],"output":{"name":"atomicisize"}}],[11,"default","","",18,{"inputs":[],"output":{"name":"atomicusize"}}],[11,"default","","",19,{"inputs":[],"output":{"name":"atomicptr"}}],[11,"clone","","",20,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"new","","Creates a new `AtomicBool`.",16,{"inputs":[{"name":"bool"}],"output":{"name":"atomicbool"}}],[11,"load","","Loads a value from the bool.",16,{"inputs":[{"name":"atomicbool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"store","","Stores a value into the bool.",16,null],[11,"swap","","Stores a value into the bool, returning the old value.",16,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"compare_and_swap","","Stores a value into the `bool` if the current value is the same as the `current` value.",16,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"compare_exchange","","Stores a value into the `bool` if the current value is the same as the `current` value.",16,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"bool"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"compare_exchange_weak","","Stores a value into the `bool` if the current value is the same as the `current` value.",16,null],[11,"fetch_and","","Logical &quot;and&quot; with a boolean value.",16,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_nand","","Logical &quot;nand&quot; with a boolean value.",16,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_or","","Logical &quot;or&quot; with a boolean value.",16,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_xor","","Logical &quot;xor&quot; with a boolean value.",16,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `AtomicIsize`.",17,{"inputs":[{"name":"isize"}],"output":{"name":"atomicisize"}}],[11,"load","","Loads a value from the isize.",17,{"inputs":[{"name":"atomicisize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"store","","Stores a value into the isize.",17,null],[11,"swap","","Stores a value into the isize, returning the old value.",17,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"compare_and_swap","","Stores a value into the `isize` if the current value is the same as the `current` value.",17,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"compare_exchange","","Stores a value into the `isize` if the current value is the same as the `current` value.",17,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"isize"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"compare_exchange_weak","","Stores a value into the `isize if the current value is the same as the `current` value.",17,null],[11,"fetch_add","","Add an isize to the current value, returning the previous value.",17,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_sub","","Subtract an isize from the current value, returning the previous value.",17,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_and","","Bitwise and with the current isize, returning the previous value.",17,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_or","","Bitwise or with the current isize, returning the previous value.",17,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_xor","","Bitwise xor with the current isize, returning the previous value.",17,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"new","","Creates a new `AtomicUsize`.",18,{"inputs":[{"name":"usize"}],"output":{"name":"atomicusize"}}],[11,"load","","Loads a value from the usize.",18,{"inputs":[{"name":"atomicusize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"store","","Stores a value into the usize.",18,null],[11,"swap","","Stores a value into the usize, returning the old value.",18,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"compare_and_swap","","Stores a value into the `usize` if the current value is the same as the `current` value.",18,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"compare_exchange","","Stores a value into the `usize` if the current value is the same as the `current` value.",18,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"usize"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"compare_exchange_weak","","Stores a value into the `usize` if the current value is the same as the `current` value.",18,null],[11,"fetch_add","","Add to the current usize, returning the previous value.",18,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_sub","","Subtract from the current usize, returning the previous value.",18,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_and","","Bitwise and with the current usize, returning the previous value.",18,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_or","","Bitwise or with the current usize, returning the previous value.",18,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_xor","","Bitwise xor with the current usize, returning the previous value.",18,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"new","","Creates a new `AtomicPtr`.",19,null],[11,"load","","Loads a value from the pointer.",19,null],[11,"store","","Stores a value into the pointer.",19,null],[11,"swap","","Stores a value into the pointer, returning the old value.",19,null],[11,"compare_and_swap","","Stores a value into the pointer if the current value is the same as the `current` value.",19,null],[11,"compare_exchange","","Stores a value into the pointer if the current value is the same as the `current` value.",19,null],[11,"compare_exchange_weak","","Stores a value into the pointer if the current value is the same as the `current` value.",19,null],[11,"fmt","","",18,{"inputs":[{"name":"atomicusize"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"atomicisize"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",16,{"inputs":[{"name":"atomicbool"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",19,{"inputs":[{"name":"atomicptr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","core::cell","Creates a new `Cell` containing the given value.",21,{"inputs":[{"name":"t"}],"output":{"name":"cell"}}],[11,"get","","Returns a copy of the contained value.",21,{"inputs":[{"name":"cell"}],"output":{"name":"t"}}],[11,"set","","Sets the contained value.",21,null],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",21,{"inputs":[{"name":"cell"}],"output":{"name":"unsafecell"}}],[11,"clone","","",21,{"inputs":[{"name":"cell"}],"output":{"name":"cell"}}],[11,"default","","",21,{"inputs":[],"output":{"name":"cell"}}],[11,"eq","","",21,{"inputs":[{"name":"cell"},{"name":"cell"}],"output":{"name":"bool"}}],[11,"fmt","","",22,{"inputs":[{"name":"borrowstate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",22,{"inputs":[{"name":"borrowstate"},{"name":"borrowstate"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"borrowstate"},{"name":"borrowstate"}],"output":{"name":"bool"}}],[11,"clone","","",22,{"inputs":[{"name":"borrowstate"}],"output":{"name":"borrowstate"}}],[11,"new","","Creates a new `RefCell` containing `value`.",23,{"inputs":[{"name":"t"}],"output":{"name":"refcell"}}],[11,"into_inner","","Consumes the `RefCell`, returning the wrapped value.",23,{"inputs":[{"name":"refcell"}],"output":{"name":"t"}}],[11,"borrow_state","","Query the current state of this `RefCell`",23,{"inputs":[{"name":"refcell"}],"output":{"name":"borrowstate"}}],[11,"borrow","","Immutably borrows the wrapped value.",23,{"inputs":[{"name":"refcell"}],"output":{"name":"ref"}}],[11,"borrow_mut","","Mutably borrows the wrapped value.",23,{"inputs":[{"name":"refcell"}],"output":{"name":"refmut"}}],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",23,{"inputs":[{"name":"refcell"}],"output":{"name":"unsafecell"}}],[11,"clone","","",23,{"inputs":[{"name":"refcell"}],"output":{"name":"refcell"}}],[11,"default","","",23,{"inputs":[],"output":{"name":"refcell"}}],[11,"eq","","",23,{"inputs":[{"name":"refcell"},{"name":"refcell"}],"output":{"name":"bool"}}],[11,"drop","","",24,null],[11,"clone","","",24,{"inputs":[{"name":"borrowref"}],"output":{"name":"borrowref"}}],[11,"deref","","",25,{"inputs":[{"name":"ref"}],"output":{"name":"t"}}],[11,"clone","","Copies a `Ref`.",25,{"inputs":[{"name":"ref"}],"output":{"name":"ref"}}],[11,"map","","Make a new `Ref` for a component of the borrowed data.",25,{"inputs":[{"name":"ref"},{"name":"f"}],"output":{"name":"ref"}}],[11,"filter_map","","Make a new `Ref` for an optional component of the borrowed data, e.g. an\nenum variant.",25,{"inputs":[{"name":"ref"},{"name":"f"}],"output":{"name":"option"}}],[11,"map","","Make a new `RefMut` for a component of the borrowed data, e.g. an enum\nvariant.",26,{"inputs":[{"name":"refmut"},{"name":"f"}],"output":{"name":"refmut"}}],[11,"filter_map","","Make a new `RefMut` for an optional component of the borrowed data, e.g.\nan enum variant.",26,{"inputs":[{"name":"refmut"},{"name":"f"}],"output":{"name":"option"}}],[11,"drop","","",27,null],[11,"deref","","",26,{"inputs":[{"name":"refmut"}],"output":{"name":"t"}}],[11,"deref_mut","","",26,{"inputs":[{"name":"refmut"}],"output":{"name":"t"}}],[11,"new","","Constructs a new instance of `UnsafeCell` which will wrap the specified\nvalue.",28,{"inputs":[{"name":"t"}],"output":{"name":"unsafecell"}}],[11,"into_inner","","Unwraps the value.",28,{"inputs":[{"name":"unsafecell"}],"output":{"name":"t"}}],[11,"get","","Gets a mutable pointer to the wrapped value.",28,null],[11,"clone","core::char","",29,{"inputs":[{"name":"escapeunicode"}],"output":{"name":"escapeunicode"}}],[11,"clone","","",30,{"inputs":[{"name":"escapeunicodestate"}],"output":{"name":"escapeunicodestate"}}],[11,"next","","",29,{"inputs":[{"name":"escapeunicode"}],"output":{"name":"option"}}],[11,"size_hint","","",29,null],[11,"clone","","",31,{"inputs":[{"name":"escapedefault"}],"output":{"name":"escapedefault"}}],[11,"clone","","",32,{"inputs":[{"name":"escapedefaultstate"}],"output":{"name":"escapedefaultstate"}}],[11,"next","","",31,{"inputs":[{"name":"escapedefault"}],"output":{"name":"option"}}],[11,"size_hint","","",31,null],[11,"count","","",31,{"inputs":[{"name":"escapedefault"}],"output":{"name":"usize"}}],[11,"nth","","",31,{"inputs":[{"name":"escapedefault"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",31,{"inputs":[{"name":"escapedefault"}],"output":{"name":"option"}}],[11,"clone","core::iter","",33,{"inputs":[{"name":"rev"}],"output":{"name":"rev"}}],[11,"next","","",33,{"inputs":[{"name":"rev"}],"output":{"name":"option"}}],[11,"size_hint","","",33,null],[11,"next_back","","",33,{"inputs":[{"name":"rev"}],"output":{"name":"option"}}],[11,"clone","","",34,{"inputs":[{"name":"cloned"}],"output":{"name":"cloned"}}],[11,"next","","",34,{"inputs":[{"name":"cloned"}],"output":{"name":"option"}}],[11,"size_hint","","",34,null],[11,"next_back","","",34,{"inputs":[{"name":"cloned"}],"output":{"name":"option"}}],[11,"clone","","",35,{"inputs":[{"name":"cycle"}],"output":{"name":"cycle"}}],[11,"next","","",35,{"inputs":[{"name":"cycle"}],"output":{"name":"option"}}],[11,"size_hint","","",35,null],[11,"clone","","",36,{"inputs":[{"name":"chain"}],"output":{"name":"chain"}}],[11,"clone","","",37,{"inputs":[{"name":"chainstate"}],"output":{"name":"chainstate"}}],[11,"next","","",36,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"count","","",36,{"inputs":[{"name":"chain"}],"output":{"name":"usize"}}],[11,"nth","","",36,{"inputs":[{"name":"chain"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",36,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"size_hint","","",36,null],[11,"next_back","","",36,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"clone","","",38,{"inputs":[{"name":"zip"}],"output":{"name":"zip"}}],[11,"next","","",38,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"size_hint","","",38,null],[11,"next_back","","",38,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"clone","","",39,{"inputs":[{"name":"map"}],"output":{"name":"map"}}],[11,"next","","",39,{"inputs":[{"name":"map"}],"output":{"name":"option"}}],[11,"size_hint","","",39,null],[11,"next_back","","",39,{"inputs":[{"name":"map"}],"output":{"name":"option"}}],[11,"clone","","",40,{"inputs":[{"name":"filter"}],"output":{"name":"filter"}}],[11,"next","","",40,{"inputs":[{"name":"filter"}],"output":{"name":"option"}}],[11,"size_hint","","",40,null],[11,"next_back","","",40,{"inputs":[{"name":"filter"}],"output":{"name":"option"}}],[11,"clone","","",41,{"inputs":[{"name":"filtermap"}],"output":{"name":"filtermap"}}],[11,"next","","",41,{"inputs":[{"name":"filtermap"}],"output":{"name":"option"}}],[11,"size_hint","","",41,null],[11,"next_back","","",41,{"inputs":[{"name":"filtermap"}],"output":{"name":"option"}}],[11,"clone","","",42,{"inputs":[{"name":"enumerate"}],"output":{"name":"enumerate"}}],[11,"next","","# Overflow Behavior",42,{"inputs":[{"name":"enumerate"}],"output":{"name":"option"}}],[11,"size_hint","","",42,null],[11,"nth","","",42,{"inputs":[{"name":"enumerate"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",42,{"inputs":[{"name":"enumerate"}],"output":{"name":"usize"}}],[11,"next_back","","",42,{"inputs":[{"name":"enumerate"}],"output":{"name":"option"}}],[11,"clone","","",43,{"inputs":[{"name":"peekable"}],"output":{"name":"peekable"}}],[11,"next","","",43,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"count","","",43,{"inputs":[{"name":"peekable"}],"output":{"name":"usize"}}],[11,"nth","","",43,{"inputs":[{"name":"peekable"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",43,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"size_hint","","",43,null],[11,"peek","","Returns a reference to the next() value without advancing the iterator.",43,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"is_empty","","Checks if the iterator has finished iterating.",43,{"inputs":[{"name":"peekable"}],"output":{"name":"bool"}}],[11,"clone","","",44,{"inputs":[{"name":"skipwhile"}],"output":{"name":"skipwhile"}}],[11,"next","","",44,{"inputs":[{"name":"skipwhile"}],"output":{"name":"option"}}],[11,"size_hint","","",44,null],[11,"clone","","",45,{"inputs":[{"name":"takewhile"}],"output":{"name":"takewhile"}}],[11,"next","","",45,{"inputs":[{"name":"takewhile"}],"output":{"name":"option"}}],[11,"size_hint","","",45,null],[11,"clone","","",46,{"inputs":[{"name":"skip"}],"output":{"name":"skip"}}],[11,"next","","",46,{"inputs":[{"name":"skip"}],"output":{"name":"option"}}],[11,"nth","","",46,{"inputs":[{"name":"skip"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",46,{"inputs":[{"name":"skip"}],"output":{"name":"usize"}}],[11,"last","","",46,{"inputs":[{"name":"skip"}],"output":{"name":"option"}}],[11,"size_hint","","",46,null],[11,"clone","","",47,{"inputs":[{"name":"take"}],"output":{"name":"take"}}],[11,"next","","",47,{"inputs":[{"name":"take"}],"output":{"name":"option"}}],[11,"nth","","",47,{"inputs":[{"name":"take"},{"name":"usize"}],"output":{"name":"option"}}],[11,"size_hint","","",47,null],[11,"clone","","",48,{"inputs":[{"name":"scan"}],"output":{"name":"scan"}}],[11,"next","","",48,{"inputs":[{"name":"scan"}],"output":{"name":"option"}}],[11,"size_hint","","",48,null],[11,"clone","","",49,{"inputs":[{"name":"flatmap"}],"output":{"name":"flatmap"}}],[11,"next","","",49,{"inputs":[{"name":"flatmap"}],"output":{"name":"option"}}],[11,"size_hint","","",49,null],[11,"next_back","","",49,{"inputs":[{"name":"flatmap"}],"output":{"name":"option"}}],[11,"clone","","",50,{"inputs":[{"name":"fuse"}],"output":{"name":"fuse"}}],[11,"next","","",50,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"nth","","",50,{"inputs":[{"name":"fuse"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",50,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"count","","",50,{"inputs":[{"name":"fuse"}],"output":{"name":"usize"}}],[11,"size_hint","","",50,null],[11,"next_back","","",50,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"clone","","",51,{"inputs":[{"name":"inspect"}],"output":{"name":"inspect"}}],[11,"next","","",51,{"inputs":[{"name":"inspect"}],"output":{"name":"option"}}],[11,"size_hint","","",51,null],[11,"next_back","","",51,{"inputs":[{"name":"inspect"}],"output":{"name":"option"}}],[11,"clone","","",52,{"inputs":[{"name":"stepby"}],"output":{"name":"stepby"}}],[11,"step_by","core::ops","Creates an iterator starting at the same point, but stepping by\nthe given amount at each iteration.",11,{"inputs":[{"name":"rangefrom"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",10,{"inputs":[{"name":"range"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"next","core::iter","",52,{"inputs":[{"name":"stepby"}],"output":{"name":"option"}}],[11,"size_hint","","",52,null],[11,"clone","","",53,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"rangeinclusive"}}],[11,"next","","",53,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"size_hint","","",53,null],[11,"next_back","","",53,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"next","","",52,{"inputs":[{"name":"stepby"}],"output":{"name":"option"}}],[11,"size_hint","","",52,null],[11,"next","core::ops","",10,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"size_hint","","",10,null],[11,"next_back","","",10,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"next","","",11,{"inputs":[{"name":"rangefrom"}],"output":{"name":"option"}}],[11,"clone","core::iter","",54,{"inputs":[{"name":"repeat"}],"output":{"name":"repeat"}}],[11,"next","","",54,{"inputs":[{"name":"repeat"}],"output":{"name":"option"}}],[11,"size_hint","","",54,null],[11,"next_back","","",54,{"inputs":[{"name":"repeat"}],"output":{"name":"option"}}],[11,"next","","",55,{"inputs":[{"name":"empty"}],"output":{"name":"option"}}],[11,"size_hint","","",55,null],[11,"next_back","","",55,{"inputs":[{"name":"empty"}],"output":{"name":"option"}}],[11,"len","","",55,{"inputs":[{"name":"empty"}],"output":{"name":"usize"}}],[11,"clone","","",55,{"inputs":[{"name":"empty"}],"output":{"name":"empty"}}],[11,"default","","",55,{"inputs":[],"output":{"name":"empty"}}],[11,"clone","","",56,{"inputs":[{"name":"once"}],"output":{"name":"once"}}],[11,"next","","",56,{"inputs":[{"name":"once"}],"output":{"name":"option"}}],[11,"size_hint","","",56,null],[11,"next_back","","",56,{"inputs":[{"name":"once"}],"output":{"name":"option"}}],[11,"len","","",56,{"inputs":[{"name":"once"}],"output":{"name":"usize"}}],[11,"hash","core::option","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"option"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",0,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"option"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",0,{"inputs":[{"name":"option"}],"output":{"name":"intoiter"}}],[11,"clone","","",57,{"inputs":[{"name":"item"}],"output":{"name":"item"}}],[11,"next","","",57,{"inputs":[{"name":"item"}],"output":{"name":"option"}}],[11,"size_hint","","",57,null],[11,"next_back","","",57,{"inputs":[{"name":"item"}],"output":{"name":"option"}}],[11,"next","","",58,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",58,null],[11,"next_back","","",58,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",58,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",59,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",59,null],[11,"next_back","","",59,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"clone","","",60,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[11,"next","","",60,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",60,null],[11,"next_back","","",60,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","Takes each element in the `Iterator`: if it is `None`, no further\nelements are taken, and the `None` is returned. Should no `None` occur, a\ncontainer with the values of each `Option` is returned.",0,{"inputs":[{"name":"i"}],"output":{"name":"option"}}],[11,"clone","core::raw","",61,{"inputs":[{"name":"slice"}],"output":{"name":"slice"}}],[11,"clone","","",62,{"inputs":[{"name":"traitobject"}],"output":{"name":"traitobject"}}],[11,"hash","core::result","",63,null],[11,"fmt","","",63,{"inputs":[{"name":"result"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",63,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",63,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"option"}}],[11,"lt","","",63,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"le","","",63,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"gt","","",63,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ge","","",63,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"eq","","",63,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ne","","",63,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"clone","","",63,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"is_ok","","Returns true if the result is `Ok`",63,{"inputs":[{"name":"result"}],"output":{"name":"bool"}}],[11,"is_err","","Returns true if the result is `Err`",63,{"inputs":[{"name":"result"}],"output":{"name":"bool"}}],[11,"ok","","Converts from `Result&lt;T, E&gt;` to `Option&lt;T&gt;`",63,{"inputs":[{"name":"result"}],"output":{"name":"option"}}],[11,"err","","Converts from `Result&lt;T, E&gt;` to `Option&lt;E&gt;`",63,{"inputs":[{"name":"result"}],"output":{"name":"option"}}],[11,"as_ref","","Converts from `Result&lt;T, E&gt;` to `Result&lt;&amp;T, &amp;E&gt;`",63,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"as_mut","","Converts from `Result&lt;T, E&gt;` to `Result&lt;&amp;mut T, &amp;mut E&gt;`",63,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"map","","Maps a `Result&lt;T, E&gt;` to `Result&lt;U, E&gt;` by applying a function to a\ncontained `Ok` value, leaving an `Err` value untouched.",63,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"result"}}],[11,"map_err","","Maps a `Result&lt;T, E&gt;` to `Result&lt;T, F&gt;` by applying a function to a\ncontained `Err` value, leaving an `Ok` value untouched.",63,{"inputs":[{"name":"result"},{"name":"o"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",63,{"inputs":[{"name":"result"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",63,{"inputs":[{"name":"result"}],"output":{"name":"itermut"}}],[11,"and","","Returns `res` if the result is `Ok`, otherwise returns the `Err` value of `self`.",63,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"result"}}],[11,"and_then","","Calls `op` if the result is `Ok`, otherwise returns the `Err` value of `self`.",63,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"result"}}],[11,"or","","Returns `res` if the result is `Err`, otherwise returns the `Ok` value of `self`.",63,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"result"}}],[11,"or_else","","Calls `op` if the result is `Err`, otherwise returns the `Ok` value of `self`.",63,{"inputs":[{"name":"result"},{"name":"o"}],"output":{"name":"result"}}],[11,"unwrap_or","","Unwraps a result, yielding the content of an `Ok`.\nElse it returns `optb`.",63,{"inputs":[{"name":"result"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Unwraps a result, yielding the content of an `Ok`.\nIf the value is an `Err` then it calls `op` with its value.",63,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"t"}}],[11,"unwrap","","Unwraps a result, yielding the content of an `Ok`.",63,{"inputs":[{"name":"result"}],"output":{"name":"t"}}],[11,"expect","","Unwraps a result, yielding the content of an `Ok`.",63,{"inputs":[{"name":"result"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap_err","","Unwraps a result, yielding the content of an `Err`.",63,{"inputs":[{"name":"result"}],"output":{"name":"e"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",63,{"inputs":[{"name":"result"}],"output":{"name":"intoiter"}}],[11,"next","","",64,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",64,null],[11,"next_back","","",64,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",64,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",65,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",65,null],[11,"next_back","","",65,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next","","",66,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",66,null],[11,"next_back","","",66,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","Takes each element in the `Iterator`: if it is an `Err`, no further\nelements are taken, and the `Err` is returned. Should no `Err` occur, a\ncontainer with the values of each `Result` is returned.",63,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"as_slice","core::slice","View the underlying data as a subslice of the original data.",67,null],[11,"next","","",67,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",67,null],[11,"count","","",67,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[11,"nth","","",67,{"inputs":[{"name":"iter"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",67,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next_back","","",67,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",67,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"into_slice","","View the underlying data as a subslice of the original data.",68,null],[11,"next","","",68,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",68,null],[11,"count","","",68,{"inputs":[{"name":"itermut"}],"output":{"name":"usize"}}],[11,"nth","","",68,{"inputs":[{"name":"itermut"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",68,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next_back","","",68,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"clone","","",69,{"inputs":[{"name":"split"}],"output":{"name":"split"}}],[11,"next","","",69,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"size_hint","","",69,null],[11,"next_back","","",69,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"finish","","",69,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"finish","","",70,{"inputs":[{"name":"splitmut"}],"output":{"name":"option"}}],[11,"next","","",70,{"inputs":[{"name":"splitmut"}],"output":{"name":"option"}}],[11,"size_hint","","",70,null],[11,"next_back","","",70,{"inputs":[{"name":"splitmut"}],"output":{"name":"option"}}],[11,"next","","",71,{"inputs":[{"name":"genericsplitn"}],"output":{"name":"option"}}],[11,"size_hint","","",71,null],[11,"next","","",72,{"inputs":[{"name":"splitn"}],"output":{"name":"option"}}],[11,"size_hint","","",72,null],[11,"next","","",73,{"inputs":[{"name":"rsplitn"}],"output":{"name":"option"}}],[11,"size_hint","","",73,null],[11,"next","","",74,{"inputs":[{"name":"splitnmut"}],"output":{"name":"option"}}],[11,"size_hint","","",74,null],[11,"next","","",75,{"inputs":[{"name":"rsplitnmut"}],"output":{"name":"option"}}],[11,"size_hint","","",75,null],[11,"clone","","",76,{"inputs":[{"name":"windows"}],"output":{"name":"windows"}}],[11,"next","","",76,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"size_hint","","",76,null],[11,"count","","",76,{"inputs":[{"name":"windows"}],"output":{"name":"usize"}}],[11,"nth","","",76,{"inputs":[{"name":"windows"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",76,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"next_back","","",76,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"clone","","",77,{"inputs":[{"name":"chunks"}],"output":{"name":"chunks"}}],[11,"next","","",77,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"size_hint","","",77,null],[11,"count","","",77,{"inputs":[{"name":"chunks"}],"output":{"name":"usize"}}],[11,"nth","","",77,{"inputs":[{"name":"chunks"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",77,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"next_back","","",77,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"next","","",78,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"size_hint","","",78,null],[11,"count","","",78,{"inputs":[{"name":"chunksmut"}],"output":{"name":"usize"}}],[11,"nth","","",78,{"inputs":[{"name":"chunksmut"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",78,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"next_back","","",78,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"fmt","core::str::pattern","",79,{"inputs":[{"name":"searchstep"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",79,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"ne","","",79,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"clone","","",79,{"inputs":[{"name":"searchstep"}],"output":{"name":"searchstep"}}],[11,"clone","","",80,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"chareqsearcher"}}],[11,"into_searcher","","",81,{"inputs":[{"name":"chareqpattern"},{"name":"str"}],"output":{"name":"chareqsearcher"}}],[11,"haystack","","",80,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"str"}}],[11,"next","","",80,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"searchstep"}}],[11,"next_back","","",80,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"searchstep"}}],[11,"clone","","",82,{"inputs":[{"name":"charsearcher"}],"output":{"name":"charsearcher"}}],[11,"haystack","","",82,{"inputs":[{"name":"charsearcher"}],"output":{"name":"str"}}],[11,"next","","",82,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",82,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",82,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_back","","",82,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",82,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",82,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"clone","","",83,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"charslicesearcher"}}],[11,"haystack","","",83,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"str"}}],[11,"next","","",83,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",83,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",83,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_back","","",83,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",83,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",83,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"clone","","",84,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"charpredicatesearcher"}}],[11,"haystack","","",84,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"str"}}],[11,"next","","",84,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",84,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",84,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_back","","",84,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",84,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",84,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"fmt","","",85,{"inputs":[{"name":"strsearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",85,{"inputs":[{"name":"strsearcher"}],"output":{"name":"strsearcher"}}],[11,"fmt","","",86,{"inputs":[{"name":"strsearcherimpl"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",86,{"inputs":[{"name":"strsearcherimpl"}],"output":{"name":"strsearcherimpl"}}],[11,"fmt","","",87,{"inputs":[{"name":"emptyneedle"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",87,{"inputs":[{"name":"emptyneedle"}],"output":{"name":"emptyneedle"}}],[11,"haystack","","",85,{"inputs":[{"name":"strsearcher"}],"output":{"name":"str"}}],[11,"next","","",85,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",85,{"inputs":[{"name":"strsearcher"}],"output":{"name":"option"}}],[11,"next_back","","",85,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",85,{"inputs":[{"name":"strsearcher"}],"output":{"name":"option"}}],[11,"fmt","","",88,{"inputs":[{"name":"twowaysearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",88,{"inputs":[{"name":"twowaysearcher"}],"output":{"name":"twowaysearcher"}}],[11,"use_early_reject","","",89,{"inputs":[],"output":{"name":"bool"}}],[11,"rejecting","","",89,null],[11,"matching","","",89,null],[11,"use_early_reject","","",90,{"inputs":[],"output":{"name":"bool"}}],[11,"rejecting","","",90,null],[11,"matching","","",90,null],[11,"eq","core::str","",91,{"inputs":[{"name":"parseboolerror"},{"name":"parseboolerror"}],"output":{"name":"bool"}}],[11,"ne","","",91,{"inputs":[{"name":"parseboolerror"},{"name":"parseboolerror"}],"output":{"name":"bool"}}],[11,"clone","","",91,{"inputs":[{"name":"parseboolerror"}],"output":{"name":"parseboolerror"}}],[11,"fmt","","",91,{"inputs":[{"name":"parseboolerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",91,{"inputs":[{"name":"parseboolerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",92,{"inputs":[{"name":"utf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",92,{"inputs":[{"name":"utf8error"}],"output":{"name":"utf8error"}}],[11,"eq","","",92,{"inputs":[{"name":"utf8error"},{"name":"utf8error"}],"output":{"name":"bool"}}],[11,"ne","","",92,{"inputs":[{"name":"utf8error"},{"name":"utf8error"}],"output":{"name":"bool"}}],[11,"valid_up_to","","Returns the index in the given string up to which valid UTF-8 was\nverified.",92,{"inputs":[{"name":"utf8error"}],"output":{"name":"usize"}}],[11,"fmt","","",92,{"inputs":[{"name":"utf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",93,{"inputs":[{"name":"chars"}],"output":{"name":"chars"}}],[11,"next","","",93,{"inputs":[{"name":"chars"}],"output":{"name":"option"}}],[11,"size_hint","","",93,null],[11,"next_back","","",93,{"inputs":[{"name":"chars"}],"output":{"name":"option"}}],[11,"as_str","","View the underlying data as a subslice of the original data.",93,{"inputs":[{"name":"chars"}],"output":{"name":"str"}}],[11,"clone","","",94,{"inputs":[{"name":"charindices"}],"output":{"name":"charindices"}}],[11,"next","","",94,{"inputs":[{"name":"charindices"}],"output":{"name":"option"}}],[11,"size_hint","","",94,null],[11,"next_back","","",94,{"inputs":[{"name":"charindices"}],"output":{"name":"option"}}],[11,"as_str","","View the underlying data as a subslice of the original data.",94,{"inputs":[{"name":"charindices"}],"output":{"name":"str"}}],[11,"clone","","",95,{"inputs":[{"name":"bytes"}],"output":{"name":"bytes"}}],[11,"next","","",95,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"size_hint","","",95,null],[11,"count","","",95,{"inputs":[{"name":"bytes"}],"output":{"name":"usize"}}],[11,"last","","",95,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"nth","","",95,{"inputs":[{"name":"bytes"},{"name":"usize"}],"output":{"name":"option"}}],[11,"next_back","","",95,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"len","","",95,{"inputs":[{"name":"bytes"}],"output":{"name":"usize"}}],[11,"clone","","",96,{"inputs":[{"name":"splitinternal"}],"output":{"name":"splitinternal"}}],[11,"next","","",97,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"clone","","",97,{"inputs":[{"name":"split"}],"output":{"name":"split"}}],[11,"next","","",98,{"inputs":[{"name":"rsplit"}],"output":{"name":"option"}}],[11,"clone","","",98,{"inputs":[{"name":"rsplit"}],"output":{"name":"rsplit"}}],[11,"next_back","","",97,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"next_back","","",98,{"inputs":[{"name":"rsplit"}],"output":{"name":"option"}}],[11,"next","","",99,{"inputs":[{"name":"splitterminator"}],"output":{"name":"option"}}],[11,"clone","","",99,{"inputs":[{"name":"splitterminator"}],"output":{"name":"splitterminator"}}],[11,"next","","",100,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"option"}}],[11,"clone","","",100,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"rsplitterminator"}}],[11,"next_back","","",99,{"inputs":[{"name":"splitterminator"}],"output":{"name":"option"}}],[11,"next_back","","",100,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"option"}}],[11,"clone","","",101,{"inputs":[{"name":"splitninternal"}],"output":{"name":"splitninternal"}}],[11,"next","","",102,{"inputs":[{"name":"splitn"}],"output":{"name":"option"}}],[11,"clone","","",102,{"inputs":[{"name":"splitn"}],"output":{"name":"splitn"}}],[11,"next","","",103,{"inputs":[{"name":"rsplitn"}],"output":{"name":"option"}}],[11,"clone","","",103,{"inputs":[{"name":"rsplitn"}],"output":{"name":"rsplitn"}}],[11,"clone","","",104,{"inputs":[{"name":"matchindicesinternal"}],"output":{"name":"matchindicesinternal"}}],[11,"next","","",105,{"inputs":[{"name":"matchindices"}],"output":{"name":"option"}}],[11,"clone","","",105,{"inputs":[{"name":"matchindices"}],"output":{"name":"matchindices"}}],[11,"next","","",106,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"option"}}],[11,"clone","","",106,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"rmatchindices"}}],[11,"next_back","","",105,{"inputs":[{"name":"matchindices"}],"output":{"name":"option"}}],[11,"next_back","","",106,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"option"}}],[11,"clone","","",107,{"inputs":[{"name":"matchesinternal"}],"output":{"name":"matchesinternal"}}],[11,"next","","",108,{"inputs":[{"name":"matches"}],"output":{"name":"option"}}],[11,"clone","","",108,{"inputs":[{"name":"matches"}],"output":{"name":"matches"}}],[11,"next","","",109,{"inputs":[{"name":"rmatches"}],"output":{"name":"option"}}],[11,"clone","","",109,{"inputs":[{"name":"rmatches"}],"output":{"name":"rmatches"}}],[11,"next_back","","",108,{"inputs":[{"name":"matches"}],"output":{"name":"option"}}],[11,"next_back","","",109,{"inputs":[{"name":"rmatches"}],"output":{"name":"option"}}],[11,"clone","","",110,{"inputs":[{"name":"lines"}],"output":{"name":"lines"}}],[11,"next","","",110,{"inputs":[{"name":"lines"}],"output":{"name":"option"}}],[11,"size_hint","","",110,null],[11,"next_back","","",110,{"inputs":[{"name":"lines"}],"output":{"name":"option"}}],[11,"clone","","",111,{"inputs":[{"name":"linesany"}],"output":{"name":"linesany"}}],[11,"clone","","",112,{"inputs":[{"name":"linesanymap"}],"output":{"name":"linesanymap"}}],[11,"call","","",112,null],[11,"call_mut","","",112,null],[11,"call_once","","",112,null],[11,"next","","",111,{"inputs":[{"name":"linesany"}],"output":{"name":"option"}}],[11,"size_hint","","",111,null],[11,"next_back","","",111,{"inputs":[{"name":"linesany"}],"output":{"name":"option"}}],[11,"clone","","",113,{"inputs":[{"name":"charrange"}],"output":{"name":"charrange"}}],[11,"new","core::hash::sip","Creates a new `SipHasher` with the two initial keys set to 0.",114,{"inputs":[],"output":{"name":"siphasher"}}],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",114,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher"}}],[11,"write","","",114,null],[11,"finish","","",114,{"inputs":[{"name":"siphasher"}],"output":{"name":"u64"}}],[11,"clone","","",114,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"default","","",114,{"inputs":[],"output":{"name":"siphasher"}}],[11,"build_hasher","core::hash","",115,{"inputs":[{"name":"buildhasherdefault"}],"output":{"name":"h"}}],[11,"clone","","",115,{"inputs":[{"name":"buildhasherdefault"}],"output":{"name":"buildhasherdefault"}}],[11,"default","","",115,{"inputs":[],"output":{"name":"buildhasherdefault"}}],[11,"eq","core::fmt::num","",116,{"inputs":[{"name":"binary"},{"name":"binary"}],"output":{"name":"bool"}}],[11,"ne","","",116,{"inputs":[{"name":"binary"},{"name":"binary"}],"output":{"name":"bool"}}],[11,"clone","","",116,{"inputs":[{"name":"binary"}],"output":{"name":"binary"}}],[11,"eq","","",117,{"inputs":[{"name":"octal"},{"name":"octal"}],"output":{"name":"bool"}}],[11,"ne","","",117,{"inputs":[{"name":"octal"},{"name":"octal"}],"output":{"name":"bool"}}],[11,"clone","","",117,{"inputs":[{"name":"octal"}],"output":{"name":"octal"}}],[11,"eq","","",118,{"inputs":[{"name":"decimal"},{"name":"decimal"}],"output":{"name":"bool"}}],[11,"ne","","",118,{"inputs":[{"name":"decimal"},{"name":"decimal"}],"output":{"name":"bool"}}],[11,"clone","","",118,{"inputs":[{"name":"decimal"}],"output":{"name":"decimal"}}],[11,"eq","","",119,{"inputs":[{"name":"lowerhex"},{"name":"lowerhex"}],"output":{"name":"bool"}}],[11,"ne","","",119,{"inputs":[{"name":"lowerhex"},{"name":"lowerhex"}],"output":{"name":"bool"}}],[11,"clone","","",119,{"inputs":[{"name":"lowerhex"}],"output":{"name":"lowerhex"}}],[11,"eq","","",120,{"inputs":[{"name":"upperhex"},{"name":"upperhex"}],"output":{"name":"bool"}}],[11,"ne","","",120,{"inputs":[{"name":"upperhex"},{"name":"upperhex"}],"output":{"name":"bool"}}],[11,"clone","","",120,{"inputs":[{"name":"upperhex"}],"output":{"name":"upperhex"}}],[11,"eq","","",121,{"inputs":[{"name":"radix"},{"name":"radix"}],"output":{"name":"bool"}}],[11,"ne","","",121,{"inputs":[{"name":"radix"},{"name":"radix"}],"output":{"name":"bool"}}],[11,"clone","","",121,{"inputs":[{"name":"radix"}],"output":{"name":"radix"}}],[11,"clone","","",122,{"inputs":[{"name":"radixfmt"}],"output":{"name":"radixfmt"}}],[11,"fmt","","",122,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",122,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",122,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",122,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",122,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",122,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",122,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",122,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",122,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",122,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",122,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",122,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",122,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",122,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",122,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",122,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",122,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",122,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",122,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",122,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"write_str","core::fmt::builders","",123,{"inputs":[{"name":"padadapter"},{"name":"str"}],"output":{"name":"result"}}],[11,"field","","Adds a new field to the generated struct output.",124,{"inputs":[{"name":"debugstruct"},{"name":"str"},{"name":"debug"}],"output":{"name":"debugstruct"}}],[11,"finish","","Finishes output and returns any error encountered.",124,{"inputs":[{"name":"debugstruct"}],"output":{"name":"result"}}],[11,"field","","Adds a new field to the generated tuple struct output.",125,{"inputs":[{"name":"debugtuple"},{"name":"debug"}],"output":{"name":"debugtuple"}}],[11,"finish","","Finishes output and returns any error encountered.",125,{"inputs":[{"name":"debugtuple"}],"output":{"name":"result"}}],[11,"formatter","","Returns the wrapped `Formatter`.",125,{"inputs":[{"name":"debugtuple"}],"output":{"name":"formatter"}}],[11,"finish","","",126,null],[11,"entry","","Adds a new entry to the set output.",127,{"inputs":[{"name":"debugset"},{"name":"debug"}],"output":{"name":"debugset"}}],[11,"entries","","Adds the contents of an iterator of entries to the set output.",127,{"inputs":[{"name":"debugset"},{"name":"i"}],"output":{"name":"debugset"}}],[11,"finish","","Finishes output and returns any error encountered.",127,{"inputs":[{"name":"debugset"}],"output":{"name":"result"}}],[11,"entry","","Adds a new entry to the list output.",128,{"inputs":[{"name":"debuglist"},{"name":"debug"}],"output":{"name":"debuglist"}}],[11,"entries","","Adds the contents of an iterator of entries to the list output.",128,{"inputs":[{"name":"debuglist"},{"name":"i"}],"output":{"name":"debuglist"}}],[11,"finish","","Finishes output and returns any error encountered.",128,{"inputs":[{"name":"debuglist"}],"output":{"name":"result"}}],[11,"entry","","Adds a new entry to the map output.",129,{"inputs":[{"name":"debugmap"},{"name":"debug"},{"name":"debug"}],"output":{"name":"debugmap"}}],[11,"entries","","Adds the contents of an iterator of entries to the map output.",129,{"inputs":[{"name":"debugmap"},{"name":"i"}],"output":{"name":"debugmap"}}],[11,"finish","","Finishes output and returns any error encountered.",129,{"inputs":[{"name":"debugmap"}],"output":{"name":"result"}}],[11,"fmt","core::fmt","",130,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",130,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"clone","","",131,{"inputs":[{"name":"argumentv1"}],"output":{"name":"argumentv1"}}],[11,"clone","","",132,{"inputs":[{"name":"flagv1"}],"output":{"name":"flagv1"}}],[11,"clone","","",133,{"inputs":[{"name":"arguments"}],"output":{"name":"arguments"}}],[11,"fmt","","",133,{"inputs":[{"name":"arguments"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",133,{"inputs":[{"name":"arguments"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"pad_integral","","Performs the correct padding for an integer which has already been\nemitted into a str. The str should *not* contain the sign for the\ninteger, that will be added by this method.",134,{"inputs":[{"name":"formatter"},{"name":"bool"},{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[11,"pad","","This function takes a string slice and emits it to the internal buffer\nafter applying the relevant formatting flags specified. The flags\nrecognized for generic strings are:",134,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_str","","Writes some data to the underlying buffer contained within this\nformatter.",134,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_fmt","","Writes some formatted information into this instance",134,{"inputs":[{"name":"formatter"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"flags","","Flags for formatting (packed version of rt::Flag)",134,{"inputs":[{"name":"formatter"}],"output":{"name":"u32"}}],[11,"fill","","Character used as &#39;fill&#39; whenever there is alignment",134,{"inputs":[{"name":"formatter"}],"output":{"name":"char"}}],[11,"align","","Flag indicating what form of alignment was requested",134,{"inputs":[{"name":"formatter"}],"output":{"name":"alignment"}}],[11,"width","","Optionally specified integer width that the output should be",134,{"inputs":[{"name":"formatter"}],"output":{"name":"option"}}],[11,"precision","","Optionally specified precision for numeric types",134,{"inputs":[{"name":"formatter"}],"output":{"name":"option"}}],[11,"sign_plus","","Determines if the `+` flag was specified.",134,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"sign_minus","","Determines if the `-` flag was specified.",134,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"alternate","","Determines if the `#` flag was specified.",134,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"sign_aware_zero_pad","","Determines if the `0` flag was specified.",134,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"debug_struct","","Creates a `DebugStruct` builder designed to assist with creation of\n`fmt::Debug` implementations for structs.",134,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"debugstruct"}}],[11,"debug_tuple","","Creates a `DebugTuple` builder designed to assist with creation of\n`fmt::Debug` implementations for tuple structs.",134,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"debugtuple"}}],[11,"debug_list","","Creates a `DebugList` builder designed to assist with creation of\n`fmt::Debug` implementations for list-like structures.",134,{"inputs":[{"name":"formatter"}],"output":{"name":"debuglist"}}],[11,"debug_set","","Creates a `DebugSet` builder designed to assist with creation of\n`fmt::Debug` implementations for set-like structures.",134,{"inputs":[{"name":"formatter"}],"output":{"name":"debugset"}}],[11,"debug_map","","Creates a `DebugMap` builder designed to assist with creation of\n`fmt::Debug` implementations for map-like structures.",134,{"inputs":[{"name":"formatter"}],"output":{"name":"debugmap"}}],[11,"write_str","","",134,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char","","",134,{"inputs":[{"name":"formatter"},{"name":"char"}],"output":{"name":"result"}}],[11,"write_fmt","","",134,{"inputs":[{"name":"formatter"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"fmt","","",130,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::marker","",8,{"inputs":[{"name":"phantomdata"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::cell","",21,{"inputs":[{"name":"cell"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",23,{"inputs":[{"name":"refcell"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",25,{"inputs":[{"name":"ref"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",26,{"inputs":[{"name":"refmut"},{"name":"formatter"}],"output":{"name":"result"}}],[4,"Option","enum_primitive","The `Option` type. See [the module level documentation](index.html) for more.",null,null],[13,"None","","No value",0,null],[13,"Some","","Some value `T`",0,null],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the\nvalue cannot be represented by this value, the `None` is returned.",135,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",135,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",135,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",135,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",135,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",135,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",135,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",135,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",135,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",135,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",135,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",135,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[14,"enum_from_primitive_impl_ty!","","Helper macro for internal use by `enum_from_primitive!`.",null,null],[14,"enum_from_primitive_impl!","","Helper macro for internal use by `enum_from_primitive!`.",null,null],[14,"enum_from_primitive!","","Wrap this macro around an `enum` declaration to get an\nautomatically generated implementation of `num::FromPrimitive`.",null,null]],"paths":[[4,"Option"],[3,"Wrapping"],[4,"FpCategory"],[3,"ParseIntError"],[4,"IntErrorKind"],[3,"NonZero"],[3,"Unique"],[3,"Shared"],[3,"PhantomData"],[3,"RangeFull"],[3,"Range"],[3,"RangeFrom"],[3,"RangeTo"],[4,"Ordering"],[8,"Any"],[3,"TypeId"],[3,"AtomicBool"],[3,"AtomicIsize"],[3,"AtomicUsize"],[3,"AtomicPtr"],[4,"Ordering"],[3,"Cell"],[4,"BorrowState"],[3,"RefCell"],[3,"BorrowRef"],[3,"Ref"],[3,"RefMut"],[3,"BorrowRefMut"],[3,"UnsafeCell"],[3,"EscapeUnicode"],[4,"EscapeUnicodeState"],[3,"EscapeDefault"],[4,"EscapeDefaultState"],[3,"Rev"],[3,"Cloned"],[3,"Cycle"],[3,"Chain"],[4,"ChainState"],[3,"Zip"],[3,"Map"],[3,"Filter"],[3,"FilterMap"],[3,"Enumerate"],[3,"Peekable"],[3,"SkipWhile"],[3,"TakeWhile"],[3,"Skip"],[3,"Take"],[3,"Scan"],[3,"FlatMap"],[3,"Fuse"],[3,"Inspect"],[3,"StepBy"],[3,"RangeInclusive"],[3,"Repeat"],[3,"Empty"],[3,"Once"],[3,"Item"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Slice"],[3,"TraitObject"],[4,"Result"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"Split"],[3,"SplitMut"],[3,"GenericSplitN"],[3,"SplitN"],[3,"RSplitN"],[3,"SplitNMut"],[3,"RSplitNMut"],[3,"Windows"],[3,"Chunks"],[3,"ChunksMut"],[4,"SearchStep"],[3,"CharEqSearcher"],[3,"CharEqPattern"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"StrSearcher"],[4,"StrSearcherImpl"],[3,"EmptyNeedle"],[3,"TwoWaySearcher"],[4,"MatchOnly"],[4,"RejectAndMatch"],[3,"ParseBoolError"],[3,"Utf8Error"],[3,"Chars"],[3,"CharIndices"],[3,"Bytes"],[3,"SplitInternal"],[3,"Split"],[3,"RSplit"],[3,"SplitTerminator"],[3,"RSplitTerminator"],[3,"SplitNInternal"],[3,"SplitN"],[3,"RSplitN"],[3,"MatchIndicesInternal"],[3,"MatchIndices"],[3,"RMatchIndices"],[3,"MatchesInternal"],[3,"Matches"],[3,"RMatches"],[3,"Lines"],[3,"LinesAny"],[3,"LinesAnyMap"],[3,"CharRange"],[3,"SipHasher"],[3,"BuildHasherDefault"],[3,"Binary"],[3,"Octal"],[3,"Decimal"],[3,"LowerHex"],[3,"UpperHex"],[3,"Radix"],[3,"RadixFmt"],[3,"PadAdapter"],[3,"DebugStruct"],[3,"DebugTuple"],[3,"DebugInner"],[3,"DebugSet"],[3,"DebugList"],[3,"DebugMap"],[3,"Error"],[3,"ArgumentV1"],[4,"FlagV1"],[3,"Arguments"],[3,"Formatter"],[8,"FromPrimitive"]]};
searchIndex["num"] = {"doc":"A collection of numeric types and traits for Rust.","items":[[11,"new","num_bigint","Creates and initializes a BigInt.",0,{"inputs":[{"name":"sign"},{"name":"vec"}],"output":{"name":"bigint"}}],[11,"from_biguint","","Creates and initializes a `BigInt`.",0,{"inputs":[{"name":"sign"},{"name":"biguint"}],"output":{"name":"bigint"}}],[11,"from_slice","","Creates and initializes a `BigInt`.",0,null],[11,"from_bytes_be","","Creates and initializes a `BigInt`.",0,null],[11,"from_bytes_le","","Creates and initializes a `BigInt`.",0,null],[11,"to_bytes_le","","Returns the sign and the byte representation of the `BigInt` in little-endian byte order.",0,null],[11,"to_bytes_be","","Returns the sign and the byte representation of the `BigInt` in big-endian byte order.",0,null],[11,"to_str_radix","","Returns the integer formatted as a string in the given radix.\n`radix` must be in the range `[2, 36]`.",0,{"inputs":[{"name":"bigint"},{"name":"u32"}],"output":{"name":"string"}}],[11,"sign","","Returns the sign of the `BigInt` as a `Sign`.",0,{"inputs":[{"name":"bigint"}],"output":{"name":"sign"}}],[11,"parse_bytes","","Creates and initializes a `BigInt`.",0,null],[11,"bits","","Determines the fewest bits necessary to express the `BigInt`,\nnot including the sign.",0,{"inputs":[{"name":"bigint"}],"output":{"name":"usize"}}],[11,"to_biguint","","Converts this `BigInt` into a `BigUint`, if it&#39;s not negative.",0,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_add","","",0,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_sub","","",0,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_mul","","",0,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_div","","",0,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"hash","","",1,null],[11,"fmt","","",1,{"inputs":[{"name":"biguint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"decode","","",1,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",1,{"inputs":[{"name":"biguint"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"ordering"}}],[11,"default","","",1,{"inputs":[],"output":{"name":"biguint"}}],[11,"fmt","","",1,{"inputs":[{"name":"biguint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"biguint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"biguint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"biguint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"biguint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",1,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str_radix","","Creates and initializes a `BigUint`.",1,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"bitand","","",1,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitand","","",1,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitor","","",1,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitor","","",1,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitxor","","",1,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitxor","","",1,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"shl","","",1,{"inputs":[{"name":"biguint"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"shr","","",1,{"inputs":[{"name":"biguint"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"zero","","",1,{"inputs":[],"output":{"name":"biguint"}}],[11,"is_zero","","",1,{"inputs":[{"name":"biguint"}],"output":{"name":"bool"}}],[11,"one","","",1,{"inputs":[],"output":{"name":"biguint"}}],[11,"add","","",1,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"add","","",1,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"sub","","",1,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"sub","","",1,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mul","","",1,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mul","","",1,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div","","",1,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div","","",1,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"rem","","",1,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"rem","","",1,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"neg","","",1,{"inputs":[{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"checked_add","","",1,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"checked_sub","","",1,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"checked_mul","","",1,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"checked_div","","",1,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"div_rem","","",1,null],[11,"div_floor","","",1,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mod_floor","","",1,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div_mod_floor","","",1,null],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",1,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",1,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"divides","","Deprecated, use `is_multiple_of` instead.",1,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"bool"}}],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",1,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"bool"}}],[11,"is_even","","Returns `true` if the number is divisible by `2`.",1,{"inputs":[{"name":"biguint"}],"output":{"name":"bool"}}],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",1,{"inputs":[{"name":"biguint"}],"output":{"name":"bool"}}],[11,"to_i64","","",1,{"inputs":[{"name":"biguint"}],"output":{"name":"option"}}],[11,"to_u64","","",1,{"inputs":[{"name":"biguint"}],"output":{"name":"option"}}],[11,"to_f32","","",1,{"inputs":[{"name":"biguint"}],"output":{"name":"option"}}],[11,"to_f64","","",1,{"inputs":[{"name":"biguint"}],"output":{"name":"option"}}],[11,"from_i64","","",1,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",1,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f64","","",1,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"from","","",1,{"inputs":[{"name":"u64"}],"output":{"name":"biguint"}}],[11,"from","","",1,{"inputs":[{"name":"u8"}],"output":{"name":"biguint"}}],[11,"from","","",1,{"inputs":[{"name":"u16"}],"output":{"name":"biguint"}}],[11,"from","","",1,{"inputs":[{"name":"u32"}],"output":{"name":"biguint"}}],[11,"from","","",1,{"inputs":[{"name":"usize"}],"output":{"name":"biguint"}}],[11,"to_biguint","","",0,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"to_biguint","","",1,{"inputs":[{"name":"biguint"}],"output":{"name":"option"}}],[11,"new","","Creates and initializes a `BigUint`.",1,{"inputs":[{"name":"vec"}],"output":{"name":"biguint"}}],[11,"from_slice","","Creates and initializes a `BigUint`.",1,null],[11,"from_bytes_be","","Creates and initializes a `BigUint`.",1,null],[11,"from_bytes_le","","Creates and initializes a `BigUint`.",1,null],[11,"to_bytes_le","","Returns the byte representation of the `BigUint` in little-endian byte order.",1,{"inputs":[{"name":"biguint"}],"output":{"name":"vec"}}],[11,"to_bytes_be","","Returns the byte representation of the `BigUint` in big-endian byte order.",1,{"inputs":[{"name":"biguint"}],"output":{"name":"vec"}}],[11,"to_str_radix","","Returns the integer formatted as a string in the given radix.\n`radix` must be in the range `[2, 36]`.",1,{"inputs":[{"name":"biguint"},{"name":"u32"}],"output":{"name":"string"}}],[11,"parse_bytes","","Creates and initializes a `BigUint`.",1,null],[11,"bits","","Determines the fewest bits necessary to express the `BigUint`.",1,{"inputs":[{"name":"biguint"}],"output":{"name":"usize"}}],[11,"hash","","",2,null],[11,"fmt","","",2,{"inputs":[{"name":"sign"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"sign"}],"output":{"name":"sign"}}],[11,"cmp","","",2,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"option"}}],[11,"lt","","",2,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"le","","",2,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"gt","","",2,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"ge","","",2,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"eq","","",2,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"decode","","",2,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",2,{"inputs":[{"name":"sign"},{"name":"__s"}],"output":{"name":"result"}}],[11,"neg","","Negate Sign value.",2,{"inputs":[{"name":"sign"}],"output":{"name":"sign"}}],[11,"mul","","",2,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"sign"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"bigint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"decode","","",0,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",0,{"inputs":[{"name":"bigint"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"cmp","","",0,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"ordering"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"bigint"}}],[11,"fmt","","",0,{"inputs":[{"name":"bigint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"bigint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"bigint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"bigint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"bigint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str_radix","","Creates and initializes a BigInt.",0,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"shl","","",0,{"inputs":[{"name":"bigint"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"shr","","",0,{"inputs":[{"name":"bigint"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"zero","","",0,{"inputs":[],"output":{"name":"bigint"}}],[11,"is_zero","","",0,{"inputs":[{"name":"bigint"}],"output":{"name":"bool"}}],[11,"one","","",0,{"inputs":[],"output":{"name":"bigint"}}],[11,"abs","","",0,{"inputs":[{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"abs_sub","","",0,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"signum","","",0,{"inputs":[{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"is_positive","","",0,{"inputs":[{"name":"bigint"}],"output":{"name":"bool"}}],[11,"is_negative","","",0,{"inputs":[{"name":"bigint"}],"output":{"name":"bool"}}],[11,"add","","",0,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"add","","",0,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"sub","","",0,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"sub","","",0,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mul","","",0,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mul","","",0,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div","","",0,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div","","",0,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"rem","","",0,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"rem","","",0,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"neg","","",0,{"inputs":[{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"checked_add","","",0,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_sub","","",0,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_mul","","",0,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_div","","",0,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"div_rem","","",0,null],[11,"div_floor","","",0,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mod_floor","","",0,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div_mod_floor","","",0,null],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",0,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",0,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"divides","","Deprecated, use `is_multiple_of` instead.",0,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",0,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"is_even","","Returns `true` if the number is divisible by `2`.",0,{"inputs":[{"name":"bigint"}],"output":{"name":"bool"}}],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",0,{"inputs":[{"name":"bigint"}],"output":{"name":"bool"}}],[11,"to_i64","","",0,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"to_u64","","",0,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"to_f32","","",0,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"to_f64","","",0,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"from_i64","","",0,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",0,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f64","","",0,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"from","","",0,{"inputs":[{"name":"i64"}],"output":{"name":"bigint"}}],[11,"from","","",0,{"inputs":[{"name":"i8"}],"output":{"name":"bigint"}}],[11,"from","","",0,{"inputs":[{"name":"i16"}],"output":{"name":"bigint"}}],[11,"from","","",0,{"inputs":[{"name":"i32"}],"output":{"name":"bigint"}}],[11,"from","","",0,{"inputs":[{"name":"isize"}],"output":{"name":"bigint"}}],[11,"from","","",0,{"inputs":[{"name":"u64"}],"output":{"name":"bigint"}}],[11,"from","","",0,{"inputs":[{"name":"u8"}],"output":{"name":"bigint"}}],[11,"from","","",0,{"inputs":[{"name":"u16"}],"output":{"name":"bigint"}}],[11,"from","","",0,{"inputs":[{"name":"u32"}],"output":{"name":"bigint"}}],[11,"from","","",0,{"inputs":[{"name":"usize"}],"output":{"name":"bigint"}}],[11,"from","","",0,{"inputs":[{"name":"biguint"}],"output":{"name":"bigint"}}],[11,"to_bigint","","",0,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"to_bigint","","",1,{"inputs":[{"name":"biguint"}],"output":{"name":"option"}}],[11,"eq","","",3,{"inputs":[{"name":"parsebiginterror"},{"name":"parsebiginterror"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"parsebiginterror"},{"name":"parsebiginterror"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"parsebiginterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"parsebiginterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",3,{"inputs":[{"name":"parsebiginterror"}],"output":{"name":"str"}}],[11,"from","","",3,{"inputs":[{"name":"parseinterror"}],"output":{"name":"parsebiginterror"}}],[3,"BigInt","num","A big signed integer type.",null,null],[3,"BigUint","","A big unsigned integer type.",null,null],[11,"fmt","num_rational","",4,{"inputs":[{"name":"ratio"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",4,null],[11,"clone","","",4,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"decode","","",4,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",4,{"inputs":[{"name":"ratio"},{"name":"__s"}],"output":{"name":"result"}}],[11,"from_integer","","Creates a ratio representing the integer `t`.",4,{"inputs":[{"name":"t"}],"output":{"name":"ratio"}}],[11,"new_raw","","Creates a ratio without checking for `denom == 0` or reducing.",4,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"ratio"}}],[11,"new","","Create a new Ratio. Fails if `denom == 0`.",4,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"ratio"}}],[11,"to_integer","","Converts to an integer.",4,{"inputs":[{"name":"ratio"}],"output":{"name":"t"}}],[11,"numer","","Gets an immutable reference to the numerator.",4,{"inputs":[{"name":"ratio"}],"output":{"name":"t"}}],[11,"denom","","Gets an immutable reference to the denominator.",4,{"inputs":[{"name":"ratio"}],"output":{"name":"t"}}],[11,"is_integer","","Returns true if the rational number is an integer (denominator is 1).",4,{"inputs":[{"name":"ratio"}],"output":{"name":"bool"}}],[11,"reduced","","Returns a `reduce`d copy of self.",4,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"recip","","Returns the reciprocal.",4,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"floor","","Rounds towards minus infinity.",4,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"ceil","","Rounds towards plus infinity.",4,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"round","","Rounds to the nearest integer. Rounds half-way cases away from zero.",4,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"trunc","","Rounds towards zero.",4,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"fract","","Returns the fractional part of a number.",4,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"pow","","Raises the ratio to the power of an exponent",4,{"inputs":[{"name":"ratio"},{"name":"i32"}],"output":{"name":"ratio"}}],[11,"from_float","","Converts a float into a rational number.",4,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[11,"cmp","","",4,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"option"}}],[11,"eq","","",4,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"bool"}}],[11,"mul","","",4,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"mul","","",4,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"div","","",4,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"div","","",4,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"add","","",4,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"add","","",4,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"sub","","",4,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"sub","","",4,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"rem","","",4,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"rem","","",4,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"neg","","",4,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"zero","","",4,{"inputs":[],"output":{"name":"ratio"}}],[11,"is_zero","","",4,{"inputs":[{"name":"ratio"}],"output":{"name":"bool"}}],[11,"one","","",4,{"inputs":[],"output":{"name":"ratio"}}],[11,"from_str_radix","","Parses `numer/denom` where the numbers are in base `radix`.",4,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"abs","","",4,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"abs_sub","","",4,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"signum","","",4,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"is_positive","","",4,{"inputs":[{"name":"ratio"}],"output":{"name":"bool"}}],[11,"is_negative","","",4,{"inputs":[{"name":"ratio"}],"output":{"name":"bool"}}],[11,"fmt","","Renders as `numer/denom`. If denom=1, renders as numer.",4,{"inputs":[{"name":"ratio"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","Parses `numer/denom` or just `numer`.",4,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"parseratioerror"},{"name":"parseratioerror"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"parseratioerror"},{"name":"parseratioerror"}],"output":{"name":"bool"}}],[11,"fmt","","",5,{"inputs":[{"name":"parseratioerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"parseratioerror"}],"output":{"name":"parseratioerror"}}],[11,"eq","","",6,{"inputs":[{"name":"ratioerrorkind"},{"name":"ratioerrorkind"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"ratioerrorkind"},{"name":"ratioerrorkind"}],"output":{"name":"bool"}}],[11,"fmt","","",6,{"inputs":[{"name":"ratioerrorkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"ratioerrorkind"}],"output":{"name":"ratioerrorkind"}}],[11,"fmt","","",5,{"inputs":[{"name":"parseratioerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",5,{"inputs":[{"name":"parseratioerror"}],"output":{"name":"str"}}],[6,"Rational","num","",null,null],[6,"BigRational","","",null,null],[11,"new","num_complex","Create a new Complex",7,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"complex"}}],[11,"i","","Returns imaginary unit",7,{"inputs":[],"output":{"name":"complex"}}],[11,"norm_sqr","","Returns the square of the norm (since `T` doesn&#39;t necessarily\nhave a sqrt function), i.e. `re^2 + im^2`.",7,{"inputs":[{"name":"complex"}],"output":{"name":"t"}}],[11,"scale","","Multiplies `self` by the scalar `t`.",7,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"unscale","","Divides `self` by the scalar `t`.",7,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"conj","","Returns the complex conjugate. i.e. `re - i im`",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"inv","","Returns `1/self`",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"norm","","Calculate |self|",7,{"inputs":[{"name":"complex"}],"output":{"name":"t"}}],[11,"arg","","Calculate the principal Arg of self.",7,{"inputs":[{"name":"complex"}],"output":{"name":"t"}}],[11,"to_polar","","Convert to polar form (r, theta), such that `self = r * exp(i\n* theta)`",7,null],[11,"from_polar","","Convert a polar representation into a complex number.",7,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"complex"}}],[11,"exp","","Computes `e^(self)`, where `e` is the base of the natural logarithm.",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"ln","","Computes the principal value of natural logarithm of `self`.",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"sqrt","","Computes the principal value of the square root of `self`.",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"sin","","Computes the sine of `self`.",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"cos","","Computes the cosine of `self`.",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"tan","","Computes the tangent of `self`.",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"asin","","Computes the principal value of the inverse sine of `self`.",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"acos","","Computes the principal value of the inverse cosine of `self`.",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"atan","","Computes the principal value of the inverse tangent of `self`.",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"sinh","","Computes the hyperbolic sine of `self`.",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"cosh","","Computes the hyperbolic cosine of `self`.",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"tanh","","Computes the hyperbolic tangent of `self`.",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"asinh","","Computes the principal value of inverse hyperbolic sine of `self`.",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"acosh","","Computes the principal value of inverse hyperbolic cosine of `self`.",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"atanh","","Computes the principal value of inverse hyperbolic tangent of `self`.",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"is_nan","","Checks if the given complex number is NaN",7,{"inputs":[{"name":"complex"}],"output":{"name":"bool"}}],[11,"is_infinite","","Checks if the given complex number is infinite",7,{"inputs":[{"name":"complex"}],"output":{"name":"bool"}}],[11,"is_finite","","Checks if the given complex number is finite",7,{"inputs":[{"name":"complex"}],"output":{"name":"bool"}}],[11,"is_normal","","Checks if the given complex number is normal",7,{"inputs":[{"name":"complex"}],"output":{"name":"bool"}}],[11,"fmt","","",7,{"inputs":[{"name":"complex"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",7,null],[11,"clone","","",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"eq","","",7,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"bool"}}],[11,"decode","","",7,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",7,{"inputs":[{"name":"complex"},{"name":"__s"}],"output":{"name":"result"}}],[11,"from","","",7,{"inputs":[{"name":"t"}],"output":{"name":"complex"}}],[11,"from","","",7,{"inputs":[{"name":"t"}],"output":{"name":"complex"}}],[11,"add","","",7,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"add","","",7,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"sub","","",7,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"sub","","",7,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"mul","","",7,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"mul","","",7,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"div","","",7,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"div","","",7,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"neg","","",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"add","","",7,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"sub","","",7,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"mul","","",7,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"div","","",7,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"add","","",7,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"sub","","",7,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"mul","","",7,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"div","","",7,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"zero","","",7,{"inputs":[],"output":{"name":"complex"}}],[11,"is_zero","","",7,{"inputs":[{"name":"complex"}],"output":{"name":"bool"}}],[11,"one","","",7,{"inputs":[],"output":{"name":"complex"}}],[11,"fmt","","",7,{"inputs":[{"name":"complex"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Complex","num","A complex number in Cartesian form.",null,null],[12,"re","","Real portion of the complex number",7,null],[12,"im","","Imaginary portion of the complex number",7,null],[8,"Integer","","",null,null],[10,"div_floor","","Floored integer division.",8,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"self"}}],[10,"mod_floor","","Floored integer modulo, satisfying:",8,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"self"}}],[10,"gcd","","Greatest Common Divisor (GCD).",8,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"self"}}],[10,"lcm","","Lowest Common Multiple (LCM).",8,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"self"}}],[10,"divides","","Deprecated, use `is_multiple_of` instead.",8,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_multiple_of","","Returns `true` if `other` is a multiple of `self`.",8,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_even","","Returns `true` if the number is even.",8,{"inputs":[{"name":"integer"}],"output":{"name":"bool"}}],[10,"is_odd","","Returns `true` if the number is odd.",8,{"inputs":[{"name":"integer"}],"output":{"name":"bool"}}],[10,"div_rem","","Simultaneous truncated integer division and modulus.\nReturns `(quotient, remainder)`.",8,null],[11,"div_mod_floor","","Simultaneous floored integer division and modulus.\nReturns `(quotient, remainder)`.",8,null],[5,"range","","Returns an iterator over the given range [start, stop) (that is, starting\nat start (inclusive), and ending at stop (exclusive)).",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"range"}}],[5,"range_inclusive","","Return an iterator over the range [start, stop]",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"rangeinclusive"}}],[5,"range_step","","Return an iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestep"}}],[5,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestepinclusive"}}],[8,"Num","","The base trait for numeric types",null,null],[16,"FromStrRadixErr","","",9,null],[10,"from_str_radix","","Convert from a string and radix &lt;= 36.",9,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[8,"Zero","","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",10,{"inputs":[],"output":{"name":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",10,{"inputs":[{"name":"zero"}],"output":{"name":"bool"}}],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",11,{"inputs":[],"output":{"name":"self"}}],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can be negative).",null,null],[10,"abs","","Computes the absolute value.",12,{"inputs":[{"name":"signed"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",12,{"inputs":[{"name":"signed"},{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns the sign of the number.",12,{"inputs":[{"name":"signed"}],"output":{"name":"self"}}],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",12,{"inputs":[{"name":"signed"}],"output":{"name":"bool"}}],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",12,{"inputs":[{"name":"signed"}],"output":{"name":"bool"}}],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[8,"Bounded","","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",13,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","returns the largest finite number this type can represent",13,{"inputs":[],"output":{"name":"self"}}],[8,"Saturating","","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator.\nReturns a+b, saturating at the numeric bounds instead of overflowing.",14,{"inputs":[{"name":"saturating"},{"name":"self"}],"output":{"name":"self"}}],[10,"saturating_sub","","Saturating subtraction operator.\nReturns a-b, saturating at the numeric bounds instead of overflowing.",14,{"inputs":[{"name":"saturating"},{"name":"self"}],"output":{"name":"self"}}],[8,"CheckedAdd","","Performs addition that returns `None` instead of wrapping around on\noverflow.",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is\nreturned.",15,{"inputs":[{"name":"checkedadd"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens,\n`None` is returned.",16,{"inputs":[{"name":"checkedsub"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or\noverflow.",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow\nor overflow happens, `None` is returned.",17,{"inputs":[{"name":"checkedmul"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of\nwrapping around on underflow and overflow.",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by\nzero. If any of that happens, `None` is returned.",18,{"inputs":[{"name":"checkeddiv"},{"name":"self"}],"output":{"name":"option"}}],[8,"PrimInt","","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",19,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",19,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation\nof `self`.",19,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation\nof `self`.",19,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping\nthe truncated bits to the end of the resulting integer.",19,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping\nthe truncated bits to the beginning of the resulting integer.",19,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling\nzeros in the least significant bits.",19,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying\nthe &quot;sign bit&quot; in the most significant bits even for unsigned types.",19,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling\nzeros in the least significant bits.",19,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling\nzeros in the most significant bits.",19,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"swap_bytes","","Reverses the byte order of the integer.",19,{"inputs":[{"name":"primint"}],"output":{"name":"self"}}],[10,"from_be","","Convert an integer from big endian to the target&#39;s endianness.",19,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_le","","Convert an integer from little endian to the target&#39;s endianness.",19,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_be","","Convert `self` to big endian from the target&#39;s endianness.",19,{"inputs":[{"name":"primint"}],"output":{"name":"self"}}],[10,"to_le","","Convert `self` to little endian from the target&#39;s endianness.",19,{"inputs":[{"name":"primint"}],"output":{"name":"self"}}],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",19,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[8,"Float","","",null,null],[10,"nan","","Returns the `NaN` value.",20,{"inputs":[],"output":{"name":"self"}}],[10,"infinity","","Returns the infinite value.",20,{"inputs":[],"output":{"name":"self"}}],[10,"neg_infinity","","Returns the negative infinite value.",20,{"inputs":[],"output":{"name":"self"}}],[10,"neg_zero","","Returns `-0.0`.",20,{"inputs":[],"output":{"name":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",20,{"inputs":[],"output":{"name":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",20,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",20,{"inputs":[],"output":{"name":"self"}}],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",20,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and\nfalse otherwise.",20,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",20,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_normal","","Returns `true` if the number is neither zero, infinite,\n[subnormal][subnormal], or `NaN`.",20,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"classify","","Returns the floating point category of the number. If only one property\nis going to be tested, it is generally faster to use the specific\npredicate instead.",20,{"inputs":[{"name":"float"}],"output":{"name":"fpcategory"}}],[10,"floor","","Returns the largest integer less than or equal to a number.",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from\n`0.0`.",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"trunc","","Return the integer part of a number.",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"fract","","Returns the fractional part of a number.",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the\nnumber is `Float::nan()`.",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"signum","","Returns a number that represents the sign of `self`.",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0` and\n`Float::infinity()`.",20,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0` and\n`Float::neg_infinity()`.",20,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding\nerror. This produces a more accurate result with better performance than\na separate multiplication operation followed by an add.",20,{"inputs":[{"name":"float"},{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"powi","","Raise a number to an integer power.",20,{"inputs":[{"name":"float"},{"name":"i32"}],"output":{"name":"self"}}],[10,"powf","","Raise a number to a floating point power.",20,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"sqrt","","Take the square root of a number.",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"exp","","Returns `e^(self)`, (the exponential function).",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"exp2","","Returns `2^(self)`.",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"ln","","Returns the natural logarithm of the number.",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",20,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"log2","","Returns the base 2 logarithm of the number.",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"log10","","Returns the base 10 logarithm of the number.",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"max","","Returns the maximum of the two numbers.",20,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"min","","Returns the minimum of the two numbers.",20,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",20,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"cbrt","","Take the cubic root of a number.",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given\nlegs of length `x` and `y`.",20,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin","","Computes the sine of a number (in radians).",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"cos","","Computes the cosine of a number (in radians).",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"tan","","Computes the tangent of a number (in radians).",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"asin","","Computes the arcsine of a number. Return value is in radians in\nthe range [-pi/2, pi/2] or NaN if the number is outside the range\n[-1, 1].",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"acos","","Computes the arccosine of a number. Return value is in radians in\nthe range [0, pi] or NaN if the number is outside the range\n[-1, 1].",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the\nrange [-pi/2, pi/2];",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",20,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns\n`(sin(x), cos(x))`.",20,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the\nnumber is close to zero.",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if\nthe operations were performed separately.",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"sinh","","Hyperbolic sine function.",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"cosh","","Hyperbolic cosine function.",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"tanh","","Hyperbolic tangent function.",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"asinh","","Inverse hyperbolic sine function.",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"acosh","","Inverse hyperbolic cosine function.",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"atanh","","Inverse hyperbolic tangent function.",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively.\nThe original number can be recovered by `sign * mantissa * 2 ^ exponent`.\nThe floating point encoding is documented in the [Reference][floating-point].",20,null],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",21,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_i8","","Converts the value of `self` to an `i8`.",21,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_i16","","Converts the value of `self` to an `i16`.",21,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_i32","","Converts the value of `self` to an `i32`.",21,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[10,"to_i64","","Converts the value of `self` to an `i64`.",21,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_usize","","Converts the value of `self` to a `usize`.",21,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_u8","","Converts the value of `self` to an `u8`.",21,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_u16","","Converts the value of `self` to an `u16`.",21,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_u32","","Converts the value of `self` to an `u32`.",21,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[10,"to_u64","","Converts the value of `self` to an `u64`.",21,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_f32","","Converts the value of `self` to an `f32`.",21,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_f64","","Converts the value of `self` to an `f64`.",21,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the\nvalue cannot be represented by this value, the `None` is returned.",22,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",22,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",22,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",22,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",22,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",22,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",22,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",22,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",22,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",22,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",22,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",22,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into\na primitive via the `ToPrimitive` trait.",23,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[0,"cast","","",null,null],[8,"ToPrimitive","num::cast","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",21,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_i8","","Converts the value of `self` to an `i8`.",21,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_i16","","Converts the value of `self` to an `i16`.",21,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_i32","","Converts the value of `self` to an `i32`.",21,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[10,"to_i64","","Converts the value of `self` to an `i64`.",21,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_usize","","Converts the value of `self` to a `usize`.",21,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_u8","","Converts the value of `self` to an `u8`.",21,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_u16","","Converts the value of `self` to an `u16`.",21,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_u32","","Converts the value of `self` to an `u32`.",21,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[10,"to_u64","","Converts the value of `self` to an `u64`.",21,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_f32","","Converts the value of `self` to an `f32`.",21,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_f64","","Converts the value of `self` to an `f64`.",21,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the\nvalue cannot be represented by this value, the `None` is returned.",22,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",22,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",22,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",22,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",22,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",22,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",22,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",22,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",22,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",22,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",22,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",22,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[5,"cast","","Cast from one machine scalar to another.",null,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into\na primitive via the `ToPrimitive` trait.",23,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[6,"BigDigit","num::bigint","",null,null],[6,"DoubleBigDigit","","",null,null],[17,"ZERO_BIG_DIGIT","","",null,null],[0,"big_digit","","",null,null],[17,"BITS","num::bigint::big_digit","",null,null],[17,"BASE","","",null,null],[5,"from_doublebigdigit","","Split one `DoubleBigDigit` into two `BigDigit`s.",null,null],[5,"to_doublebigdigit","","Join two `BigDigit`s into one `DoubleBigDigit`",null,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"u64"}}],[3,"BigUint","num::bigint","A big unsigned integer type.",null,null],[8,"ToBigUint","","A generic trait for converting a value to a `BigUint`.",null,null],[10,"to_biguint","","Converts the value of `self` to a `BigUint`.",24,{"inputs":[{"name":"tobiguint"}],"output":{"name":"option"}}],[4,"Sign","","A Sign is a `BigInt`&#39;s composing element.",null,null],[13,"Minus","","",2,null],[13,"NoSign","","",2,null],[13,"Plus","","",2,null],[3,"BigInt","","A big signed integer type.",null,null],[8,"ToBigInt","","A generic trait for converting a value to a `BigInt`.",null,null],[10,"to_bigint","","Converts the value of `self` to a `BigInt`.",25,{"inputs":[{"name":"tobigint"}],"output":{"name":"option"}}],[8,"RandBigInt","","",null,null],[10,"gen_biguint","","Generate a random `BigUint` of the given bit size.",26,{"inputs":[{"name":"randbigint"},{"name":"usize"}],"output":{"name":"biguint"}}],[10,"gen_bigint","","Generate a random BigInt of the given bit size.",26,{"inputs":[{"name":"randbigint"},{"name":"usize"}],"output":{"name":"bigint"}}],[10,"gen_biguint_below","","Generate a random `BigUint` less than the given bound. Fails\nwhen the bound is zero.",26,{"inputs":[{"name":"randbigint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[10,"gen_biguint_range","","Generate a random `BigUint` within the given range. The lower\nbound is inclusive; the upper bound is exclusive. Fails when\nthe upper bound is not greater than the lower bound.",26,{"inputs":[{"name":"randbigint"},{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[10,"gen_bigint_range","","Generate a random `BigInt` within the given range. The lower\nbound is inclusive; the upper bound is exclusive. Fails when\nthe upper bound is not greater than the lower bound.",26,{"inputs":[{"name":"randbigint"},{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[4,"ParseBigIntError","","",null,null],[13,"ParseInt","","",3,null],[13,"Other","","",3,null],[3,"Complex","num::complex","A complex number in Cartesian form.",null,null],[12,"re","","Real portion of the complex number",7,null],[12,"im","","Imaginary portion of the complex number",7,null],[6,"Complex32","","",null,null],[6,"Complex64","","",null,null],[8,"Integer","num::integer","",null,null],[10,"div_floor","","Floored integer division.",8,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"self"}}],[10,"mod_floor","","Floored integer modulo, satisfying:",8,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"self"}}],[10,"gcd","","Greatest Common Divisor (GCD).",8,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"self"}}],[10,"lcm","","Lowest Common Multiple (LCM).",8,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"self"}}],[10,"divides","","Deprecated, use `is_multiple_of` instead.",8,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_multiple_of","","Returns `true` if `other` is a multiple of `self`.",8,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_even","","Returns `true` if the number is even.",8,{"inputs":[{"name":"integer"}],"output":{"name":"bool"}}],[10,"is_odd","","Returns `true` if the number is odd.",8,{"inputs":[{"name":"integer"}],"output":{"name":"bool"}}],[10,"div_rem","","Simultaneous truncated integer division and modulus.\nReturns `(quotient, remainder)`.",8,null],[11,"div_mod_floor","","Simultaneous floored integer division and modulus.\nReturns `(quotient, remainder)`.",8,null],[5,"div_rem","","Simultaneous integer division and modulus",null,null],[5,"div_floor","","Floored integer division",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"mod_floor","","Floored integer modulus",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"div_mod_floor","","Simultaneous floored integer division and modulus",null,null],[5,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`. The\nresult is always positive.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[11,"clone","num_iter","",27,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"next","","",27,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"size_hint","","",27,null],[11,"next_back","","",27,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"clone","","",28,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"rangeinclusive"}}],[11,"next","","",28,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"size_hint","","",28,null],[11,"next_back","","",28,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"clone","","",29,{"inputs":[{"name":"rangestep"}],"output":{"name":"rangestep"}}],[11,"next","","",29,{"inputs":[{"name":"rangestep"}],"output":{"name":"option"}}],[11,"clone","","",30,{"inputs":[{"name":"rangestepinclusive"}],"output":{"name":"rangestepinclusive"}}],[11,"next","","",30,{"inputs":[{"name":"rangestepinclusive"}],"output":{"name":"option"}}],[3,"Range","num::iter","An iterator over the range [start, stop)",null,null],[5,"range","","Returns an iterator over the given range [start, stop) (that is, starting\nat start (inclusive), and ending at stop (exclusive)).",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"range"}}],[3,"RangeInclusive","","An iterator over the range [start, stop]",null,null],[5,"range_inclusive","","Return an iterator over the range [start, stop]",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"rangeinclusive"}}],[3,"RangeStep","","An iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,null],[5,"range_step","","Return an iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestep"}}],[3,"RangeStepInclusive","","An iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,null],[5,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestepinclusive"}}],[0,"identities","num::traits","",null,null],[8,"Zero","num::traits::identities","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",10,{"inputs":[],"output":{"name":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",10,{"inputs":[{"name":"zero"}],"output":{"name":"bool"}}],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",11,{"inputs":[],"output":{"name":"self"}}],[0,"sign","num::traits","",null,null],[8,"Signed","num::traits::sign","Useful functions for signed numbers (i.e. numbers that can be negative).",null,null],[10,"abs","","Computes the absolute value.",12,{"inputs":[{"name":"signed"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",12,{"inputs":[{"name":"signed"},{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns the sign of the number.",12,{"inputs":[{"name":"signed"}],"output":{"name":"self"}}],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",12,{"inputs":[{"name":"signed"}],"output":{"name":"bool"}}],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",12,{"inputs":[{"name":"signed"}],"output":{"name":"bool"}}],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[0,"ops","num::traits","",null,null],[0,"saturating","num::traits::ops","",null,null],[8,"Saturating","num::traits::ops::saturating","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator.\nReturns a+b, saturating at the numeric bounds instead of overflowing.",14,{"inputs":[{"name":"saturating"},{"name":"self"}],"output":{"name":"self"}}],[10,"saturating_sub","","Saturating subtraction operator.\nReturns a-b, saturating at the numeric bounds instead of overflowing.",14,{"inputs":[{"name":"saturating"},{"name":"self"}],"output":{"name":"self"}}],[0,"checked","num::traits::ops","",null,null],[8,"CheckedAdd","num::traits::ops::checked","Performs addition that returns `None` instead of wrapping around on\noverflow.",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is\nreturned.",15,{"inputs":[{"name":"checkedadd"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens,\n`None` is returned.",16,{"inputs":[{"name":"checkedsub"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or\noverflow.",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow\nor overflow happens, `None` is returned.",17,{"inputs":[{"name":"checkedmul"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of\nwrapping around on underflow and overflow.",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by\nzero. If any of that happens, `None` is returned.",18,{"inputs":[{"name":"checkeddiv"},{"name":"self"}],"output":{"name":"option"}}],[0,"bounds","num::traits","",null,null],[8,"Bounded","num::traits::bounds","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",13,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","returns the largest finite number this type can represent",13,{"inputs":[],"output":{"name":"self"}}],[0,"float","num::traits","",null,null],[8,"Float","num::traits::float","",null,null],[10,"nan","","Returns the `NaN` value.",20,{"inputs":[],"output":{"name":"self"}}],[10,"infinity","","Returns the infinite value.",20,{"inputs":[],"output":{"name":"self"}}],[10,"neg_infinity","","Returns the negative infinite value.",20,{"inputs":[],"output":{"name":"self"}}],[10,"neg_zero","","Returns `-0.0`.",20,{"inputs":[],"output":{"name":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",20,{"inputs":[],"output":{"name":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",20,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",20,{"inputs":[],"output":{"name":"self"}}],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",20,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and\nfalse otherwise.",20,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",20,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_normal","","Returns `true` if the number is neither zero, infinite,\n[subnormal][subnormal], or `NaN`.",20,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"classify","","Returns the floating point category of the number. If only one property\nis going to be tested, it is generally faster to use the specific\npredicate instead.",20,{"inputs":[{"name":"float"}],"output":{"name":"fpcategory"}}],[10,"floor","","Returns the largest integer less than or equal to a number.",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from\n`0.0`.",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"trunc","","Return the integer part of a number.",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"fract","","Returns the fractional part of a number.",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the\nnumber is `Float::nan()`.",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"signum","","Returns a number that represents the sign of `self`.",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0` and\n`Float::infinity()`.",20,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0` and\n`Float::neg_infinity()`.",20,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding\nerror. This produces a more accurate result with better performance than\na separate multiplication operation followed by an add.",20,{"inputs":[{"name":"float"},{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"powi","","Raise a number to an integer power.",20,{"inputs":[{"name":"float"},{"name":"i32"}],"output":{"name":"self"}}],[10,"powf","","Raise a number to a floating point power.",20,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"sqrt","","Take the square root of a number.",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"exp","","Returns `e^(self)`, (the exponential function).",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"exp2","","Returns `2^(self)`.",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"ln","","Returns the natural logarithm of the number.",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",20,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"log2","","Returns the base 2 logarithm of the number.",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"log10","","Returns the base 10 logarithm of the number.",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"max","","Returns the maximum of the two numbers.",20,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"min","","Returns the minimum of the two numbers.",20,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",20,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"cbrt","","Take the cubic root of a number.",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given\nlegs of length `x` and `y`.",20,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin","","Computes the sine of a number (in radians).",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"cos","","Computes the cosine of a number (in radians).",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"tan","","Computes the tangent of a number (in radians).",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"asin","","Computes the arcsine of a number. Return value is in radians in\nthe range [-pi/2, pi/2] or NaN if the number is outside the range\n[-1, 1].",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"acos","","Computes the arccosine of a number. Return value is in radians in\nthe range [0, pi] or NaN if the number is outside the range\n[-1, 1].",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the\nrange [-pi/2, pi/2];",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",20,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns\n`(sin(x), cos(x))`.",20,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the\nnumber is close to zero.",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if\nthe operations were performed separately.",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"sinh","","Hyperbolic sine function.",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"cosh","","Hyperbolic cosine function.",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"tanh","","Hyperbolic tangent function.",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"asinh","","Inverse hyperbolic sine function.",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"acosh","","Inverse hyperbolic cosine function.",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"atanh","","Inverse hyperbolic tangent function.",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively.\nThe original number can be recovered by `sign * mantissa * 2 ^ exponent`.\nThe floating point encoding is documented in the [Reference][floating-point].",20,null],[0,"cast","num::traits","",null,null],[8,"ToPrimitive","num::traits::cast","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",21,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_i8","","Converts the value of `self` to an `i8`.",21,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_i16","","Converts the value of `self` to an `i16`.",21,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_i32","","Converts the value of `self` to an `i32`.",21,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[10,"to_i64","","Converts the value of `self` to an `i64`.",21,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_usize","","Converts the value of `self` to a `usize`.",21,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_u8","","Converts the value of `self` to an `u8`.",21,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_u16","","Converts the value of `self` to an `u16`.",21,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_u32","","Converts the value of `self` to an `u32`.",21,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[10,"to_u64","","Converts the value of `self` to an `u64`.",21,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_f32","","Converts the value of `self` to an `f32`.",21,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_f64","","Converts the value of `self` to an `f64`.",21,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the\nvalue cannot be represented by this value, the `None` is returned.",22,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",22,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",22,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",22,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",22,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",22,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",22,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",22,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",22,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",22,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",22,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",22,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[5,"cast","","Cast from one machine scalar to another.",null,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into\na primitive via the `ToPrimitive` trait.",23,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[0,"int","num::traits","",null,null],[8,"PrimInt","num::traits::int","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",19,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",19,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation\nof `self`.",19,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation\nof `self`.",19,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping\nthe truncated bits to the end of the resulting integer.",19,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping\nthe truncated bits to the beginning of the resulting integer.",19,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling\nzeros in the least significant bits.",19,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying\nthe &quot;sign bit&quot; in the most significant bits even for unsigned types.",19,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling\nzeros in the least significant bits.",19,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling\nzeros in the most significant bits.",19,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"swap_bytes","","Reverses the byte order of the integer.",19,{"inputs":[{"name":"primint"}],"output":{"name":"self"}}],[10,"from_be","","Convert an integer from big endian to the target&#39;s endianness.",19,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_le","","Convert an integer from little endian to the target&#39;s endianness.",19,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_be","","Convert `self` to big endian from the target&#39;s endianness.",19,{"inputs":[{"name":"primint"}],"output":{"name":"self"}}],[10,"to_le","","Convert `self` to little endian from the target&#39;s endianness.",19,{"inputs":[{"name":"primint"}],"output":{"name":"self"}}],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",19,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[8,"Num","num::traits","The base trait for numeric types",null,null],[16,"FromStrRadixErr","","",9,null],[10,"from_str_radix","","Convert from a string and radix &lt;= 36.",9,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"fmt","num_traits","",31,{"inputs":[{"name":"floaterrorkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",32,{"inputs":[{"name":"parsefloaterror"},{"name":"formatter"}],"output":{"name":"result"}}],[4,"FloatErrorKind","num::traits","",null,null],[13,"Empty","","",31,null],[13,"Invalid","","",31,null],[3,"ParseFloatError","","",null,null],[12,"kind","","",32,null],[8,"Bounded","","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",13,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","returns the largest finite number this type can represent",13,{"inputs":[],"output":{"name":"self"}}],[8,"Float","","",null,null],[10,"nan","","Returns the `NaN` value.",20,{"inputs":[],"output":{"name":"self"}}],[10,"infinity","","Returns the infinite value.",20,{"inputs":[],"output":{"name":"self"}}],[10,"neg_infinity","","Returns the negative infinite value.",20,{"inputs":[],"output":{"name":"self"}}],[10,"neg_zero","","Returns `-0.0`.",20,{"inputs":[],"output":{"name":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",20,{"inputs":[],"output":{"name":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",20,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",20,{"inputs":[],"output":{"name":"self"}}],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",20,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and\nfalse otherwise.",20,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",20,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_normal","","Returns `true` if the number is neither zero, infinite,\n[subnormal][subnormal], or `NaN`.",20,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"classify","","Returns the floating point category of the number. If only one property\nis going to be tested, it is generally faster to use the specific\npredicate instead.",20,{"inputs":[{"name":"float"}],"output":{"name":"fpcategory"}}],[10,"floor","","Returns the largest integer less than or equal to a number.",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from\n`0.0`.",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"trunc","","Return the integer part of a number.",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"fract","","Returns the fractional part of a number.",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the\nnumber is `Float::nan()`.",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"signum","","Returns a number that represents the sign of `self`.",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0` and\n`Float::infinity()`.",20,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0` and\n`Float::neg_infinity()`.",20,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding\nerror. This produces a more accurate result with better performance than\na separate multiplication operation followed by an add.",20,{"inputs":[{"name":"float"},{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"powi","","Raise a number to an integer power.",20,{"inputs":[{"name":"float"},{"name":"i32"}],"output":{"name":"self"}}],[10,"powf","","Raise a number to a floating point power.",20,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"sqrt","","Take the square root of a number.",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"exp","","Returns `e^(self)`, (the exponential function).",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"exp2","","Returns `2^(self)`.",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"ln","","Returns the natural logarithm of the number.",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",20,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"log2","","Returns the base 2 logarithm of the number.",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"log10","","Returns the base 10 logarithm of the number.",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"max","","Returns the maximum of the two numbers.",20,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"min","","Returns the minimum of the two numbers.",20,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",20,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"cbrt","","Take the cubic root of a number.",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given\nlegs of length `x` and `y`.",20,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin","","Computes the sine of a number (in radians).",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"cos","","Computes the cosine of a number (in radians).",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"tan","","Computes the tangent of a number (in radians).",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"asin","","Computes the arcsine of a number. Return value is in radians in\nthe range [-pi/2, pi/2] or NaN if the number is outside the range\n[-1, 1].",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"acos","","Computes the arccosine of a number. Return value is in radians in\nthe range [0, pi] or NaN if the number is outside the range\n[-1, 1].",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the\nrange [-pi/2, pi/2];",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",20,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns\n`(sin(x), cos(x))`.",20,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the\nnumber is close to zero.",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if\nthe operations were performed separately.",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"sinh","","Hyperbolic sine function.",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"cosh","","Hyperbolic cosine function.",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"tanh","","Hyperbolic tangent function.",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"asinh","","Inverse hyperbolic sine function.",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"acosh","","Inverse hyperbolic cosine function.",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"atanh","","Inverse hyperbolic tangent function.",20,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively.\nThe original number can be recovered by `sign * mantissa * 2 ^ exponent`.\nThe floating point encoding is documented in the [Reference][floating-point].",20,null],[8,"Zero","","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",10,{"inputs":[],"output":{"name":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",10,{"inputs":[{"name":"zero"}],"output":{"name":"bool"}}],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",11,{"inputs":[],"output":{"name":"self"}}],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens,\n`None` is returned.",16,{"inputs":[{"name":"checkedsub"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or\noverflow.",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow\nor overflow happens, `None` is returned.",17,{"inputs":[{"name":"checkedmul"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of\nwrapping around on underflow and overflow.",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by\nzero. If any of that happens, `None` is returned.",18,{"inputs":[{"name":"checkeddiv"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedAdd","","Performs addition that returns `None` instead of wrapping around on\noverflow.",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is\nreturned.",15,{"inputs":[{"name":"checkedadd"},{"name":"self"}],"output":{"name":"option"}}],[8,"Saturating","","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator.\nReturns a+b, saturating at the numeric bounds instead of overflowing.",14,{"inputs":[{"name":"saturating"},{"name":"self"}],"output":{"name":"self"}}],[10,"saturating_sub","","Saturating subtraction operator.\nReturns a-b, saturating at the numeric bounds instead of overflowing.",14,{"inputs":[{"name":"saturating"},{"name":"self"}],"output":{"name":"self"}}],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can be negative).",null,null],[10,"abs","","Computes the absolute value.",12,{"inputs":[{"name":"signed"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",12,{"inputs":[{"name":"signed"},{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns the sign of the number.",12,{"inputs":[{"name":"signed"}],"output":{"name":"self"}}],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",12,{"inputs":[{"name":"signed"}],"output":{"name":"bool"}}],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",12,{"inputs":[{"name":"signed"}],"output":{"name":"bool"}}],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into\na primitive via the `ToPrimitive` trait.",23,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",21,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_i8","","Converts the value of `self` to an `i8`.",21,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_i16","","Converts the value of `self` to an `i16`.",21,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_i32","","Converts the value of `self` to an `i32`.",21,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[10,"to_i64","","Converts the value of `self` to an `i64`.",21,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_usize","","Converts the value of `self` to a `usize`.",21,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_u8","","Converts the value of `self` to an `u8`.",21,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_u16","","Converts the value of `self` to an `u16`.",21,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_u32","","Converts the value of `self` to an `u32`.",21,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[10,"to_u64","","Converts the value of `self` to an `u64`.",21,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_f32","","Converts the value of `self` to an `f32`.",21,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_f64","","Converts the value of `self` to an `f64`.",21,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[5,"cast","","Cast from one machine scalar to another.",null,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the\nvalue cannot be represented by this value, the `None` is returned.",22,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",22,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",22,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",22,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",22,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",22,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",22,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",22,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",22,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",22,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",22,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",22,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[8,"PrimInt","","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",19,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",19,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation\nof `self`.",19,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation\nof `self`.",19,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping\nthe truncated bits to the end of the resulting integer.",19,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping\nthe truncated bits to the beginning of the resulting integer.",19,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling\nzeros in the least significant bits.",19,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying\nthe &quot;sign bit&quot; in the most significant bits even for unsigned types.",19,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling\nzeros in the least significant bits.",19,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling\nzeros in the most significant bits.",19,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"swap_bytes","","Reverses the byte order of the integer.",19,{"inputs":[{"name":"primint"}],"output":{"name":"self"}}],[10,"from_be","","Convert an integer from big endian to the target&#39;s endianness.",19,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_le","","Convert an integer from little endian to the target&#39;s endianness.",19,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_be","","Convert `self` to big endian from the target&#39;s endianness.",19,{"inputs":[{"name":"primint"}],"output":{"name":"self"}}],[10,"to_le","","Convert `self` to little endian from the target&#39;s endianness.",19,{"inputs":[{"name":"primint"}],"output":{"name":"self"}}],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",19,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[3,"Ratio","num::rational","Represents the ratio between 2 numbers.",null,null],[6,"Rational","","",null,null],[6,"Rational32","","",null,null],[6,"Rational64","","",null,null],[6,"BigRational","","",null,null],[3,"ParseRatioError","","",null,null],[5,"zero","num","Returns the additive identity, `0`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"one","","Returns the multiplicative identity, `1`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"abs","","Computes the absolute value.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"abs_sub","","The positive difference of two numbers.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"signum","","Returns the sign of the number.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"pow","","Raises a value to the power of exp, using exponentiation by squaring.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"t"}}],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an overflow occurred.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"option"}}]],"paths":[[3,"BigInt"],[3,"BigUint"],[4,"Sign"],[4,"ParseBigIntError"],[3,"Ratio"],[3,"ParseRatioError"],[4,"RatioErrorKind"],[3,"Complex"],[8,"Integer"],[8,"Num"],[8,"Zero"],[8,"One"],[8,"Signed"],[8,"Bounded"],[8,"Saturating"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"PrimInt"],[8,"Float"],[8,"ToPrimitive"],[8,"FromPrimitive"],[8,"NumCast"],[8,"ToBigUint"],[8,"ToBigInt"],[8,"RandBigInt"],[3,"Range"],[3,"RangeInclusive"],[3,"RangeStep"],[3,"RangeStepInclusive"],[4,"FloatErrorKind"],[3,"ParseFloatError"]]};
searchIndex["num_rational"] = {"doc":"Rational numbers","items":[[3,"Ratio","num_rational","Represents the ratio between 2 numbers.",null,null],[3,"ParseRatioError","","",null,null],[6,"Rational","","Alias for a `Ratio` of machine-sized integers.",null,null],[6,"Rational32","","",null,null],[6,"Rational64","","",null,null],[6,"BigRational","","Alias for arbitrary precision rationals.",null,null],[11,"fmt","","",0,{"inputs":[{"name":"ratio"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",0,null],[11,"clone","","",0,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"decode","","",0,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",0,{"inputs":[{"name":"ratio"},{"name":"__s"}],"output":{"name":"result"}}],[11,"from_integer","","Creates a ratio representing the integer `t`.",0,{"inputs":[{"name":"t"}],"output":{"name":"ratio"}}],[11,"new_raw","","Creates a ratio without checking for `denom == 0` or reducing.",0,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"ratio"}}],[11,"new","","Create a new Ratio. Fails if `denom == 0`.",0,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"ratio"}}],[11,"to_integer","","Converts to an integer.",0,{"inputs":[{"name":"ratio"}],"output":{"name":"t"}}],[11,"numer","","Gets an immutable reference to the numerator.",0,{"inputs":[{"name":"ratio"}],"output":{"name":"t"}}],[11,"denom","","Gets an immutable reference to the denominator.",0,{"inputs":[{"name":"ratio"}],"output":{"name":"t"}}],[11,"is_integer","","Returns true if the rational number is an integer (denominator is 1).",0,{"inputs":[{"name":"ratio"}],"output":{"name":"bool"}}],[11,"reduced","","Returns a `reduce`d copy of self.",0,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"recip","","Returns the reciprocal.",0,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"floor","","Rounds towards minus infinity.",0,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"ceil","","Rounds towards plus infinity.",0,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"round","","Rounds to the nearest integer. Rounds half-way cases away from zero.",0,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"trunc","","Rounds towards zero.",0,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"fract","","Returns the fractional part of a number.",0,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"pow","","Raises the ratio to the power of an exponent",0,{"inputs":[{"name":"ratio"},{"name":"i32"}],"output":{"name":"ratio"}}],[11,"from_float","","Converts a float into a rational number.",0,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[11,"cmp","","",0,{"inputs":[{"name":"ratio"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"ratio"},{"name":"self"}],"output":{"name":"option"}}],[11,"eq","","",0,{"inputs":[{"name":"ratio"},{"name":"self"}],"output":{"name":"bool"}}],[11,"mul","","",0,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"mul","","",0,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"div","","",0,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"div","","",0,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"add","","",0,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"add","","",0,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"sub","","",0,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"sub","","",0,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"rem","","",0,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"rem","","",0,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"neg","","",0,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"zero","","",0,{"inputs":[],"output":{"name":"ratio"}}],[11,"is_zero","","",0,{"inputs":[{"name":"ratio"}],"output":{"name":"bool"}}],[11,"one","","",0,{"inputs":[],"output":{"name":"ratio"}}],[11,"from_str_radix","","Parses `numer/denom` where the numbers are in base `radix`.",0,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"abs","","",0,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"abs_sub","","",0,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"signum","","",0,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"is_positive","","",0,{"inputs":[{"name":"ratio"}],"output":{"name":"bool"}}],[11,"is_negative","","",0,{"inputs":[{"name":"ratio"}],"output":{"name":"bool"}}],[11,"fmt","","Renders as `numer/denom`. If denom=1, renders as numer.",0,{"inputs":[{"name":"ratio"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","Parses `numer/denom` or just `numer`.",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"parseratioerror"},{"name":"parseratioerror"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"parseratioerror"},{"name":"parseratioerror"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"parseratioerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"parseratioerror"}],"output":{"name":"parseratioerror"}}],[11,"fmt","","",1,{"inputs":[{"name":"parseratioerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",1,{"inputs":[{"name":"parseratioerror"}],"output":{"name":"str"}}]],"paths":[[3,"Ratio"],[3,"ParseRatioError"]]};
searchIndex["num_complex"] = {"doc":"Complex numbers.","items":[[3,"Complex","num_complex","A complex number in Cartesian form.",null,null],[12,"re","","Real portion of the complex number",0,null],[12,"im","","Imaginary portion of the complex number",0,null],[6,"Complex32","","",null,null],[6,"Complex64","","",null,null],[11,"fmt","","",0,{"inputs":[{"name":"complex"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",0,null],[11,"clone","","",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"eq","","",0,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"bool"}}],[11,"decode","","",0,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",0,{"inputs":[{"name":"complex"},{"name":"__s"}],"output":{"name":"result"}}],[11,"new","","Create a new Complex",0,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"complex"}}],[11,"i","","Returns imaginary unit",0,{"inputs":[],"output":{"name":"complex"}}],[11,"norm_sqr","","Returns the square of the norm (since `T` doesn&#39;t necessarily\nhave a sqrt function), i.e. `re^2 + im^2`.",0,{"inputs":[{"name":"complex"}],"output":{"name":"t"}}],[11,"scale","","Multiplies `self` by the scalar `t`.",0,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"unscale","","Divides `self` by the scalar `t`.",0,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"conj","","Returns the complex conjugate. i.e. `re - i im`",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"inv","","Returns `1/self`",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"norm","","Calculate |self|",0,{"inputs":[{"name":"complex"}],"output":{"name":"t"}}],[11,"arg","","Calculate the principal Arg of self.",0,{"inputs":[{"name":"complex"}],"output":{"name":"t"}}],[11,"to_polar","","Convert to polar form (r, theta), such that `self = r * exp(i\n* theta)`",0,null],[11,"from_polar","","Convert a polar representation into a complex number.",0,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"complex"}}],[11,"exp","","Computes `e^(self)`, where `e` is the base of the natural logarithm.",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"ln","","Computes the principal value of natural logarithm of `self`.",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"sqrt","","Computes the principal value of the square root of `self`.",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"sin","","Computes the sine of `self`.",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"cos","","Computes the cosine of `self`.",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"tan","","Computes the tangent of `self`.",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"asin","","Computes the principal value of the inverse sine of `self`.",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"acos","","Computes the principal value of the inverse cosine of `self`.",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"atan","","Computes the principal value of the inverse tangent of `self`.",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"sinh","","Computes the hyperbolic sine of `self`.",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"cosh","","Computes the hyperbolic cosine of `self`.",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"tanh","","Computes the hyperbolic tangent of `self`.",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"asinh","","Computes the principal value of inverse hyperbolic sine of `self`.",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"acosh","","Computes the principal value of inverse hyperbolic cosine of `self`.",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"atanh","","Computes the principal value of inverse hyperbolic tangent of `self`.",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"is_nan","","Checks if the given complex number is NaN",0,{"inputs":[{"name":"complex"}],"output":{"name":"bool"}}],[11,"is_infinite","","Checks if the given complex number is infinite",0,{"inputs":[{"name":"complex"}],"output":{"name":"bool"}}],[11,"is_finite","","Checks if the given complex number is finite",0,{"inputs":[{"name":"complex"}],"output":{"name":"bool"}}],[11,"is_normal","","Checks if the given complex number is normal",0,{"inputs":[{"name":"complex"}],"output":{"name":"bool"}}],[11,"from","","",0,{"inputs":[{"name":"t"}],"output":{"name":"complex"}}],[11,"from","","",0,{"inputs":[{"name":"t"}],"output":{"name":"complex"}}],[11,"add","","",0,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"add","","",0,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"sub","","",0,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"sub","","",0,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"mul","","",0,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"mul","","",0,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"div","","",0,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"div","","",0,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"neg","","",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"add","","",0,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"sub","","",0,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"mul","","",0,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"div","","",0,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"add","","",0,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"sub","","",0,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"mul","","",0,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"div","","",0,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"zero","","",0,{"inputs":[],"output":{"name":"complex"}}],[11,"is_zero","","",0,{"inputs":[{"name":"complex"}],"output":{"name":"bool"}}],[11,"one","","",0,{"inputs":[],"output":{"name":"complex"}}],[11,"fmt","","",0,{"inputs":[{"name":"complex"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"Complex"]]};
searchIndex["num_bigint"] = {"doc":"A Big integer (signed version: `BigInt`, unsigned version: `BigUint`).","items":[[3,"BigUint","num_bigint","A big unsigned integer type.",null,null],[3,"BigInt","","A big signed integer type.",null,null],[4,"Sign","","A Sign is a `BigInt`&#39;s composing element.",null,null],[13,"Minus","","",0,null],[13,"NoSign","","",0,null],[13,"Plus","","",0,null],[4,"ParseBigIntError","","",null,null],[13,"ParseInt","","",1,null],[13,"Other","","",1,null],[0,"big_digit","","",null,null],[5,"from_doublebigdigit","num_bigint::big_digit","Split one `DoubleBigDigit` into two `BigDigit`s.",null,null],[5,"to_doublebigdigit","","Join two `BigDigit`s into one `DoubleBigDigit`",null,{"inputs":[{"name":"bigdigit"},{"name":"bigdigit"}],"output":{"name":"doublebigdigit"}}],[17,"BITS","","",null,null],[17,"BASE","","",null,null],[6,"BigDigit","num_bigint","A `BigDigit` is a `BigUint`&#39;s composing element.",null,null],[6,"DoubleBigDigit","","A `DoubleBigDigit` is the internal type used to do the computations.  Its\nsize is the double of the size of `BigDigit`.",null,null],[17,"ZERO_BIG_DIGIT","","",null,null],[8,"ToBigUint","","A generic trait for converting a value to a `BigUint`.",null,null],[10,"to_biguint","","Converts the value of `self` to a `BigUint`.",2,{"inputs":[{"name":"tobiguint"}],"output":{"name":"option"}}],[8,"ToBigInt","","A generic trait for converting a value to a `BigInt`.",null,null],[10,"to_bigint","","Converts the value of `self` to a `BigInt`.",3,{"inputs":[{"name":"tobigint"}],"output":{"name":"option"}}],[8,"RandBigInt","","",null,null],[10,"gen_biguint","","Generate a random `BigUint` of the given bit size.",4,{"inputs":[{"name":"randbigint"},{"name":"usize"}],"output":{"name":"biguint"}}],[10,"gen_bigint","","Generate a random BigInt of the given bit size.",4,{"inputs":[{"name":"randbigint"},{"name":"usize"}],"output":{"name":"bigint"}}],[10,"gen_biguint_below","","Generate a random `BigUint` less than the given bound. Fails\nwhen the bound is zero.",4,{"inputs":[{"name":"randbigint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[10,"gen_biguint_range","","Generate a random `BigUint` within the given range. The lower\nbound is inclusive; the upper bound is exclusive. Fails when\nthe upper bound is not greater than the lower bound.",4,{"inputs":[{"name":"randbigint"},{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[10,"gen_bigint_range","","Generate a random `BigInt` within the given range. The lower\nbound is inclusive; the upper bound is exclusive. Fails when\nthe upper bound is not greater than the lower bound.",4,{"inputs":[{"name":"randbigint"},{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"hash","","",5,null],[11,"fmt","","",5,{"inputs":[{"name":"biguint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"decode","","",5,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",5,{"inputs":[{"name":"biguint"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"cmp","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"ordering"}}],[11,"default","","",5,{"inputs":[],"output":{"name":"biguint"}}],[11,"fmt","","",5,{"inputs":[{"name":"biguint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"biguint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"biguint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"biguint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"biguint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",5,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str_radix","","Creates and initializes a `BigUint`.",5,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"bitand","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitand","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitor","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitor","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitxor","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitxor","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"shl","","",5,{"inputs":[{"name":"biguint"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"shr","","",5,{"inputs":[{"name":"biguint"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"zero","","",5,{"inputs":[],"output":{"name":"biguint"}}],[11,"is_zero","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"bool"}}],[11,"one","","",5,{"inputs":[],"output":{"name":"biguint"}}],[11,"add","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"add","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"sub","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"sub","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mul","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mul","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"rem","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"rem","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"neg","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"checked_add","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"checked_sub","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"checked_mul","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"checked_div","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"div_rem","","",5,null],[11,"div_floor","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mod_floor","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div_mod_floor","","",5,null],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"divides","","Deprecated, use `is_multiple_of` instead.",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"bool"}}],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"bool"}}],[11,"is_even","","Returns `true` if the number is divisible by `2`.",5,{"inputs":[{"name":"biguint"}],"output":{"name":"bool"}}],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",5,{"inputs":[{"name":"biguint"}],"output":{"name":"bool"}}],[11,"to_i64","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"option"}}],[11,"to_u64","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"option"}}],[11,"to_f32","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"option"}}],[11,"to_f64","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"option"}}],[11,"from_i64","","",5,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",5,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f64","","",5,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"from","","",5,{"inputs":[{"name":"u64"}],"output":{"name":"self"}}],[11,"from","","",5,{"inputs":[{"name":"u8"}],"output":{"name":"self"}}],[11,"from","","",5,{"inputs":[{"name":"u16"}],"output":{"name":"self"}}],[11,"from","","",5,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[11,"from","","",5,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"to_biguint","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"to_biguint","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"option"}}],[11,"new","","Creates and initializes a `BigUint`.",5,{"inputs":[{"name":"vec"}],"output":{"name":"biguint"}}],[11,"from_slice","","Creates and initializes a `BigUint`.",5,null],[11,"from_bytes_be","","Creates and initializes a `BigUint`.",5,null],[11,"from_bytes_le","","Creates and initializes a `BigUint`.",5,null],[11,"to_bytes_le","","Returns the byte representation of the `BigUint` in little-endian byte order.",5,{"inputs":[{"name":"biguint"}],"output":{"name":"vec"}}],[11,"to_bytes_be","","Returns the byte representation of the `BigUint` in big-endian byte order.",5,{"inputs":[{"name":"biguint"}],"output":{"name":"vec"}}],[11,"to_str_radix","","Returns the integer formatted as a string in the given radix.\n`radix` must be in the range `[2, 36]`.",5,{"inputs":[{"name":"biguint"},{"name":"u32"}],"output":{"name":"string"}}],[11,"parse_bytes","","Creates and initializes a `BigUint`.",5,null],[11,"bits","","Determines the fewest bits necessary to express the `BigUint`.",5,{"inputs":[{"name":"biguint"}],"output":{"name":"usize"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"sign"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"sign"}],"output":{"name":"sign"}}],[11,"cmp","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"decode","","",0,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",0,{"inputs":[{"name":"sign"},{"name":"__s"}],"output":{"name":"result"}}],[11,"neg","","Negate Sign value.",0,{"inputs":[{"name":"sign"}],"output":{"name":"sign"}}],[11,"mul","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"sign"}}],[11,"hash","","",6,null],[11,"fmt","","",6,{"inputs":[{"name":"bigint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"decode","","",6,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",6,{"inputs":[{"name":"bigint"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"cmp","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"ordering"}}],[11,"default","","",6,{"inputs":[],"output":{"name":"bigint"}}],[11,"fmt","","",6,{"inputs":[{"name":"bigint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"bigint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"bigint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"bigint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"bigint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",6,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str_radix","","Creates and initializes a BigInt.",6,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"shl","","",6,{"inputs":[{"name":"bigint"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"shr","","",6,{"inputs":[{"name":"bigint"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"zero","","",6,{"inputs":[],"output":{"name":"bigint"}}],[11,"is_zero","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bool"}}],[11,"one","","",6,{"inputs":[],"output":{"name":"bigint"}}],[11,"abs","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"abs_sub","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"signum","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"is_positive","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bool"}}],[11,"is_negative","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bool"}}],[11,"add","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"add","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"sub","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"sub","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mul","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mul","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"rem","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"rem","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"neg","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"checked_add","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_sub","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_mul","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_div","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"div_rem","","",6,null],[11,"div_floor","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mod_floor","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div_mod_floor","","",6,null],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"divides","","Deprecated, use `is_multiple_of` instead.",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"is_even","","Returns `true` if the number is divisible by `2`.",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bool"}}],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bool"}}],[11,"to_i64","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"to_u64","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"to_f32","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"to_f64","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"from_i64","","",6,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",6,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f64","","",6,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"from","","",6,{"inputs":[{"name":"i64"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"i8"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"i16"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"i32"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"isize"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"u64"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"u8"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"u16"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"biguint"}],"output":{"name":"self"}}],[11,"to_bigint","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"to_bigint","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"option"}}],[11,"new","","Creates and initializes a BigInt.",6,{"inputs":[{"name":"sign"},{"name":"vec"}],"output":{"name":"bigint"}}],[11,"from_biguint","","Creates and initializes a `BigInt`.",6,{"inputs":[{"name":"sign"},{"name":"biguint"}],"output":{"name":"bigint"}}],[11,"from_slice","","Creates and initializes a `BigInt`.",6,null],[11,"from_bytes_be","","Creates and initializes a `BigInt`.",6,null],[11,"from_bytes_le","","Creates and initializes a `BigInt`.",6,null],[11,"to_bytes_le","","Returns the sign and the byte representation of the `BigInt` in little-endian byte order.",6,null],[11,"to_bytes_be","","Returns the sign and the byte representation of the `BigInt` in big-endian byte order.",6,null],[11,"to_str_radix","","Returns the integer formatted as a string in the given radix.\n`radix` must be in the range `[2, 36]`.",6,{"inputs":[{"name":"bigint"},{"name":"u32"}],"output":{"name":"string"}}],[11,"sign","","Returns the sign of the `BigInt` as a `Sign`.",6,{"inputs":[{"name":"bigint"}],"output":{"name":"sign"}}],[11,"parse_bytes","","Creates and initializes a `BigInt`.",6,null],[11,"bits","","Determines the fewest bits necessary to express the `BigInt`,\nnot including the sign.",6,{"inputs":[{"name":"bigint"}],"output":{"name":"usize"}}],[11,"to_biguint","","Converts this `BigInt` into a `BigUint`, if it&#39;s not negative.",6,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_add","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_sub","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_mul","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_div","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"eq","","",1,{"inputs":[{"name":"parsebiginterror"},{"name":"parsebiginterror"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"parsebiginterror"},{"name":"parsebiginterror"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"parsebiginterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"parsebiginterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",1,{"inputs":[{"name":"parsebiginterror"}],"output":{"name":"str"}}],[11,"from","","",1,{"inputs":[{"name":"parseinterror"}],"output":{"name":"parsebiginterror"}}]],"paths":[[4,"Sign"],[4,"ParseBigIntError"],[8,"ToBigUint"],[8,"ToBigInt"],[8,"RandBigInt"],[3,"BigUint"],[3,"BigInt"]]};
searchIndex["rustc_serialize"] = {"doc":"Support code for encoding and decoding types.","items":[[11,"encode","collections::string","",0,{"inputs":[{"name":"string"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",0,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","alloc::boxed","",1,{"inputs":[{"name":"box"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",1,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"decode","","",1,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","alloc::rc","",2,{"inputs":[{"name":"rc"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",2,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::borrow","",3,{"inputs":[{"name":"cow"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",3,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::vec","",4,{"inputs":[{"name":"vec"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",4,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","core::option","",5,{"inputs":[{"name":"option"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",5,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","core::marker","",6,{"inputs":[{"name":"phantomdata"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",6,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","std::path","",7,{"inputs":[{"name":"path"},{"name":"s"}],"output":{"name":"result"}}],[11,"encode","","",8,{"inputs":[{"name":"pathbuf"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",8,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","core::cell","",9,{"inputs":[{"name":"cell"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",9,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","","",10,{"inputs":[{"name":"refcell"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",10,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","alloc::arc","",11,{"inputs":[{"name":"arc"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",11,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::linked_list","",12,{"inputs":[{"name":"linkedlist"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",12,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::vec_deque","",13,{"inputs":[{"name":"vecdeque"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",13,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::btree::map","",14,{"inputs":[{"name":"btreemap"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",14,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::btree::set","",15,{"inputs":[{"name":"btreeset"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",15,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","std::collections::hash::map","",16,{"inputs":[{"name":"hashmap"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",16,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","std::collections::hash::set","",17,{"inputs":[{"name":"hashset"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",17,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[0,"base64","rustc_serialize","Base64 binary-to-text encoding",null,null],[3,"Config","rustc_serialize::base64","Contains configuration parameters for `to_base64`.",null,null],[12,"char_set","","Character set to use",18,null],[12,"newline","","Newline to use",18,null],[12,"pad","","True to pad output with `=` characters",18,null],[12,"line_length","","`Some(len)` to wrap lines at `len`, `None` to disable line wrapping",18,null],[4,"CharacterSet","","Available encoding character sets",null,null],[13,"Standard","","The standard character set (uses `+` and `/`)",19,null],[13,"UrlSafe","","The URL safe character set (uses `-` and `_`)",19,null],[4,"Newline","","Available newline types",null,null],[13,"LF","","A linefeed (i.e. Unix-style newline)",20,null],[13,"CRLF","","A carriage return and a linefeed (i.e. Windows-style newline)",20,null],[4,"FromBase64Error","","Errors that can occur when decoding a base64 encoded string",null,null],[13,"InvalidBase64Byte","","The input contained a character not part of the base64 format",21,null],[13,"InvalidBase64Length","","The input had an invalid length",21,null],[7,"STANDARD","","Configuration for RFC 4648 standard base64 encoding",null,null],[7,"URL_SAFE","","Configuration for RFC 4648 base64url encoding",null,null],[7,"MIME","","Configuration for RFC 2045 MIME base64 encoding",null,null],[8,"ToBase64","","A trait for converting a value to base64 encoding.",null,null],[10,"to_base64","","Converts the value of `self` to a base64 value following the specified\nformat configuration, returning the owned string.",22,{"inputs":[{"name":"tobase64"},{"name":"config"}],"output":{"name":"string"}}],[8,"FromBase64","","A trait for converting from base64 encoded values.",null,null],[10,"from_base64","","Converts the value of `self`, interpreted as base64 encoded data, into\nan owned vector of bytes, returning the vector.",23,{"inputs":[{"name":"frombase64"}],"output":{"name":"result"}}],[11,"fmt","","",19,{"inputs":[{"name":"characterset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"characterset"}],"output":{"name":"characterset"}}],[11,"fmt","","",20,{"inputs":[{"name":"newline"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",20,{"inputs":[{"name":"newline"}],"output":{"name":"newline"}}],[11,"fmt","","",18,{"inputs":[{"name":"config"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"config"}],"output":{"name":"config"}}],[11,"clone","","",21,{"inputs":[{"name":"frombase64error"}],"output":{"name":"frombase64error"}}],[11,"fmt","","",21,{"inputs":[{"name":"frombase64error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",21,{"inputs":[{"name":"frombase64error"}],"output":{"name":"str"}}],[11,"fmt","","",21,{"inputs":[{"name":"frombase64error"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"hex","rustc_serialize","Hex binary-to-text encoding",null,null],[4,"FromHexError","rustc_serialize::hex","Errors that can occur when decoding a hex encoded string",null,null],[13,"InvalidHexCharacter","","The input contained a character not part of the hex format",24,null],[13,"InvalidHexLength","","The input had an invalid length",24,null],[8,"ToHex","","A trait for converting a value to hexadecimal encoding",null,null],[10,"to_hex","","Converts the value of `self` to a hex value, returning the owned\nstring.",25,{"inputs":[{"name":"tohex"}],"output":{"name":"string"}}],[8,"FromHex","","A trait for converting hexadecimal encoded values",null,null],[10,"from_hex","","Converts the value of `self`, interpreted as hexadecimal encoded data,\ninto an owned vector of bytes, returning the vector.",26,{"inputs":[{"name":"fromhex"}],"output":{"name":"result"}}],[11,"clone","","",24,{"inputs":[{"name":"fromhexerror"}],"output":{"name":"fromhexerror"}}],[11,"fmt","","",24,{"inputs":[{"name":"fromhexerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",24,{"inputs":[{"name":"fromhexerror"}],"output":{"name":"str"}}],[11,"fmt","","",24,{"inputs":[{"name":"fromhexerror"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"json","rustc_serialize","JSON parsing and serialization",null,null],[3,"PrettyJson","rustc_serialize::json","",null,null],[3,"AsJson","","",null,null],[3,"AsPrettyJson","","",null,null],[3,"Encoder","","A structure for implementing serialization to JSON.",null,null],[3,"Stack","","A Stack represents the current position of the parser in the logical\nstructure of the JSON stream.\nFor example foo.bar[3].x",null,null],[3,"Parser","","A streaming JSON parser implemented as an iterator of JsonEvent, consuming\nan iterator of char.",null,null],[3,"Builder","","A Builder consumes a json::Parser to create a generic Json structure.",null,null],[3,"Decoder","","A structure to decode JSON to values in rust.",null,null],[4,"Json","","Represents a json value",null,null],[13,"I64","","",27,null],[13,"U64","","",27,null],[13,"F64","","",27,null],[13,"String","","",27,null],[13,"Boolean","","",27,null],[13,"Array","","",27,null],[13,"Object","","",27,null],[13,"Null","","",27,null],[4,"ErrorCode","","The errors that can arise while parsing a JSON stream.",null,null],[13,"InvalidSyntax","","",28,null],[13,"InvalidNumber","","",28,null],[13,"EOFWhileParsingObject","","",28,null],[13,"EOFWhileParsingArray","","",28,null],[13,"EOFWhileParsingValue","","",28,null],[13,"EOFWhileParsingString","","",28,null],[13,"KeyMustBeAString","","",28,null],[13,"ExpectedColon","","",28,null],[13,"TrailingCharacters","","",28,null],[13,"TrailingComma","","",28,null],[13,"InvalidEscape","","",28,null],[13,"InvalidUnicodeCodePoint","","",28,null],[13,"LoneLeadingSurrogateInHexEscape","","",28,null],[13,"UnexpectedEndOfHexEscape","","",28,null],[13,"UnrecognizedHex","","",28,null],[13,"NotFourDigit","","",28,null],[13,"ControlCharacterInString","","",28,null],[13,"NotUtf8","","",28,null],[4,"ParserError","","",null,null],[13,"SyntaxError","","msg, line, col",29,null],[13,"IoError","","",29,null],[4,"DecoderError","","",null,null],[13,"ParseError","","",30,null],[13,"ExpectedError","","",30,null],[13,"MissingFieldError","","",30,null],[13,"UnknownVariantError","","",30,null],[13,"ApplicationError","","",30,null],[13,"EOF","","",30,null],[4,"EncoderError","","",null,null],[13,"FmtError","","",31,null],[13,"BadHashmapKey","","",31,null],[4,"JsonEvent","","The output of the streaming parser.",null,null],[13,"ObjectStart","","",32,null],[13,"ObjectEnd","","",32,null],[13,"ArrayStart","","",32,null],[13,"ArrayEnd","","",32,null],[13,"BooleanValue","","",32,null],[13,"I64Value","","",32,null],[13,"U64Value","","",32,null],[13,"F64Value","","",32,null],[13,"StringValue","","",32,null],[13,"NullValue","","",32,null],[13,"Error","","",32,null],[4,"StackElement","","StackElements compose a Stack.\nFor example, Key(&quot;foo&quot;), Key(&quot;bar&quot;), Index(3) and Key(&quot;x&quot;) are the\nStackElements compositing the stack that represents foo.bar[3].x",null,null],[13,"Index","","",33,null],[13,"Key","","",33,null],[5,"error_str","","Returns a readable error string for a given error code.",null,{"inputs":[{"name":"errorcode"}],"output":{"name":"str"}}],[5,"decode","","Shortcut function to decode a JSON `&amp;str` into an object",null,{"inputs":[{"name":"str"}],"output":{"name":"decoderesult"}}],[5,"encode","","Shortcut function to encode a `T` into a JSON `String`",null,{"inputs":[{"name":"t"}],"output":{"name":"encoderesult"}}],[5,"as_json","","Create an `AsJson` wrapper which can be used to print a value as JSON\non-the-fly via `write!`",null,{"inputs":[{"name":"t"}],"output":{"name":"asjson"}}],[5,"as_pretty_json","","Create an `AsPrettyJson` wrapper which can be used to print a value as JSON\non-the-fly via `write!`",null,{"inputs":[{"name":"t"}],"output":{"name":"asprettyjson"}}],[6,"Array","","",null,null],[6,"Object","","",null,null],[6,"BuilderError","","",null,null],[6,"EncodeResult","","",null,null],[6,"DecodeResult","","",null,null],[8,"ToJson","","A trait for converting values to JSON",null,null],[10,"to_json","","Converts the value of `self` to an instance of JSON",34,{"inputs":[{"name":"tojson"}],"output":{"name":"json"}}],[11,"fmt","","",27,{"inputs":[{"name":"json"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"option"}}],[11,"lt","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"le","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"gt","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"ge","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"eq","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"clone","","",27,{"inputs":[{"name":"json"}],"output":{"name":"json"}}],[11,"eq","","",28,{"inputs":[{"name":"errorcode"},{"name":"errorcode"}],"output":{"name":"bool"}}],[11,"ne","","",28,{"inputs":[{"name":"errorcode"},{"name":"errorcode"}],"output":{"name":"bool"}}],[11,"clone","","",28,{"inputs":[{"name":"errorcode"}],"output":{"name":"errorcode"}}],[11,"fmt","","",29,{"inputs":[{"name":"parsererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",29,{"inputs":[{"name":"parsererror"},{"name":"parsererror"}],"output":{"name":"bool"}}],[11,"fmt","","",30,{"inputs":[{"name":"decodererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",30,{"inputs":[{"name":"decodererror"},{"name":"decodererror"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"decodererror"},{"name":"decodererror"}],"output":{"name":"bool"}}],[11,"fmt","","",31,{"inputs":[{"name":"encodererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",31,{"inputs":[{"name":"encodererror"}],"output":{"name":"self"}}],[11,"fmt","","",28,{"inputs":[{"name":"errorcode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",30,{"inputs":[{"name":"decodererror"}],"output":{"name":"str"}}],[11,"cause","","",30,{"inputs":[{"name":"decodererror"}],"output":{"name":"option"}}],[11,"fmt","","",30,{"inputs":[{"name":"decodererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",30,{"inputs":[{"name":"parsererror"}],"output":{"name":"decodererror"}}],[11,"description","","",29,{"inputs":[{"name":"parsererror"}],"output":{"name":"str"}}],[11,"fmt","","",29,{"inputs":[{"name":"parsererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",29,{"inputs":[{"name":"error"}],"output":{"name":"parsererror"}}],[11,"description","","",31,{"inputs":[{"name":"encodererror"}],"output":{"name":"str"}}],[11,"fmt","","",31,{"inputs":[{"name":"encodererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",31,{"inputs":[{"name":"error"}],"output":{"name":"encodererror"}}],[11,"new_pretty","","Creates a new encoder whose output will be written in human-readable\nJSON to the specified writer",35,{"inputs":[{"name":"write"}],"output":{"name":"encoder"}}],[11,"new","","Creates a new encoder whose output will be written in compact\nJSON to the specified writer",35,{"inputs":[{"name":"write"}],"output":{"name":"encoder"}}],[11,"set_indent","","Set the number of spaces to indent for each level.\nThis is safe to set during encoding.",35,{"inputs":[{"name":"encoder"},{"name":"u32"}],"output":{"name":"result"}}],[11,"emit_nil","","",35,{"inputs":[{"name":"encoder"}],"output":{"name":"encoderesult"}}],[11,"emit_usize","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"}],"output":{"name":"encoderesult"}}],[11,"emit_u64","","",35,{"inputs":[{"name":"encoder"},{"name":"u64"}],"output":{"name":"encoderesult"}}],[11,"emit_u32","","",35,{"inputs":[{"name":"encoder"},{"name":"u32"}],"output":{"name":"encoderesult"}}],[11,"emit_u16","","",35,{"inputs":[{"name":"encoder"},{"name":"u16"}],"output":{"name":"encoderesult"}}],[11,"emit_u8","","",35,{"inputs":[{"name":"encoder"},{"name":"u8"}],"output":{"name":"encoderesult"}}],[11,"emit_isize","","",35,{"inputs":[{"name":"encoder"},{"name":"isize"}],"output":{"name":"encoderesult"}}],[11,"emit_i64","","",35,{"inputs":[{"name":"encoder"},{"name":"i64"}],"output":{"name":"encoderesult"}}],[11,"emit_i32","","",35,{"inputs":[{"name":"encoder"},{"name":"i32"}],"output":{"name":"encoderesult"}}],[11,"emit_i16","","",35,{"inputs":[{"name":"encoder"},{"name":"i16"}],"output":{"name":"encoderesult"}}],[11,"emit_i8","","",35,{"inputs":[{"name":"encoder"},{"name":"i8"}],"output":{"name":"encoderesult"}}],[11,"emit_bool","","",35,{"inputs":[{"name":"encoder"},{"name":"bool"}],"output":{"name":"encoderesult"}}],[11,"emit_f64","","",35,{"inputs":[{"name":"encoder"},{"name":"f64"}],"output":{"name":"encoderesult"}}],[11,"emit_f32","","",35,{"inputs":[{"name":"encoder"},{"name":"f32"}],"output":{"name":"encoderesult"}}],[11,"emit_char","","",35,{"inputs":[{"name":"encoder"},{"name":"char"}],"output":{"name":"encoderesult"}}],[11,"emit_str","","",35,{"inputs":[{"name":"encoder"},{"name":"str"}],"output":{"name":"encoderesult"}}],[11,"emit_enum","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_variant","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_variant_arg","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_struct_variant","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_struct_variant_field","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_struct","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_struct_field","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_arg","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_struct","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_struct_arg","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_option","","",35,{"inputs":[{"name":"encoder"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_option_none","","",35,{"inputs":[{"name":"encoder"}],"output":{"name":"encoderesult"}}],[11,"emit_option_some","","",35,{"inputs":[{"name":"encoder"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_seq","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_seq_elt","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map_elt_key","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map_elt_val","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"encode","","",27,{"inputs":[{"name":"json"},{"name":"s"}],"output":{"name":"result"}}],[11,"from_reader","","Decodes a json value from an `&amp;mut io::Read`",27,{"inputs":[{"name":"read"}],"output":{"name":"result"}}],[11,"from_str","","Decodes a json value from a string",27,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"pretty","","Borrow this json object as a pretty object to generate a pretty\nrepresentation for it via `Display`.",27,{"inputs":[{"name":"json"}],"output":{"name":"prettyjson"}}],[11,"find","","If the Json value is an Object, returns the value associated with the provided key.\nOtherwise, returns None.",27,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"option"}}],[11,"find_path","","Attempts to get a nested Json Object for each key in `keys`.\nIf any key is found not to exist, find_path will return None.\nOtherwise, it will return the Json value associated with the final key.",27,null],[11,"search","","If the Json value is an Object, performs a depth-first search until\na value associated with the provided key is found. If no value is found\nor the Json value is not an Object, returns None.",27,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"option"}}],[11,"is_object","","Returns true if the Json value is an Object. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_object","","If the Json value is an Object, returns the associated BTreeMap.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"as_object_mut","","If the Json value is an Object, returns the associated mutable BTreeMap.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_array","","Returns true if the Json value is an Array. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_array","","If the Json value is an Array, returns the associated vector.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"as_array_mut","","If the Json value is an Array, returns the associated mutable vector.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_string","","Returns true if the Json value is a String. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_string","","If the Json value is a String, returns the associated str.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_number","","Returns true if the Json value is a Number. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"is_i64","","Returns true if the Json value is a i64. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"is_u64","","Returns true if the Json value is a u64. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"is_f64","","Returns true if the Json value is a f64. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_i64","","If the Json value is a number, return or cast it to a i64.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"as_u64","","If the Json value is a number, return or cast it to a u64.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"as_f64","","If the Json value is a number, return or cast it to a f64.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_boolean","","Returns true if the Json value is a Boolean. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_boolean","","If the Json value is a Boolean, returns the associated bool.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_null","","Returns true if the Json value is a Null. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_null","","If the Json value is a Null, returns ().\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"index","","",27,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"json"}}],[11,"index","","",27,{"inputs":[{"name":"json"},{"name":"usize"}],"output":{"name":"json"}}],[11,"fmt","","",32,{"inputs":[{"name":"jsonevent"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",32,{"inputs":[{"name":"jsonevent"},{"name":"jsonevent"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"jsonevent"},{"name":"jsonevent"}],"output":{"name":"bool"}}],[11,"fmt","","",33,{"inputs":[{"name":"stackelement"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",33,{"inputs":[{"name":"stackelement"}],"output":{"name":"stackelement"}}],[11,"eq","","",33,{"inputs":[{"name":"stackelement"},{"name":"stackelement"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"stackelement"},{"name":"stackelement"}],"output":{"name":"bool"}}],[11,"new","","",36,{"inputs":[],"output":{"name":"stack"}}],[11,"len","","Returns The number of elements in the Stack.",36,{"inputs":[{"name":"stack"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the stack is empty.",36,{"inputs":[{"name":"stack"}],"output":{"name":"bool"}}],[11,"get","","Provides access to the StackElement at a given index.\nlower indices are at the bottom of the stack while higher indices are\nat the top.",36,{"inputs":[{"name":"stack"},{"name":"usize"}],"output":{"name":"stackelement"}}],[11,"is_equal_to","","Compares this stack with an array of StackElements.",36,null],[11,"starts_with","","Returns true if the bottom-most elements of this stack are the same as\nthe ones passed as parameter.",36,null],[11,"ends_with","","Returns true if the top-most elements of this stack are the same as\nthe ones passed as parameter.",36,null],[11,"top","","Returns the top-most element (if any).",36,{"inputs":[{"name":"stack"}],"output":{"name":"option"}}],[11,"next","","",37,{"inputs":[{"name":"parser"}],"output":{"name":"option"}}],[11,"new","","Creates the JSON parser.",37,{"inputs":[{"name":"t"}],"output":{"name":"parser"}}],[11,"stack","","Provides access to the current position in the logical structure of the\nJSON stream.",37,{"inputs":[{"name":"parser"}],"output":{"name":"stack"}}],[11,"new","","Create a JSON Builder.",38,{"inputs":[{"name":"t"}],"output":{"name":"builder"}}],[11,"build","","",38,{"inputs":[{"name":"builder"}],"output":{"name":"result"}}],[11,"new","","Creates a new decoder instance for decoding the specified JSON value.",39,{"inputs":[{"name":"json"}],"output":{"name":"decoder"}}],[11,"read_nil","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_usize","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_u8","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_u16","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_u32","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_u64","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_isize","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_i8","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_i16","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_i32","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_i64","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_f32","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_f64","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_bool","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_char","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_str","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_enum","","",39,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_enum_variant","","",39,null],[11,"read_enum_variant_arg","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_enum_struct_variant","","",39,null],[11,"read_enum_struct_variant_field","","",39,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_struct","","",39,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_struct_field","","",39,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_arg","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_struct","","",39,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_struct_arg","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_option","","",39,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_seq","","",39,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_seq_elt","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map","","",39,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map_elt_key","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map_elt_val","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"error","","",39,{"inputs":[{"name":"decoder"},{"name":"str"}],"output":{"name":"decodererror"}}],[11,"to_json","","",27,{"inputs":[{"name":"json"}],"output":{"name":"json"}}],[11,"to_json","collections::string","",0,{"inputs":[{"name":"string"}],"output":{"name":"json"}}],[11,"to_json","collections::vec","",4,{"inputs":[{"name":"vec"}],"output":{"name":"json"}}],[11,"to_json","collections::btree::map","",14,{"inputs":[{"name":"btreemap"}],"output":{"name":"json"}}],[11,"to_json","std::collections::hash::map","",16,{"inputs":[{"name":"hashmap"}],"output":{"name":"json"}}],[11,"to_json","core::option","",5,{"inputs":[{"name":"option"}],"output":{"name":"json"}}],[11,"fmt","rustc_serialize::json","Encodes a json value into a string",27,{"inputs":[{"name":"json"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Encodes a json value into a string",40,{"inputs":[{"name":"prettyjson"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Encodes a json value into a string",41,{"inputs":[{"name":"asjson"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"indent","","Set the indentation level for the emitted JSON",42,{"inputs":[{"name":"asprettyjson"},{"name":"u32"}],"output":{"name":"asprettyjson"}}],[11,"fmt","","Encodes a json value into a string",42,{"inputs":[{"name":"asprettyjson"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",27,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[8,"Decoder","rustc_serialize","",null,null],[16,"Error","","",43,null],[10,"read_nil","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_usize","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_u64","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_u32","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_u16","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_u8","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_isize","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_i64","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_i32","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_i16","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_i8","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_bool","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_f64","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_f32","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_char","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_str","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_enum","","",43,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_enum_variant","","",43,null],[10,"read_enum_variant_arg","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_enum_struct_variant","","",43,null],[10,"read_enum_struct_variant_field","","",43,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_struct","","",43,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_struct_field","","",43,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple_arg","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple_struct","","",43,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple_struct_arg","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_option","","",43,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_seq","","",43,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_seq_elt","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_map","","",43,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_map_elt_key","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_map_elt_val","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"error","","",43,{"inputs":[{"name":"decoder"},{"name":"str"}],"output":{"name":"error"}}],[8,"Encoder","","",null,null],[16,"Error","","",44,null],[10,"emit_nil","","",44,{"inputs":[{"name":"encoder"}],"output":{"name":"result"}}],[10,"emit_usize","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"}],"output":{"name":"result"}}],[10,"emit_u64","","",44,{"inputs":[{"name":"encoder"},{"name":"u64"}],"output":{"name":"result"}}],[10,"emit_u32","","",44,{"inputs":[{"name":"encoder"},{"name":"u32"}],"output":{"name":"result"}}],[10,"emit_u16","","",44,{"inputs":[{"name":"encoder"},{"name":"u16"}],"output":{"name":"result"}}],[10,"emit_u8","","",44,{"inputs":[{"name":"encoder"},{"name":"u8"}],"output":{"name":"result"}}],[10,"emit_isize","","",44,{"inputs":[{"name":"encoder"},{"name":"isize"}],"output":{"name":"result"}}],[10,"emit_i64","","",44,{"inputs":[{"name":"encoder"},{"name":"i64"}],"output":{"name":"result"}}],[10,"emit_i32","","",44,{"inputs":[{"name":"encoder"},{"name":"i32"}],"output":{"name":"result"}}],[10,"emit_i16","","",44,{"inputs":[{"name":"encoder"},{"name":"i16"}],"output":{"name":"result"}}],[10,"emit_i8","","",44,{"inputs":[{"name":"encoder"},{"name":"i8"}],"output":{"name":"result"}}],[10,"emit_bool","","",44,{"inputs":[{"name":"encoder"},{"name":"bool"}],"output":{"name":"result"}}],[10,"emit_f64","","",44,{"inputs":[{"name":"encoder"},{"name":"f64"}],"output":{"name":"result"}}],[10,"emit_f32","","",44,{"inputs":[{"name":"encoder"},{"name":"f32"}],"output":{"name":"result"}}],[10,"emit_char","","",44,{"inputs":[{"name":"encoder"},{"name":"char"}],"output":{"name":"result"}}],[10,"emit_str","","",44,{"inputs":[{"name":"encoder"},{"name":"str"}],"output":{"name":"result"}}],[10,"emit_enum","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_variant","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_variant_arg","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_struct_variant","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_struct_variant_field","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_struct","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_struct_field","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple_arg","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple_struct","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple_struct_arg","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_option","","",44,{"inputs":[{"name":"encoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_option_none","","",44,{"inputs":[{"name":"encoder"}],"output":{"name":"result"}}],[10,"emit_option_some","","",44,{"inputs":[{"name":"encoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_seq","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_seq_elt","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_map","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_map_elt_key","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_map_elt_val","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[8,"Decodable","","",null,null],[10,"decode","","",45,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[8,"Encodable","","",null,null],[10,"encode","","",46,{"inputs":[{"name":"encodable"},{"name":"s"}],"output":{"name":"result"}}],[8,"DecoderHelpers","","",null,null],[10,"read_to_vec","","",47,{"inputs":[{"name":"decoderhelpers"},{"name":"f"}],"output":{"name":"result"}}],[8,"EncoderHelpers","","",null,null],[10,"emit_from_vec","","",48,null]],"paths":[[3,"String"],[3,"Box"],[3,"Rc"],[4,"Cow"],[3,"Vec"],[4,"Option"],[3,"PhantomData"],[3,"Path"],[3,"PathBuf"],[3,"Cell"],[3,"RefCell"],[3,"Arc"],[3,"LinkedList"],[3,"VecDeque"],[3,"BTreeMap"],[3,"BTreeSet"],[3,"HashMap"],[3,"HashSet"],[3,"Config"],[4,"CharacterSet"],[4,"Newline"],[4,"FromBase64Error"],[8,"ToBase64"],[8,"FromBase64"],[4,"FromHexError"],[8,"ToHex"],[8,"FromHex"],[4,"Json"],[4,"ErrorCode"],[4,"ParserError"],[4,"DecoderError"],[4,"EncoderError"],[4,"JsonEvent"],[4,"StackElement"],[8,"ToJson"],[3,"Encoder"],[3,"Stack"],[3,"Parser"],[3,"Builder"],[3,"Decoder"],[3,"PrettyJson"],[3,"AsJson"],[3,"AsPrettyJson"],[8,"Decoder"],[8,"Encoder"],[8,"Decodable"],[8,"Encodable"],[8,"DecoderHelpers"],[8,"EncoderHelpers"]]};
searchIndex["rand"] = {"doc":"Utilities for random number generation","items":[[3,"Generator","rand","Iterator which will generate a stream of random items.",null,null],[3,"AsciiGenerator","","Iterator which will continuously generate random ascii characters.",null,null],[3,"XorShiftRng","","An Xorshift[1] random number\ngenerator.",null,null],[3,"Open01","","A wrapper for generating floating point numbers uniformly in the\nopen interval `(0,1)` (not including either endpoint).",null,null],[3,"Closed01","","A wrapper for generating floating point numbers uniformly in the\nclosed interval `[0,1]` (including both endpoints).",null,null],[3,"StdRng","","The standard RNG. This is designed to be efficient on the current\nplatform.",null,null],[3,"ThreadRng","","The thread-local RNG.",null,null],[5,"weak_rng","","Create a weak random number generator with a default algorithm and seed.",null,{"inputs":[],"output":{"name":"xorshiftrng"}}],[5,"thread_rng","","Retrieve the lazily-initialized thread-local random number\ngenerator, seeded by the system. Intended to be used in method\nchaining style, e.g. `thread_rng().gen::&lt;i32&gt;()`.",null,{"inputs":[],"output":{"name":"threadrng"}}],[5,"random","","Generates a random value using the thread-local random number generator.",null,{"inputs":[],"output":{"name":"t"}}],[5,"sample","","Randomly sample up to `amount` elements from an iterator.",null,{"inputs":[{"name":"r"},{"name":"i"},{"name":"usize"}],"output":{"name":"vec"}}],[0,"distributions","","Sampling from random distributions.",null,null],[3,"RandSample","rand::distributions","A wrapper for generating types that implement `Rand` via the\n`Sample` &amp; `IndependentSample` traits.",null,null],[3,"Weighted","","A value with a particular weight for use with `WeightedChoice`.",null,null],[12,"weight","","The numerical weight of this item",0,null],[12,"item","","The actual item which is being weighted",0,null],[3,"WeightedChoice","","A distribution that selects from a finite collection of weighted items.",null,null],[0,"range","","Generating numbers between two others.",null,null],[3,"Range","rand::distributions::range","Sample values uniformly between two bounds.",null,null],[8,"SampleRange","","The helper trait for types that have a sensible way to sample\nuniformly between two values. This should not be used directly,\nand is only to facilitate `Range`.",null,null],[10,"construct_range","","Construct the `Range` object that `sample_range`\nrequires. This should not ever be called directly, only via\n`Range::new`, which will check that `low &lt; high`, so this\nfunction doesn&#39;t have to repeat the check.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"range"}}],[10,"sample_range","","Sample a value from the given `Range` with the given `Rng` as\na source of randomness.",1,{"inputs":[{"name":"range"},{"name":"r"}],"output":{"name":"self"}}],[11,"clone","","",2,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"new","","Create a new `Range` instance that samples uniformly from\n`[low, high)`. Panics if `low &gt;= high`.",2,{"inputs":[{"name":"x"},{"name":"x"}],"output":{"name":"range"}}],[11,"sample","","",2,{"inputs":[{"name":"range"},{"name":"r"}],"output":{"name":"sup"}}],[11,"ind_sample","","",2,{"inputs":[{"name":"range"},{"name":"r"}],"output":{"name":"sup"}}],[0,"gamma","rand::distributions","The Gamma and derived distributions.",null,null],[3,"Gamma","rand::distributions::gamma","The Gamma distribution `Gamma(shape, scale)` distribution.",null,null],[3,"ChiSquared","","The chi-squared distribution `χ²(k)`, where `k` is the degrees of\nfreedom.",null,null],[3,"FisherF","","The Fisher F distribution `F(m, n)`.",null,null],[3,"StudentT","","The Student t distribution, `t(nu)`, where `nu` is the degrees of\nfreedom.",null,null],[11,"clone","","",3,{"inputs":[{"name":"gamma"}],"output":{"name":"gamma"}}],[11,"new","","Construct an object representing the `Gamma(shape, scale)`\ndistribution.",3,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"gamma"}}],[11,"sample","","",3,{"inputs":[{"name":"gamma"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",3,{"inputs":[{"name":"gamma"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",4,{"inputs":[{"name":"chisquared"}],"output":{"name":"chisquared"}}],[11,"new","","Create a new chi-squared distribution with degrees-of-freedom\n`k`. Panics if `k &lt; 0`.",4,{"inputs":[{"name":"f64"}],"output":{"name":"chisquared"}}],[11,"sample","","",4,{"inputs":[{"name":"chisquared"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",4,{"inputs":[{"name":"chisquared"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",5,{"inputs":[{"name":"fisherf"}],"output":{"name":"fisherf"}}],[11,"new","","Create a new `FisherF` distribution, with the given\nparameter. Panics if either `m` or `n` are not positive.",5,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"fisherf"}}],[11,"sample","","",5,{"inputs":[{"name":"fisherf"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",5,{"inputs":[{"name":"fisherf"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",6,{"inputs":[{"name":"studentt"}],"output":{"name":"studentt"}}],[11,"new","","Create a new Student t distribution with `n` degrees of\nfreedom. Panics if `n &lt;= 0`.",6,{"inputs":[{"name":"f64"}],"output":{"name":"studentt"}}],[11,"sample","","",6,{"inputs":[{"name":"studentt"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",6,{"inputs":[{"name":"studentt"},{"name":"r"}],"output":{"name":"f64"}}],[0,"normal","rand::distributions","The normal and derived distributions.",null,null],[3,"StandardNormal","rand::distributions::normal","A wrapper around an `f64` to generate N(0, 1) random numbers\n(a.k.a.  a standard normal, or Gaussian).",null,null],[3,"Normal","","The normal distribution `N(mean, std_dev**2)`.",null,null],[3,"LogNormal","","The log-normal distribution `ln N(mean, std_dev**2)`.",null,null],[11,"clone","","",7,{"inputs":[{"name":"standardnormal"}],"output":{"name":"standardnormal"}}],[11,"rand","","",7,{"inputs":[{"name":"r"}],"output":{"name":"standardnormal"}}],[11,"clone","","",8,{"inputs":[{"name":"normal"}],"output":{"name":"normal"}}],[11,"new","","Construct a new `Normal` distribution with the given mean and\nstandard deviation.",8,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"normal"}}],[11,"sample","","",8,{"inputs":[{"name":"normal"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",8,{"inputs":[{"name":"normal"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",9,{"inputs":[{"name":"lognormal"}],"output":{"name":"lognormal"}}],[11,"new","","Construct a new `LogNormal` distribution with the given mean\nand standard deviation.",9,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"lognormal"}}],[11,"sample","","",9,{"inputs":[{"name":"lognormal"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",9,{"inputs":[{"name":"lognormal"},{"name":"r"}],"output":{"name":"f64"}}],[0,"exponential","rand::distributions","The exponential distribution.",null,null],[3,"Exp1","rand::distributions::exponential","A wrapper around an `f64` to generate Exp(1) random numbers.",null,null],[3,"Exp","","The exponential distribution `Exp(lambda)`.",null,null],[11,"clone","","",10,{"inputs":[{"name":"exp1"}],"output":{"name":"exp1"}}],[11,"rand","","",10,{"inputs":[{"name":"r"}],"output":{"name":"exp1"}}],[11,"clone","","",11,{"inputs":[{"name":"exp"}],"output":{"name":"exp"}}],[11,"new","","Construct a new `Exp` with the given shape parameter\n`lambda`. Panics if `lambda &lt;= 0`.",11,{"inputs":[{"name":"f64"}],"output":{"name":"exp"}}],[11,"sample","","",11,{"inputs":[{"name":"exp"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",11,{"inputs":[{"name":"exp"},{"name":"r"}],"output":{"name":"f64"}}],[8,"Sample","rand::distributions","Types that can be used to create a random instance of `Support`.",null,null],[10,"sample","","Generate a random value of `Support`, using `rng` as the\nsource of randomness.",12,{"inputs":[{"name":"sample"},{"name":"r"}],"output":{"name":"support"}}],[8,"IndependentSample","","`Sample`s that do not require keeping track of state.",null,null],[10,"ind_sample","","Generate a random value.",13,{"inputs":[{"name":"independentsample"},{"name":"r"}],"output":{"name":"support"}}],[11,"clone","","",14,{"inputs":[{"name":"randsample"}],"output":{"name":"self"}}],[11,"sample","","",14,{"inputs":[{"name":"randsample"},{"name":"r"}],"output":{"name":"sup"}}],[11,"ind_sample","","",14,{"inputs":[{"name":"randsample"},{"name":"r"}],"output":{"name":"sup"}}],[11,"new","","",14,{"inputs":[],"output":{"name":"randsample"}}],[11,"clone","","",0,{"inputs":[{"name":"weighted"}],"output":{"name":"weighted"}}],[11,"new","","Create a new `WeightedChoice`.",15,null],[11,"sample","","",15,{"inputs":[{"name":"weightedchoice"},{"name":"r"}],"output":{"name":"t"}}],[11,"ind_sample","","",15,{"inputs":[{"name":"weightedchoice"},{"name":"r"}],"output":{"name":"t"}}],[0,"isaac","rand","The ISAAC random number generator.",null,null],[3,"IsaacRng","rand::isaac","A random number generator that uses the ISAAC algorithm[1].",null,null],[3,"Isaac64Rng","","A random number generator that uses ISAAC-64[1], the 64-bit\nvariant of the ISAAC algorithm.",null,null],[11,"new_unseeded","","Create an ISAAC random number generator using the default\nfixed seed.",16,{"inputs":[],"output":{"name":"isaacrng"}}],[11,"clone","","",16,{"inputs":[{"name":"isaacrng"}],"output":{"name":"isaacrng"}}],[11,"next_u32","","",16,{"inputs":[{"name":"isaacrng"}],"output":{"name":"u32"}}],[11,"reseed","","",16,null],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can\nbe any length, although the maximum number of elements used is\n256 and any more will be silently ignored. A generator\nconstructed with a given seed will generate the same sequence\nof values as all other generators constructed with that seed.",16,null],[11,"rand","","",16,{"inputs":[{"name":"r"}],"output":{"name":"isaacrng"}}],[11,"new_unseeded","","Create a 64-bit ISAAC random number generator using the\ndefault fixed seed.",17,{"inputs":[],"output":{"name":"isaac64rng"}}],[11,"clone","","",17,{"inputs":[{"name":"isaac64rng"}],"output":{"name":"isaac64rng"}}],[11,"next_u32","","",17,{"inputs":[{"name":"isaac64rng"}],"output":{"name":"u32"}}],[11,"next_u64","","",17,{"inputs":[{"name":"isaac64rng"}],"output":{"name":"u64"}}],[11,"reseed","","",17,null],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can\nbe any length, although the maximum number of elements used is\n256 and any more will be silently ignored. A generator\nconstructed with a given seed will generate the same sequence\nof values as all other generators constructed with that seed.",17,null],[11,"rand","","",17,{"inputs":[{"name":"r"}],"output":{"name":"isaac64rng"}}],[0,"chacha","rand","The ChaCha random number generator.",null,null],[3,"ChaChaRng","rand::chacha","A random number generator that uses the ChaCha20 algorithm [1].",null,null],[11,"clone","","",18,{"inputs":[{"name":"chacharng"}],"output":{"name":"chacharng"}}],[11,"new_unseeded","","Create an ChaCha random number generator using the default\nfixed key of 8 zero words.",18,{"inputs":[],"output":{"name":"chacharng"}}],[11,"set_counter","","Sets the internal 128-bit ChaCha counter to\na user-provided value. This permits jumping\narbitrarily ahead (or backwards) in the pseudorandom stream.",18,{"inputs":[{"name":"chacharng"},{"name":"u64"},{"name":"u64"}],"output":null}],[11,"next_u32","","",18,{"inputs":[{"name":"chacharng"}],"output":{"name":"u32"}}],[11,"reseed","","",18,null],[11,"from_seed","","Create a ChaCha generator from a seed,\nobtained from a variable-length u32 array.\nOnly up to 8 words are used; if less than 8\nwords are used, the remaining are set to zero.",18,null],[11,"rand","","",18,{"inputs":[{"name":"r"}],"output":{"name":"chacharng"}}],[0,"reseeding","rand","A wrapper around another RNG that reseeds it after it\ngenerates a certain number of random bytes.",null,null],[3,"ReseedingRng","rand::reseeding","A wrapper around any RNG which reseeds the underlying RNG after it\nhas generated a certain number of random bytes.",null,null],[12,"reseeder","","Controls the behaviour when reseeding the RNG.",19,null],[3,"ReseedWithDefault","","Reseed an RNG using a `Default` instance. This reseeds by\nreplacing the RNG with the result of a `Default::default` call.",null,null],[8,"Reseeder","","Something that can be used to reseed an RNG via `ReseedingRng`.",null,null],[10,"reseed","","Reseed the given RNG.",20,{"inputs":[{"name":"reseeder"},{"name":"r"}],"output":null}],[11,"new","","Create a new `ReseedingRng` with the given parameters.",19,{"inputs":[{"name":"r"},{"name":"u64"},{"name":"rsdr"}],"output":{"name":"reseedingrng"}}],[11,"reseed_if_necessary","","Reseed the internal RNG if the number of bytes that have been\ngenerated exceed the threshold.",19,{"inputs":[{"name":"reseedingrng"}],"output":null}],[11,"next_u32","","",19,{"inputs":[{"name":"reseedingrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",19,{"inputs":[{"name":"reseedingrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",19,null],[11,"reseed","","",19,null],[11,"from_seed","","Create a new `ReseedingRng` from the given reseeder and\nseed. This uses a default value for `generation_threshold`.",19,null],[11,"clone","","",21,{"inputs":[{"name":"reseedwithdefault"}],"output":{"name":"reseedwithdefault"}}],[11,"reseed","","",21,{"inputs":[{"name":"reseedwithdefault"},{"name":"r"}],"output":null}],[11,"default","","",21,{"inputs":[],"output":{"name":"reseedwithdefault"}}],[11,"rand","rand","",22,{"inputs":[{"name":"r"}],"output":{"name":"open01"}}],[11,"rand","","",23,{"inputs":[{"name":"r"}],"output":{"name":"closed01"}}],[11,"rand","","",22,{"inputs":[{"name":"r"}],"output":{"name":"open01"}}],[11,"rand","","",23,{"inputs":[{"name":"r"}],"output":{"name":"closed01"}}],[11,"rand","core::option","",24,{"inputs":[{"name":"r"}],"output":{"name":"option"}}],[0,"os","rand","Interfaces to the operating system provided random number\ngenerators.",null,null],[3,"OsRng","rand::os","A random number generator that retrieves randomness straight from\nthe operating system. Platform sources:",null,null],[11,"new","","Create a new `OsRng`.",25,{"inputs":[],"output":{"name":"result"}}],[11,"next_u32","","",25,{"inputs":[{"name":"osrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",25,{"inputs":[{"name":"osrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",25,null],[0,"read","rand","A wrapper around any Read to treat it as an RNG.",null,null],[3,"ReadRng","rand::read","An RNG that reads random bytes straight from a `Read`. This will\nwork best with an infinite reader, but this is not required.",null,null],[11,"new","","Create a new `ReadRng` from a `Read`.",26,{"inputs":[{"name":"r"}],"output":{"name":"readrng"}}],[11,"next_u32","","",26,{"inputs":[{"name":"readrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",26,{"inputs":[{"name":"readrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",26,null],[8,"Rand","rand","A type that can be randomly generated using an `Rng`.",null,null],[10,"rand","","Generates a random instance of this type using the specified source of\nrandomness.",27,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[8,"Rng","","A random number generator.",null,null],[10,"next_u32","","Return the next random u32.",28,{"inputs":[{"name":"rng"}],"output":{"name":"u32"}}],[11,"next_u64","","Return the next random u64.",28,{"inputs":[{"name":"rng"}],"output":{"name":"u64"}}],[11,"next_f32","","Return the next random f32 selected from the half-open\ninterval `[0, 1)`.",28,{"inputs":[{"name":"rng"}],"output":{"name":"f32"}}],[11,"next_f64","","Return the next random f64 selected from the half-open\ninterval `[0, 1)`.",28,{"inputs":[{"name":"rng"}],"output":{"name":"f64"}}],[11,"fill_bytes","","Fill `dest` with random data.",28,null],[11,"gen","","Return a random value of a `Rand` type.",28,{"inputs":[{"name":"rng"}],"output":{"name":"t"}}],[11,"gen_iter","","Return an iterator that will yield an infinite number of randomly\ngenerated items.",28,{"inputs":[{"name":"rng"}],"output":{"name":"generator"}}],[11,"gen_range","","Generate a random value in the range [`low`, `high`).",28,{"inputs":[{"name":"rng"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[11,"gen_weighted_bool","","Return a bool with a 1 in n chance of true",28,{"inputs":[{"name":"rng"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"gen_ascii_chars","","Return an iterator of random characters from the set A-Z,a-z,0-9.",28,{"inputs":[{"name":"rng"}],"output":{"name":"asciigenerator"}}],[11,"choose","","Return a random element from `values`.",28,null],[11,"shuffle","","Shuffle a mutable slice in place.",28,null],[8,"SeedableRng","","A random number generator that can be explicitly seeded to produce\nthe same stream of randomness multiple times.",null,null],[10,"reseed","","Reseed an RNG with the given seed.",29,{"inputs":[{"name":"seedablerng"},{"name":"seed"}],"output":null}],[10,"from_seed","","Create a new RNG with the given seed.",29,{"inputs":[{"name":"seed"}],"output":{"name":"self"}}],[11,"next_u32","alloc::boxed","",30,{"inputs":[{"name":"box"}],"output":{"name":"u32"}}],[11,"next_u64","","",30,{"inputs":[{"name":"box"}],"output":{"name":"u64"}}],[11,"next_f32","","",30,{"inputs":[{"name":"box"}],"output":{"name":"f32"}}],[11,"next_f64","","",30,{"inputs":[{"name":"box"}],"output":{"name":"f64"}}],[11,"fill_bytes","","",30,null],[11,"next","rand","",31,{"inputs":[{"name":"generator"}],"output":{"name":"option"}}],[11,"next","","",32,{"inputs":[{"name":"asciigenerator"}],"output":{"name":"option"}}],[11,"clone","","",33,{"inputs":[{"name":"xorshiftrng"}],"output":{"name":"xorshiftrng"}}],[11,"new_unseeded","","Creates a new XorShiftRng instance which is not seeded.",33,{"inputs":[],"output":{"name":"xorshiftrng"}}],[11,"next_u32","","",33,{"inputs":[{"name":"xorshiftrng"}],"output":{"name":"u32"}}],[11,"reseed","","Reseed an XorShiftRng. This will panic if `seed` is entirely 0.",33,null],[11,"from_seed","","Create a new XorShiftRng. This will panic if `seed` is entirely 0.",33,null],[11,"rand","","",33,{"inputs":[{"name":"r"}],"output":{"name":"xorshiftrng"}}],[11,"clone","","",34,{"inputs":[{"name":"stdrng"}],"output":{"name":"stdrng"}}],[11,"new","","Create a randomly seeded instance of `StdRng`.",34,{"inputs":[],"output":{"name":"result"}}],[11,"next_u32","","",34,{"inputs":[{"name":"stdrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",34,{"inputs":[{"name":"stdrng"}],"output":{"name":"u64"}}],[11,"reseed","","",34,null],[11,"from_seed","","",34,null],[11,"clone","","",35,{"inputs":[{"name":"threadrng"}],"output":{"name":"threadrng"}}],[11,"next_u32","","",35,{"inputs":[{"name":"threadrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",35,{"inputs":[{"name":"threadrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",35,null]],"paths":[[3,"Weighted"],[8,"SampleRange"],[3,"Range"],[3,"Gamma"],[3,"ChiSquared"],[3,"FisherF"],[3,"StudentT"],[3,"StandardNormal"],[3,"Normal"],[3,"LogNormal"],[3,"Exp1"],[3,"Exp"],[8,"Sample"],[8,"IndependentSample"],[3,"RandSample"],[3,"WeightedChoice"],[3,"IsaacRng"],[3,"Isaac64Rng"],[3,"ChaChaRng"],[3,"ReseedingRng"],[8,"Reseeder"],[3,"ReseedWithDefault"],[3,"Open01"],[3,"Closed01"],[4,"Option"],[3,"OsRng"],[3,"ReadRng"],[8,"Rand"],[8,"Rng"],[8,"SeedableRng"],[3,"Box"],[3,"Generator"],[3,"AsciiGenerator"],[3,"XorShiftRng"],[3,"StdRng"],[3,"ThreadRng"]]};
searchIndex["timeit"] = {"doc":"This crate provides macros that make it easy to benchmark blocks of code. It is inspired and\nnamed after timeit from Python.","items":[[5,"get_time","timeit","A shortcut to time&#39;s `get_time` function. This is so that the user of timeit doesn&#39;t have to\nseparately add a dependency for the time crate.",null,{"inputs":[],"output":{"name":"timespec"}}],[14,"timeit_loops!","","Runs a block a specified number of times and returns the average time of execution.",null,null],[14,"timeit!","","Runs a block several times and outputs the average time per loop. The number of loops is\ndetermined automatically.",null,null]],"paths":[]};
searchIndex["time"] = {"doc":"Simple time handling.","items":[[3,"Duration","time","ISO 8601 time duration with nanosecond precision.\nThis also allows for the negative duration; see individual methods for details.",null,null],[3,"OutOfRangeError","","Represents error when converting `Duration` to/from a standard library\nimplementation",null,null],[3,"Timespec","","A record specifying a time value in seconds and nanoseconds, where\nnanoseconds represent the offset from the given second.",null,null],[12,"sec","","",0,null],[12,"nsec","","",0,null],[3,"PreciseTime","","An opaque structure representing a moment in time.",null,null],[3,"SteadyTime","","A structure representing a moment in time.",null,null],[3,"Tm","","Holds a calendar date and time broken down into its components (year, month,\nday, and so on), also called a broken-down time value.",null,null],[12,"tm_sec","","Seconds after the minute - [0, 60]",1,null],[12,"tm_min","","Minutes after the hour - [0, 59]",1,null],[12,"tm_hour","","Hours after midnight - [0, 23]",1,null],[12,"tm_mday","","Day of the month - [1, 31]",1,null],[12,"tm_mon","","Months since January - [0, 11]",1,null],[12,"tm_year","","Years since 1900",1,null],[12,"tm_wday","","Days since Sunday - [0, 6]. 0 = Sunday, 1 = Monday, ..., 6 = Saturday.",1,null],[12,"tm_yday","","Days since January 1 - [0, 365]",1,null],[12,"tm_isdst","","Daylight Saving Time flag.",1,null],[12,"tm_utcoff","","Identifies the time zone that was used to compute this broken-down time\nvalue, including any adjustment for Daylight Saving Time. This is the\nnumber of seconds east of UTC. For example, for U.S. Pacific Daylight\nTime, the value is -7*60*60 = -25200.",1,null],[12,"tm_nsec","","Nanoseconds after the second - [0, 10&lt;sup&gt;9&lt;/sup&gt; - 1]",1,null],[3,"TmFmt","","A wrapper around a `Tm` and format string that implements Display.",null,null],[4,"ParseError","","",null,null],[13,"InvalidSecond","","",2,null],[13,"InvalidMinute","","",2,null],[13,"InvalidHour","","",2,null],[13,"InvalidDay","","",2,null],[13,"InvalidMonth","","",2,null],[13,"InvalidYear","","",2,null],[13,"InvalidDayOfWeek","","",2,null],[13,"InvalidDayOfMonth","","",2,null],[13,"InvalidDayOfYear","","",2,null],[13,"InvalidZoneOffset","","",2,null],[13,"InvalidTime","","",2,null],[13,"InvalidSecondsSinceEpoch","","",2,null],[13,"MissingFormatConverter","","",2,null],[13,"InvalidFormatSpecifier","","",2,null],[13,"UnexpectedCharacter","","",2,null],[5,"strptime","","Parses the time from the string according to the format string.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[5,"get_time","","Returns the current time as a `timespec` containing the seconds and\nnanoseconds since 1970-01-01T00:00:00Z.",null,{"inputs":[],"output":{"name":"timespec"}}],[5,"precise_time_ns","","Returns the current value of a high-resolution performance counter\nin nanoseconds since an unspecified epoch.",null,{"inputs":[],"output":{"name":"u64"}}],[5,"precise_time_s","","Returns the current value of a high-resolution performance counter\nin seconds since an unspecified epoch.",null,{"inputs":[],"output":{"name":"f64"}}],[5,"tzset","","",null,{"inputs":[],"output":null}],[5,"empty_tm","","",null,{"inputs":[],"output":{"name":"tm"}}],[5,"at_utc","","Returns the specified time in UTC",null,{"inputs":[{"name":"timespec"}],"output":{"name":"tm"}}],[5,"now_utc","","Returns the current time in UTC",null,{"inputs":[],"output":{"name":"tm"}}],[5,"at","","Returns the specified time in the local timezone",null,{"inputs":[{"name":"timespec"}],"output":{"name":"tm"}}],[5,"now","","Returns the current time in the local timezone",null,{"inputs":[],"output":{"name":"tm"}}],[5,"strftime","","Formats the time according to the format string.",null,{"inputs":[{"name":"str"},{"name":"tm"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"tmfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"duration"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"option"}}],[11,"lt","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"le","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"gt","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ge","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"eq","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"duration"}],"output":{"name":"duration"}}],[11,"weeks","","Makes a new `Duration` with given number of weeks.\nEquivalent to `Duration::seconds(weeks * 7 * 24 * 60 * 60)` with overflow checks.\nPanics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"days","","Makes a new `Duration` with given number of days.\nEquivalent to `Duration::seconds(days * 24 * 60 * 60)` with overflow checks.\nPanics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"hours","","Makes a new `Duration` with given number of hours.\nEquivalent to `Duration::seconds(hours * 60 * 60)` with overflow checks.\nPanics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"minutes","","Makes a new `Duration` with given number of minutes.\nEquivalent to `Duration::seconds(minutes * 60)` with overflow checks.\nPanics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"seconds","","Makes a new `Duration` with given number of seconds.\nPanics when the duration is more than `i64::MAX` milliseconds\nor less than `i64::MIN` milliseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"milliseconds","","Makes a new `Duration` with given number of milliseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"microseconds","","Makes a new `Duration` with given number of microseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"nanoseconds","","Makes a new `Duration` with given number of nanoseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"span","","Runs a closure, returning the duration of time it took to run the\nclosure.",4,{"inputs":[{"name":"f"}],"output":{"name":"duration"}}],[11,"num_weeks","","Returns the total number of whole weeks in the duration.",4,{"inputs":[{"name":"duration"}],"output":{"name":"i64"}}],[11,"num_days","","Returns the total number of whole days in the duration.",4,{"inputs":[{"name":"duration"}],"output":{"name":"i64"}}],[11,"num_hours","","Returns the total number of whole hours in the duration.",4,{"inputs":[{"name":"duration"}],"output":{"name":"i64"}}],[11,"num_minutes","","Returns the total number of whole minutes in the duration.",4,{"inputs":[{"name":"duration"}],"output":{"name":"i64"}}],[11,"num_seconds","","Returns the total number of whole seconds in the duration.",4,{"inputs":[{"name":"duration"}],"output":{"name":"i64"}}],[11,"num_milliseconds","","Returns the total number of whole milliseconds in the duration,",4,{"inputs":[{"name":"duration"}],"output":{"name":"i64"}}],[11,"num_microseconds","","Returns the total number of whole microseconds in the duration,\nor `None` on overflow (exceeding 2^63 microseconds in either direction).",4,{"inputs":[{"name":"duration"}],"output":{"name":"option"}}],[11,"num_nanoseconds","","Returns the total number of whole nanoseconds in the duration,\nor `None` on overflow (exceeding 2^63 nanoseconds in either direction).",4,{"inputs":[{"name":"duration"}],"output":{"name":"option"}}],[11,"checked_add","","Add two durations, returning `None` if overflow occurred.",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"option"}}],[11,"checked_sub","","Subtract two durations, returning `None` if overflow occurred.",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"option"}}],[11,"min_value","","The minimum possible `Duration`: `i64::MIN` milliseconds.",4,{"inputs":[],"output":{"name":"duration"}}],[11,"max_value","","The maximum possible `Duration`: `i64::MAX` milliseconds.",4,{"inputs":[],"output":{"name":"duration"}}],[11,"zero","","A duration where the stored seconds and nanoseconds are equal to zero.",4,{"inputs":[],"output":{"name":"duration"}}],[11,"is_zero","","Returns `true` if the duration equals `Duration::zero()`.",4,{"inputs":[{"name":"duration"}],"output":{"name":"bool"}}],[11,"from_std","","Creates a `time::Duration` object from `std::time::Duration`",4,{"inputs":[{"name":"stdduration"}],"output":{"name":"result"}}],[11,"to_std","","Creates a `std::time::Duration` object from `time::Duration`",4,{"inputs":[{"name":"duration"}],"output":{"name":"result"}}],[11,"neg","","",4,{"inputs":[{"name":"duration"}],"output":{"name":"duration"}}],[11,"add","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"sub","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"mul","","",4,{"inputs":[{"name":"duration"},{"name":"i32"}],"output":{"name":"duration"}}],[11,"div","","",4,{"inputs":[{"name":"duration"},{"name":"i32"}],"output":{"name":"duration"}}],[11,"fmt","","",4,{"inputs":[{"name":"duration"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"outofrangeerror"},{"name":"outofrangeerror"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"outofrangeerror"},{"name":"outofrangeerror"}],"output":{"name":"bool"}}],[11,"clone","","",5,{"inputs":[{"name":"outofrangeerror"}],"output":{"name":"outofrangeerror"}}],[11,"fmt","","",5,{"inputs":[{"name":"outofrangeerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"outofrangeerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",5,{"inputs":[{"name":"outofrangeerror"}],"output":{"name":"str"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"timespec"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",0,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"timespec"}],"output":{"name":"timespec"}}],[11,"new","","",0,{"inputs":[{"name":"i64"},{"name":"i32"}],"output":{"name":"timespec"}}],[11,"add","","",0,{"inputs":[{"name":"timespec"},{"name":"duration"}],"output":{"name":"timespec"}}],[11,"sub","","",0,{"inputs":[{"name":"timespec"},{"name":"duration"}],"output":{"name":"timespec"}}],[11,"sub","","",0,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"duration"}}],[11,"clone","","",6,{"inputs":[{"name":"precisetime"}],"output":{"name":"precisetime"}}],[11,"now","","Returns a `PreciseTime` representing the current moment in time.",6,{"inputs":[],"output":{"name":"precisetime"}}],[11,"to","","Returns a `Duration` representing the span of time from the value of\n`self` to the value of `later`.",6,{"inputs":[{"name":"precisetime"},{"name":"precisetime"}],"output":{"name":"duration"}}],[11,"fmt","","",7,{"inputs":[{"name":"steadytime"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",7,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"cmp","","",7,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",7,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"option"}}],[11,"lt","","",7,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"le","","",7,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"gt","","",7,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"ge","","",7,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"clone","","",7,{"inputs":[{"name":"steadytime"}],"output":{"name":"steadytime"}}],[11,"now","","Returns a `SteadyTime` representing the current moment in time.",7,{"inputs":[],"output":{"name":"steadytime"}}],[11,"fmt","","",7,{"inputs":[{"name":"steadytime"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"sub","","",7,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"duration"}}],[11,"sub","","",7,{"inputs":[{"name":"steadytime"},{"name":"duration"}],"output":{"name":"steadytime"}}],[11,"add","","",7,{"inputs":[{"name":"steadytime"},{"name":"duration"}],"output":{"name":"steadytime"}}],[11,"hash","","",1,null],[11,"fmt","","",1,{"inputs":[{"name":"tm"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"tm"},{"name":"tm"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"tm"},{"name":"tm"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"tm"}],"output":{"name":"tm"}}],[11,"add","","The resulting Tm is in UTC.",1,{"inputs":[{"name":"tm"},{"name":"duration"}],"output":{"name":"tm"}}],[11,"sub","","The resulting Tm is in UTC.",1,{"inputs":[{"name":"tm"},{"name":"duration"}],"output":{"name":"tm"}}],[11,"sub","","",1,{"inputs":[{"name":"tm"},{"name":"tm"}],"output":{"name":"duration"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"tm"},{"name":"tm"}],"output":{"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"tm"},{"name":"tm"}],"output":{"name":"ordering"}}],[11,"to_timespec","","Convert time to the seconds from January 1, 1970",1,{"inputs":[{"name":"tm"}],"output":{"name":"timespec"}}],[11,"to_local","","Convert time to the local timezone",1,{"inputs":[{"name":"tm"}],"output":{"name":"tm"}}],[11,"to_utc","","Convert time to the UTC",1,{"inputs":[{"name":"tm"}],"output":{"name":"tm"}}],[11,"ctime","","Returns a TmFmt that outputs according to the `asctime` format in ISO\nC, in the local timezone.",1,{"inputs":[{"name":"tm"}],"output":{"name":"tmfmt"}}],[11,"asctime","","Returns a TmFmt that outputs according to the `asctime` format in ISO\nC.",1,{"inputs":[{"name":"tm"}],"output":{"name":"tmfmt"}}],[11,"strftime","","Formats the time according to the format string.",1,{"inputs":[{"name":"tm"},{"name":"str"}],"output":{"name":"result"}}],[11,"rfc822","","Returns a TmFmt that outputs according to RFC 822.",1,{"inputs":[{"name":"tm"}],"output":{"name":"tmfmt"}}],[11,"rfc822z","","Returns a TmFmt that outputs according to RFC 822 with Zulu time.",1,{"inputs":[{"name":"tm"}],"output":{"name":"tmfmt"}}],[11,"rfc3339","","Returns a TmFmt that outputs according to RFC 3339. RFC 3339 is\ncompatible with ISO 8601.",1,{"inputs":[{"name":"tm"}],"output":{"name":"tmfmt"}}],[11,"clone","","",2,{"inputs":[{"name":"parseerror"}],"output":{"name":"parseerror"}}],[11,"fmt","","",2,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"parseerror"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"parseerror"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",2,{"inputs":[{"name":"parseerror"}],"output":{"name":"str"}}],[11,"fmt","","",3,{"inputs":[{"name":"tmfmt"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"Timespec"],[3,"Tm"],[4,"ParseError"],[3,"TmFmt"],[3,"Duration"],[3,"OutOfRangeError"],[3,"PreciseTime"],[3,"SteadyTime"]]};
searchIndex["capnp"] = {"doc":"# Cap&#39;n Proto Runtime Library","items":[[3,"Word","capnp","Eight bytes of memory with opaque interior. Use [`capnp_word!()`](macro.capnp_word!.html)\nto construct one of these.",null,null],[3,"MessageSize","","Size of a message. Every generated struct has a method `.total_size()` that returns this.",null,null],[12,"word_count","","",0,null],[12,"cap_count","","Size of the capability table.",0,null],[3,"NotInSchema","","An enum value or union discriminant that was not found among those defined in a schema.",null,null],[3,"Error","","Describes an arbitrary error that prevented an operation from completing.",null,null],[12,"kind","","The type of the error. The purpose of this enum is not to describe the error itself, but\nrather to describe how the client might want to respond to the error.",1,null],[12,"description","","Human-readable failure description.",1,null],[4,"ErrorKind","","",null,null],[13,"Failed","","Something went wrong. This is the usual error kind. It includes decoding errors.",2,null],[13,"Overloaded","","The call failed because of a temporary lack of resources. This could be space resources\n(out of memory, out of disk space) or time resources (request queue overflow, operation\ntimed out).\nThe operation might work if tried again, but it should NOT be repeated immediately as this\nmay simply exacerbate the problem.",2,null],[13,"Disconnected","","The call required communication over a connection that has been lost. The callee will need\nto re-establish connections and try again.",2,null],[13,"Unimplemented","","The requested method is not implemented. The caller may wish to revert to a fallback\napproach based on other methods.",2,null],[4,"OutputSegments","","Helper struct that allows `MessageBuilder::get_segments_for_output()` to avoid heap allocations\nin the single-segment case.",null,null],[0,"any_pointer","","Dynamically typed value.",null,null],[3,"Owned","capnp::any_pointer","",null,null],[3,"Reader","","",null,null],[3,"Builder","","",null,null],[3,"Pipeline","","",null,null],[12,"hook","","",3,null],[11,"clone","","",4,{"inputs":[{"name":"owned"}],"output":{"name":"owned"}}],[11,"clone","","",5,{"inputs":[{"name":"reader"}],"output":{"name":"reader"}}],[11,"new","","",5,{"inputs":[{"name":"pointerreader"}],"output":{"name":"reader"}}],[11,"is_null","","",5,{"inputs":[{"name":"reader"}],"output":{"name":"bool"}}],[11,"total_size","","Gets the total size of the target and all of its children. Does not count far pointer overhead.",5,{"inputs":[{"name":"reader"}],"output":{"name":"result"}}],[11,"get_as","","",5,{"inputs":[{"name":"reader"}],"output":{"name":"result"}}],[11,"get_as_capability","","",5,{"inputs":[{"name":"reader"}],"output":{"name":"result"}}],[11,"get_pipelined_cap","","",5,null],[11,"get_from_pointer","","",5,{"inputs":[{"name":"pointerreader"}],"output":{"name":"result"}}],[11,"set_pointer_builder","","",5,{"inputs":[{"name":"pointerbuilder"},{"name":"reader"}],"output":{"name":"result"}}],[11,"imbue","","",5,{"inputs":[{"name":"reader"},{"name":"captable"}],"output":null}],[11,"new","","",6,{"inputs":[{"name":"pointerbuilder"}],"output":{"name":"builder"}}],[11,"borrow","","",6,{"inputs":[{"name":"builder"}],"output":{"name":"builder"}}],[11,"is_null","","",6,{"inputs":[{"name":"builder"}],"output":{"name":"bool"}}],[11,"total_size","","Gets the total size of the target and all of its children. Does not count far pointer overhead.",6,{"inputs":[{"name":"builder"}],"output":{"name":"result"}}],[11,"get_as","","",6,{"inputs":[{"name":"builder"}],"output":{"name":"result"}}],[11,"init_as","","",6,{"inputs":[{"name":"builder"}],"output":{"name":"t"}}],[11,"initn_as","","",6,{"inputs":[{"name":"builder"},{"name":"u32"}],"output":{"name":"t"}}],[11,"set_as","","",6,{"inputs":[{"name":"builder"},{"name":"from"}],"output":{"name":"result"}}],[11,"set_as_capability","","",6,{"inputs":[{"name":"builder"},{"name":"box"}],"output":null}],[11,"clear","","",6,{"inputs":[{"name":"builder"}],"output":null}],[11,"as_reader","","",6,{"inputs":[{"name":"builder"}],"output":{"name":"reader"}}],[11,"init_pointer","","",6,{"inputs":[{"name":"pointerbuilder"},{"name":"u32"}],"output":{"name":"builder"}}],[11,"get_from_pointer","","",6,{"inputs":[{"name":"pointerbuilder"}],"output":{"name":"result"}}],[11,"imbue_mut","","",6,{"inputs":[{"name":"builder"},{"name":"captable"}],"output":null}],[11,"new","","",3,{"inputs":[{"name":"box"}],"output":{"name":"pipeline"}}],[11,"noop","","",3,{"inputs":[{"name":"pipeline"}],"output":{"name":"pipeline"}}],[11,"get_pointer_field","","",3,{"inputs":[{"name":"pipeline"},{"name":"u16"}],"output":{"name":"pipeline"}}],[11,"as_cap","","",3,{"inputs":[{"name":"pipeline"}],"output":{"name":"box"}}],[11,"new","","",3,{"inputs":[{"name":"pipeline"}],"output":{"name":"pipeline"}}],[0,"capability","capnp","Hooks for for the RPC system.",null,null],[3,"Promise","capnp::capability","This fake Promise struct is defined so that the generated code for interfaces\ncan typecheck even if the &quot;rpc&quot; feature is not enabled.",null,null],[3,"RemotePromise","","",null,null],[12,"promise","","",7,null],[12,"pipeline","","",7,null],[3,"Response","","",null,null],[12,"marker","","",8,null],[12,"hook","","",8,null],[3,"Request","","",null,null],[12,"marker","","",9,null],[12,"hook","","",9,null],[3,"Params","","",null,null],[12,"marker","","",10,null],[12,"hook","","",10,null],[3,"Results","","",null,null],[12,"marker","","",11,null],[12,"hook","","",11,null],[3,"Client","","",null,null],[12,"hook","","",12,null],[8,"FromTypelessPipeline","","",null,null],[10,"new","","",13,{"inputs":[{"name":"pipeline"}],"output":{"name":"self"}}],[8,"FromClientHook","","",null,null],[10,"new","","",14,{"inputs":[{"name":"box"}],"output":{"name":"self"}}],[8,"Server","","",null,null],[10,"dispatch_call","","",15,{"inputs":[{"name":"server"},{"name":"u64"},{"name":"u16"},{"name":"params"},{"name":"results"}],"output":{"name":"promise"}}],[11,"ok","","",16,{"inputs":[{"name":"t"}],"output":{"name":"promise"}}],[11,"err","","",16,{"inputs":[{"name":"e"}],"output":{"name":"promise"}}],[11,"map","","",16,{"inputs":[{"name":"promise"},{"name":"f"}],"output":{"name":"promise"}}],[11,"then","","",16,{"inputs":[{"name":"promise"},{"name":"f"}],"output":{"name":"promise"}}],[11,"new","","",8,{"inputs":[{"name":"box"}],"output":{"name":"response"}}],[11,"get","","",8,{"inputs":[{"name":"response"}],"output":{"name":"result"}}],[11,"new","","",9,{"inputs":[{"name":"box"}],"output":{"name":"request"}}],[11,"get","","",9,null],[11,"set","","",9,null],[11,"new","","",10,{"inputs":[{"name":"box"}],"output":{"name":"params"}}],[11,"get","","",10,{"inputs":[{"name":"params"}],"output":{"name":"result"}}],[11,"new","","",11,{"inputs":[{"name":"box"}],"output":{"name":"results"}}],[11,"get","","",11,null],[11,"set","","",11,null],[11,"new","","",12,{"inputs":[{"name":"box"}],"output":{"name":"client"}}],[11,"new_call","","",12,{"inputs":[{"name":"client"},{"name":"u64"},{"name":"u16"},{"name":"option"}],"output":{"name":"request"}}],[11,"when_resolved","","If the capability is actually only a promise, the returned promise resolves once the\ncapability itself has resolved to its final destination (or propagates the exception if\nthe capability promise is rejected).  This is mainly useful for error-checking in the case\nwhere no calls are being made.  There is no reason to wait for this before making calls; if\nthe capability does not resolve, the call results will propagate the error.",12,{"inputs":[{"name":"client"}],"output":{"name":"promise"}}],[0,"data","capnp","Sequence of bytes.",null,null],[3,"Owned","capnp::data","",null,null],[5,"new_reader","","",null,null],[5,"new_builder","","",null,null],[6,"Reader","","",null,null],[6,"Builder","","",null,null],[11,"clone","","",17,{"inputs":[{"name":"owned"}],"output":{"name":"owned"}}],[11,"get_from_pointer","","",18,{"inputs":[{"name":"pointerreader"}],"output":{"name":"result"}}],[11,"init_pointer","","",19,{"inputs":[{"name":"pointerbuilder"},{"name":"u32"}],"output":{"name":"builder"}}],[11,"get_from_pointer","","",19,{"inputs":[{"name":"pointerbuilder"}],"output":{"name":"result"}}],[11,"set_pointer_builder","","",18,{"inputs":[{"name":"pointerbuilder"},{"name":"reader"}],"output":{"name":"result"}}],[0,"data_list","capnp","List of sequences of bytes.",null,null],[3,"Owned","capnp::data_list","",null,null],[3,"Reader","","",null,null],[12,"reader","","",20,null],[3,"Builder","","",null,null],[11,"clone","","",21,{"inputs":[{"name":"owned"}],"output":{"name":"owned"}}],[11,"clone","","",20,{"inputs":[{"name":"reader"}],"output":{"name":"reader"}}],[11,"new","","",20,{"inputs":[{"name":"listreader"}],"output":{"name":"reader"}}],[11,"len","","",20,{"inputs":[{"name":"reader"}],"output":{"name":"u32"}}],[11,"get_from_pointer","","",20,{"inputs":[{"name":"pointerreader"}],"output":{"name":"result"}}],[11,"get","","",20,{"inputs":[{"name":"reader"},{"name":"u32"}],"output":{"name":"result"}}],[11,"new","","",22,{"inputs":[{"name":"listbuilder"}],"output":{"name":"builder"}}],[11,"len","","",22,{"inputs":[{"name":"builder"}],"output":{"name":"u32"}}],[11,"set","","",22,{"inputs":[{"name":"builder"},{"name":"u32"},{"name":"reader"}],"output":null}],[11,"borrow","","",22,{"inputs":[{"name":"builder"}],"output":{"name":"builder"}}],[11,"init_pointer","","",22,{"inputs":[{"name":"pointerbuilder"},{"name":"u32"}],"output":{"name":"builder"}}],[11,"get_from_pointer","","",22,{"inputs":[{"name":"pointerbuilder"}],"output":{"name":"result"}}],[11,"get","","",22,{"inputs":[{"name":"builder"},{"name":"u32"}],"output":{"name":"result"}}],[11,"set_pointer_builder","","",20,{"inputs":[{"name":"pointerbuilder"},{"name":"reader"}],"output":{"name":"result"}}],[0,"enum_list","capnp","List of enums.",null,null],[3,"Owned","capnp::enum_list","",null,null],[3,"Reader","","",null,null],[3,"Builder","","",null,null],[11,"clone","","",23,{"inputs":[{"name":"owned"}],"output":{"name":"owned"}}],[11,"clone","","",24,{"inputs":[{"name":"reader"}],"output":{"name":"reader"}}],[11,"new","","",24,{"inputs":[{"name":"listreader"}],"output":{"name":"reader"}}],[11,"len","","",24,{"inputs":[{"name":"reader"}],"output":{"name":"u32"}}],[11,"get_from_pointer","","",24,{"inputs":[{"name":"pointerreader"}],"output":{"name":"result"}}],[11,"get","","",24,{"inputs":[{"name":"reader"},{"name":"u32"}],"output":{"name":"result"}}],[11,"new","","",25,{"inputs":[{"name":"listbuilder"}],"output":{"name":"builder"}}],[11,"len","","",25,{"inputs":[{"name":"builder"}],"output":{"name":"u32"}}],[11,"set","","",25,{"inputs":[{"name":"builder"},{"name":"u32"},{"name":"t"}],"output":null}],[11,"init_pointer","","",25,{"inputs":[{"name":"pointerbuilder"},{"name":"u32"}],"output":{"name":"builder"}}],[11,"get_from_pointer","","",25,{"inputs":[{"name":"pointerbuilder"}],"output":{"name":"result"}}],[11,"get","","",25,{"inputs":[{"name":"builder"},{"name":"u32"}],"output":{"name":"result"}}],[11,"set_pointer_builder","","",24,{"inputs":[{"name":"pointerbuilder"},{"name":"reader"}],"output":{"name":"result"}}],[0,"list_list","capnp","List of lists.",null,null],[3,"Owned","capnp::list_list","",null,null],[3,"Reader","","",null,null],[3,"Builder","","",null,null],[11,"clone","","",26,{"inputs":[{"name":"owned"}],"output":{"name":"owned"}}],[11,"new","","",27,{"inputs":[{"name":"listreader"}],"output":{"name":"reader"}}],[11,"len","","",27,{"inputs":[{"name":"reader"}],"output":{"name":"u32"}}],[11,"iter","","",27,{"inputs":[{"name":"reader"}],"output":{"name":"listiter"}}],[11,"clone","","",27,{"inputs":[{"name":"reader"}],"output":{"name":"reader"}}],[11,"index_move","","",27,{"inputs":[{"name":"reader"},{"name":"u32"}],"output":{"name":"result"}}],[11,"get_from_pointer","","",27,{"inputs":[{"name":"pointerreader"}],"output":{"name":"result"}}],[11,"get","","",27,{"inputs":[{"name":"reader"},{"name":"u32"}],"output":{"name":"result"}}],[11,"new","","",28,{"inputs":[{"name":"listbuilder"}],"output":{"name":"builder"}}],[11,"len","","",28,{"inputs":[{"name":"builder"}],"output":{"name":"u32"}}],[11,"init","","",28,null],[11,"borrow","","",28,{"inputs":[{"name":"builder"}],"output":{"name":"builder"}}],[11,"init_pointer","","",28,{"inputs":[{"name":"pointerbuilder"},{"name":"u32"}],"output":{"name":"builder"}}],[11,"get_from_pointer","","",28,{"inputs":[{"name":"pointerbuilder"}],"output":{"name":"result"}}],[11,"get","","",28,{"inputs":[{"name":"builder"},{"name":"u32"}],"output":{"name":"result"}}],[11,"set_pointer_builder","","",27,{"inputs":[{"name":"pointerbuilder"},{"name":"reader"}],"output":{"name":"result"}}],[0,"message","capnp","Untyped root container for a Cap&#39;n Proto value.",null,null],[3,"ReaderOptions","capnp::message","Options controlling how data is read.",null,null],[12,"traversal_limit_in_words","","Limits how many total words of data are allowed to be traversed. Traversal is counted when\na new struct or list builder is obtained, e.g. from a get() accessor. This means that calling\nthe getter for the same sub-struct multiple times will cause it to be double-counted. Once\nthe traversal limit is reached, an error will be reported.",29,null],[12,"nesting_limit","","Limits how deeply nested a message structure can be, e.g. structs containing other structs or\nlists of structs.",29,null],[3,"SegmentArray","","An array of segments.",null,null],[3,"Reader","","A container used to read a message.",null,null],[3,"Builder","","A container used to build a message.",null,null],[3,"HeapAllocator","","",null,null],[3,"ScratchSpace","","",null,null],[3,"ScratchSpaceHeapAllocator","","",null,null],[4,"AllocationStrategy","","",null,null],[13,"FixedSize","","",30,null],[13,"GrowHeuristically","","",30,null],[17,"DEFAULT_READER_OPTIONS","","",null,null],[17,"SUGGESTED_FIRST_SEGMENT_WORDS","","",null,null],[17,"SUGGESTED_ALLOCATION_STRATEGY","","",null,null],[8,"ReaderSegments","","An object that manages the buffers underlying a Cap&#39;n Proto message reader.",null,null],[10,"get_segment","","",31,{"inputs":[{"name":"readersegments"},{"name":"u32"}],"output":{"name":"option"}}],[8,"Allocator","","An object that allocates memory for a Cap&#39;n Proto message as it is being built.",null,null],[10,"allocate_segment","","Allocates memory for a new segment, returning a pointer to the start of the segment\nand a u32 indicating the length of the segment.",32,null],[11,"pre_drop","","",32,{"inputs":[{"name":"allocator"},{"name":"u32"}],"output":null}],[11,"clone","","",29,{"inputs":[{"name":"readeroptions"}],"output":{"name":"readeroptions"}}],[11,"default","","",29,{"inputs":[],"output":{"name":"readeroptions"}}],[11,"new","","",29,{"inputs":[],"output":{"name":"readeroptions"}}],[11,"nesting_limit","","",29,{"inputs":[{"name":"readeroptions"},{"name":"i32"}],"output":{"name":"readeroptions"}}],[11,"traversal_limit_in_words","","",29,{"inputs":[{"name":"readeroptions"},{"name":"u64"}],"output":{"name":"readeroptions"}}],[11,"new","","",33,null],[11,"get_segment","","",33,{"inputs":[{"name":"segmentarray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"new","","",34,{"inputs":[{"name":"s"},{"name":"readeroptions"}],"output":{"name":"reader"}}],[11,"get_root","","Gets the root of the message, interpreting it as the given type.",34,{"inputs":[{"name":"reader"}],"output":{"name":"result"}}],[11,"into_segments","","",34,{"inputs":[{"name":"reader"}],"output":{"name":"s"}}],[11,"new","","",35,{"inputs":[{"name":"a"}],"output":{"name":"builder"}}],[11,"init_root","","Initializes the root as a value of the given type.",35,{"inputs":[{"name":"builder"}],"output":{"name":"t"}}],[11,"get_root","","Gets the root, interpreting it as the given type.",35,{"inputs":[{"name":"builder"}],"output":{"name":"result"}}],[11,"get_root_as_reader","","",35,{"inputs":[{"name":"builder"}],"output":{"name":"result"}}],[11,"set_root","","Sets the root to a deep copy of the given value.",35,{"inputs":[{"name":"builder"},{"name":"from"}],"output":{"name":"result"}}],[11,"get_segments_for_output","","",35,{"inputs":[{"name":"builder"}],"output":{"name":"outputsegments"}}],[11,"drop","","",35,{"inputs":[{"name":"builder"}],"output":null}],[11,"clone","","",30,{"inputs":[{"name":"allocationstrategy"}],"output":{"name":"allocationstrategy"}}],[11,"new","","",36,{"inputs":[],"output":{"name":"heapallocator"}}],[11,"first_segment_words","","",36,{"inputs":[{"name":"heapallocator"},{"name":"u32"}],"output":{"name":"heapallocator"}}],[11,"allocation_strategy","","",36,{"inputs":[{"name":"heapallocator"},{"name":"allocationstrategy"}],"output":{"name":"heapallocator"}}],[11,"allocate_segment","","",36,null],[11,"new_default","","",35,{"inputs":[],"output":{"name":"builder"}}],[11,"new","","",37,null],[11,"new","","",38,{"inputs":[{"name":"scratchspace"}],"output":{"name":"scratchspaceheapallocator"}}],[11,"second_segment_words","","",38,{"inputs":[{"name":"scratchspaceheapallocator"},{"name":"u32"}],"output":{"name":"scratchspaceheapallocator"}}],[11,"allocation_strategy","","",38,{"inputs":[{"name":"scratchspaceheapallocator"},{"name":"allocationstrategy"}],"output":{"name":"scratchspaceheapallocator"}}],[11,"allocate_segment","","",38,null],[11,"pre_drop","","",38,{"inputs":[{"name":"scratchspaceheapallocator"},{"name":"u32"}],"output":null}],[0,"primitive_list","capnp","List of primitives.",null,null],[3,"Owned","capnp::primitive_list","",null,null],[3,"Reader","","",null,null],[3,"Builder","","",null,null],[11,"clone","","",39,{"inputs":[{"name":"owned"}],"output":{"name":"owned"}}],[11,"clone","","",40,{"inputs":[{"name":"reader"}],"output":{"name":"reader"}}],[11,"new","","",40,{"inputs":[{"name":"listreader"}],"output":{"name":"reader"}}],[11,"len","","",40,{"inputs":[{"name":"reader"}],"output":{"name":"u32"}}],[11,"get_from_pointer","","",40,{"inputs":[{"name":"pointerreader"}],"output":{"name":"result"}}],[11,"get","","",40,{"inputs":[{"name":"reader"},{"name":"u32"}],"output":{"name":"t"}}],[11,"new","","",41,{"inputs":[{"name":"listbuilder"}],"output":{"name":"builder"}}],[11,"len","","",41,{"inputs":[{"name":"builder"}],"output":{"name":"u32"}}],[11,"set","","",41,{"inputs":[{"name":"builder"},{"name":"u32"},{"name":"t"}],"output":null}],[11,"init_pointer","","",41,{"inputs":[{"name":"pointerbuilder"},{"name":"u32"}],"output":{"name":"builder"}}],[11,"get_from_pointer","","",41,{"inputs":[{"name":"pointerbuilder"}],"output":{"name":"result"}}],[11,"get","","",41,{"inputs":[{"name":"builder"},{"name":"u32"}],"output":{"name":"t"}}],[11,"set_pointer_builder","","",40,{"inputs":[{"name":"pointerbuilder"},{"name":"reader"}],"output":{"name":"result"}}],[0,"private","capnp","Implementation details that should never be directly used by clients.",null,null],[3,"AlignedData","capnp::private","Some data that&#39;s guaranteed to be aligned on a word boundary.",null,null],[12,"_dummy","","",42,null],[12,"data","","",42,null],[3,"RawSchema","","",null,null],[12,"blob","","",43,null],[0,"arena","","",null,null],[3,"SegmentReader","capnp::private::arena","",null,null],[12,"arena","","",44,null],[12,"ptr","","",44,null],[12,"size","","",44,null],[12,"read_limiter","","",44,null],[3,"SegmentBuilder","","",null,null],[12,"reader","","",45,null],[12,"id","","",45,null],[3,"ReadLimiter","","",null,null],[12,"limit","","",46,null],[3,"ReaderArena","","",null,null],[12,"segment0","","",47,null],[12,"more_segments","","",47,null],[12,"read_limiter","","",47,null],[3,"BuilderArena","","",null,null],[12,"segment0","","",48,null],[12,"more_segments","","",48,null],[12,"dummy_limiter","","",48,null],[4,"ArenaPtr","","",null,null],[13,"Reader","","",49,null],[13,"Builder","","",49,null],[13,"Null","","",49,null],[6,"SegmentId","","",null,null],[11,"get_start_ptr","","",44,null],[11,"contains_interval","","",44,null],[11,"amplified_read","","",44,{"inputs":[{"name":"segmentreader"},{"name":"u64"}],"output":{"name":"bool"}}],[11,"new","","",45,null],[11,"get_word_offset_to","","",45,null],[11,"current_size","","",45,{"inputs":[{"name":"segmentbuilder"}],"output":{"name":"wordcount32"}}],[11,"allocate","","",45,{"inputs":[{"name":"segmentbuilder"},{"name":"wordcount32"}],"output":{"name":"option"}}],[11,"get_ptr_unchecked","","",45,null],[11,"get_segment_id","","",45,{"inputs":[{"name":"segmentbuilder"}],"output":{"name":"segmentid"}}],[11,"get_arena","","",45,null],[11,"currently_allocated","","",45,null],[11,"new","","",46,{"inputs":[{"name":"u64"}],"output":{"name":"readlimiter"}}],[11,"can_read","","",46,{"inputs":[{"name":"readlimiter"},{"name":"u64"}],"output":{"name":"bool"}}],[11,"new","","",47,{"inputs":[{"name":"readersegments"},{"name":"readeroptions"}],"output":{"name":"box"}}],[11,"new","","",48,{"inputs":[{"name":"allocator"}],"output":{"name":"box"}}],[11,"try_get_segment","","",48,{"inputs":[{"name":"builderarena"},{"name":"segmentid"}],"output":{"name":"result"}}],[11,"allocate","","",48,null],[11,"get_segment","","",48,{"inputs":[{"name":"builderarena"},{"name":"segmentid"}],"output":{"name":"result"}}],[11,"get_segments_for_output","","",48,{"inputs":[{"name":"builderarena"}],"output":{"name":"outputsegments"}}],[11,"clone","","",49,{"inputs":[{"name":"arenaptr"}],"output":{"name":"arenaptr"}}],[11,"try_get_segment","","",49,{"inputs":[{"name":"arenaptr"},{"name":"segmentid"}],"output":{"name":"result"}}],[0,"capability","capnp::private","",null,null],[4,"PipelineOp","capnp::private::capability","",null,null],[13,"Noop","","",50,null],[13,"GetPointerField","","",50,null],[5,"internal_get_typed_params","","",null,{"inputs":[{"name":"params"}],"output":{"name":"params"}}],[5,"internal_get_typed_results","","",null,{"inputs":[{"name":"results"}],"output":{"name":"results"}}],[5,"internal_get_untyped_results","","",null,{"inputs":[{"name":"results"}],"output":{"name":"results"}}],[8,"ResponseHook","","",null,null],[10,"get","","",51,{"inputs":[{"name":"responsehook"}],"output":{"name":"result"}}],[8,"RequestHook","","",null,null],[10,"get","","",52,{"inputs":[{"name":"requesthook"}],"output":{"name":"builder"}}],[10,"get_brand","","",52,{"inputs":[{"name":"requesthook"}],"output":{"name":"usize"}}],[10,"send","","",52,{"inputs":[{"name":"requesthook"}],"output":{"name":"remotepromise"}}],[10,"tail_send","","",52,{"inputs":[{"name":"requesthook"}],"output":{"name":"option"}}],[8,"ClientHook","","",null,null],[10,"add_ref","","",53,{"inputs":[{"name":"clienthook"}],"output":{"name":"box"}}],[10,"new_call","","",53,{"inputs":[{"name":"clienthook"},{"name":"u64"},{"name":"u16"},{"name":"option"}],"output":{"name":"request"}}],[10,"call","","",53,null],[10,"get_brand","","",53,{"inputs":[{"name":"clienthook"}],"output":{"name":"usize"}}],[10,"get_ptr","","",53,{"inputs":[{"name":"clienthook"}],"output":{"name":"usize"}}],[10,"get_resolved","","If this ClientHook is a promise that has already resolved, returns the inner, resolved version\nof the capability.  The caller may permanently replace this client with the resolved one if\ndesired.  Returns null if the client isn&#39;t a promise or hasn&#39;t resolved yet -- use\n`whenMoreResolved()` to distinguish between them.",53,{"inputs":[{"name":"clienthook"}],"output":{"name":"option"}}],[10,"when_more_resolved","","If this client is a settled reference (not a promise), return nullptr.  Otherwise, return a\npromise that eventually resolves to a new client that is closer to being the final, settled\nclient (i.e. the value eventually returned by `getResolved()`).  Calling this repeatedly\nshould eventually produce a settled client.",53,{"inputs":[{"name":"clienthook"}],"output":{"name":"option"}}],[11,"when_resolved","","Repeatedly calls whenMoreResolved() until it returns nullptr.",53,{"inputs":[{"name":"clienthook"}],"output":{"name":"promise"}}],[8,"ServerHook","","",null,null],[10,"new_client","","",54,{"inputs":[{"name":"box"}],"output":{"name":"client"}}],[8,"ResultsHook","","",null,null],[10,"get","","",55,{"inputs":[{"name":"resultshook"}],"output":{"name":"result"}}],[10,"allow_cancellation","","",55,{"inputs":[{"name":"resultshook"}],"output":null}],[10,"tail_call","","",55,{"inputs":[{"name":"resultshook"},{"name":"box"}],"output":{"name":"promise"}}],[10,"direct_tail_call","","",55,null],[8,"ResultsDoneHook","","",null,null],[10,"add_ref","","",56,{"inputs":[{"name":"resultsdonehook"}],"output":{"name":"box"}}],[10,"get","","",56,{"inputs":[{"name":"resultsdonehook"}],"output":{"name":"result"}}],[8,"ParamsHook","","",null,null],[10,"get","","",57,{"inputs":[{"name":"paramshook"}],"output":{"name":"result"}}],[8,"PipelineHook","","",null,null],[10,"add_ref","","",58,{"inputs":[{"name":"pipelinehook"}],"output":{"name":"box"}}],[10,"get_pipelined_cap","","",58,null],[11,"get_pipelined_cap_move","","Version of get_pipelined_cap() passing the array by move. May avoid a copy in some cases.\nDefault implementation just calls the other version.",58,{"inputs":[{"name":"pipelinehook"},{"name":"vec"}],"output":{"name":"box"}}],[11,"clone","alloc::boxed","",59,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"clone","","",59,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"clone","","",59,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"clone","capnp::private::capability","",50,{"inputs":[{"name":"pipelineop"}],"output":{"name":"pipelineop"}}],[0,"endian","capnp::private","",null,null],[3,"WireValue","capnp::private::endian","",null,null],[8,"Endian","","",null,null],[10,"get","","",60,{"inputs":[{"name":"endian"}],"output":{"name":"self"}}],[10,"set","","",60,{"inputs":[{"name":"endian"},{"name":"self"}],"output":null}],[11,"get","","",61,{"inputs":[{"name":"wirevalue"}],"output":{"name":"t"}}],[11,"set","","",61,{"inputs":[{"name":"wirevalue"},{"name":"t"}],"output":null}],[0,"layout","capnp::private","",null,null],[3,"StructSize","capnp::private::layout","",null,null],[12,"data","","",62,null],[12,"pointers","","",62,null],[3,"WirePointer","","",null,null],[3,"StructRef","","",null,null],[3,"ListRef","","",null,null],[3,"FarRef","","",null,null],[3,"CapRef","","",null,null],[3,"PointerReader","","",null,null],[3,"PointerBuilder","","",null,null],[3,"StructReader","","",null,null],[3,"StructBuilder","","",null,null],[3,"ListReader","","",null,null],[3,"ListBuilder","","",null,null],[4,"ElementSize","","",null,null],[13,"Void","","",63,null],[13,"Bit","","",63,null],[13,"Byte","","",63,null],[13,"TwoBytes","","",63,null],[13,"FourBytes","","",63,null],[13,"EightBytes","","",63,null],[13,"Pointer","","",63,null],[13,"InlineComposite","","",63,null],[4,"WirePointerKind","","",null,null],[13,"Struct","","",64,null],[13,"List","","",64,null],[13,"Far","","",64,null],[13,"Other","","",64,null],[4,"CapTableReader","","",null,null],[13,"Dummy","","",65,null],[13,"Plain","","",65,null],[4,"CapTableBuilder","","",null,null],[13,"Dummy","","",66,null],[13,"Plain","","",66,null],[5,"data_bits_per_element","","",null,{"inputs":[{"name":"elementsize"}],"output":{"name":"bitcount32"}}],[5,"pointers_per_element","","",null,{"inputs":[{"name":"elementsize"}],"output":{"name":"wirepointercount32"}}],[6,"CapTable","","",null,null],[8,"PrimitiveElement","","",null,null],[11,"get","","",67,{"inputs":[{"name":"listreader"},{"name":"elementcount32"}],"output":{"name":"self"}}],[11,"get_from_builder","","",67,{"inputs":[{"name":"listbuilder"},{"name":"elementcount32"}],"output":{"name":"self"}}],[11,"set","","",67,{"inputs":[{"name":"listbuilder"},{"name":"elementcount32"},{"name":"self"}],"output":null}],[11,"element_size","","",67,{"inputs":[],"output":{"name":"elementsize"}}],[11,"eq","","",63,{"inputs":[{"name":"elementsize"},{"name":"elementsize"}],"output":{"name":"bool"}}],[11,"ne","","",63,{"inputs":[{"name":"elementsize"},{"name":"elementsize"}],"output":{"name":"bool"}}],[11,"clone","","",63,{"inputs":[{"name":"elementsize"}],"output":{"name":"elementsize"}}],[11,"clone","","",62,{"inputs":[{"name":"structsize"}],"output":{"name":"structsize"}}],[11,"total","","",62,{"inputs":[{"name":"structsize"}],"output":{"name":"wordcount32"}}],[11,"eq","","",64,{"inputs":[{"name":"wirepointerkind"},{"name":"wirepointerkind"}],"output":{"name":"bool"}}],[11,"ne","","",64,{"inputs":[{"name":"wirepointerkind"},{"name":"wirepointerkind"}],"output":{"name":"bool"}}],[11,"clone","","",64,{"inputs":[{"name":"wirepointerkind"}],"output":{"name":"wirepointerkind"}}],[11,"word_size","","",68,{"inputs":[{"name":"structref"}],"output":{"name":"wordcount32"}}],[11,"set_from_struct_size","","",68,{"inputs":[{"name":"structref"},{"name":"structsize"}],"output":null}],[11,"set","","",68,{"inputs":[{"name":"structref"},{"name":"wordcount16"},{"name":"wirepointercount16"}],"output":null}],[11,"element_size","","",69,{"inputs":[{"name":"listref"}],"output":{"name":"elementsize"}}],[11,"element_count","","",69,{"inputs":[{"name":"listref"}],"output":{"name":"elementcount32"}}],[11,"inline_composite_word_count","","",69,{"inputs":[{"name":"listref"}],"output":{"name":"wordcount32"}}],[11,"set","","",69,{"inputs":[{"name":"listref"},{"name":"elementsize"},{"name":"elementcount32"}],"output":null}],[11,"set_inline_composite","","",69,{"inputs":[{"name":"listref"},{"name":"wordcount32"}],"output":null}],[11,"set","","",70,{"inputs":[{"name":"farref"},{"name":"segmentid"}],"output":null}],[11,"set","","",71,{"inputs":[{"name":"capref"},{"name":"u32"}],"output":null}],[11,"kind","","",72,{"inputs":[{"name":"wirepointer"}],"output":{"name":"wirepointerkind"}}],[11,"is_capability","","",72,{"inputs":[{"name":"wirepointer"}],"output":{"name":"bool"}}],[11,"target","","",72,null],[11,"mut_target","","",72,null],[11,"set_kind_and_target","","",72,null],[11,"set_kind_with_zero_offset","","",72,{"inputs":[{"name":"wirepointer"},{"name":"wirepointerkind"}],"output":null}],[11,"set_kind_and_target_for_empty_struct","","",72,{"inputs":[{"name":"wirepointer"}],"output":null}],[11,"inline_composite_list_element_count","","",72,{"inputs":[{"name":"wirepointer"}],"output":{"name":"elementcount32"}}],[11,"set_kind_and_inline_composite_list_element_count","","",72,{"inputs":[{"name":"wirepointer"},{"name":"wirepointerkind"},{"name":"elementcount32"}],"output":null}],[11,"far_position_in_segment","","",72,{"inputs":[{"name":"wirepointer"}],"output":{"name":"wordcount32"}}],[11,"is_double_far","","",72,{"inputs":[{"name":"wirepointer"}],"output":{"name":"bool"}}],[11,"set_far","","",72,{"inputs":[{"name":"wirepointer"},{"name":"bool"},{"name":"wordcount32"}],"output":null}],[11,"set_cap","","",72,{"inputs":[{"name":"wirepointer"},{"name":"u32"}],"output":null}],[11,"struct_ref","","",72,{"inputs":[{"name":"wirepointer"}],"output":{"name":"structref"}}],[11,"mut_struct_ref","","",72,{"inputs":[{"name":"wirepointer"}],"output":{"name":"structref"}}],[11,"list_ref","","",72,{"inputs":[{"name":"wirepointer"}],"output":{"name":"listref"}}],[11,"mut_list_ref","","",72,{"inputs":[{"name":"wirepointer"}],"output":{"name":"listref"}}],[11,"far_ref","","",72,{"inputs":[{"name":"wirepointer"}],"output":{"name":"farref"}}],[11,"mut_far_ref","","",72,{"inputs":[{"name":"wirepointer"}],"output":{"name":"farref"}}],[11,"cap_ref","","",72,{"inputs":[{"name":"wirepointer"}],"output":{"name":"capref"}}],[11,"mut_cap_ref","","",72,{"inputs":[{"name":"wirepointer"}],"output":{"name":"capref"}}],[11,"is_null","","",72,{"inputs":[{"name":"wirepointer"}],"output":{"name":"bool"}}],[11,"clone","","",65,{"inputs":[{"name":"captablereader"}],"output":{"name":"captablereader"}}],[11,"extract_cap","","",65,{"inputs":[{"name":"captablereader"},{"name":"usize"}],"output":{"name":"option"}}],[11,"clone","","",66,{"inputs":[{"name":"captablebuilder"}],"output":{"name":"captablebuilder"}}],[11,"as_reader","","",66,{"inputs":[{"name":"captablebuilder"}],"output":{"name":"captablereader"}}],[11,"extract_cap","","",66,{"inputs":[{"name":"captablebuilder"},{"name":"usize"}],"output":{"name":"option"}}],[11,"inject_cap","","",66,{"inputs":[{"name":"captablebuilder"},{"name":"box"}],"output":{"name":"usize"}}],[11,"drop_cap","","",66,{"inputs":[{"name":"captablebuilder"},{"name":"usize"}],"output":null}],[11,"clone","","",73,{"inputs":[{"name":"pointerreader"}],"output":{"name":"pointerreader"}}],[11,"new_default","","",73,{"inputs":[],"output":{"name":"pointerreader"}}],[11,"get_root","","",73,null],[11,"get_root_unchecked","","",73,null],[11,"imbue","","",73,{"inputs":[{"name":"pointerreader"},{"name":"captablereader"}],"output":null}],[11,"is_null","","",73,{"inputs":[{"name":"pointerreader"}],"output":{"name":"bool"}}],[11,"total_size","","",73,{"inputs":[{"name":"pointerreader"}],"output":{"name":"result"}}],[11,"get_struct","","",73,null],[11,"get_list","","",73,null],[11,"get_text","","",73,null],[11,"get_data","","",73,null],[11,"get_capability","","",73,{"inputs":[{"name":"pointerreader"}],"output":{"name":"result"}}],[11,"clone","","",74,{"inputs":[{"name":"pointerbuilder"}],"output":{"name":"pointerbuilder"}}],[11,"get_root","","",74,null],[11,"borrow","","",74,{"inputs":[{"name":"pointerbuilder"}],"output":{"name":"pointerbuilder"}}],[11,"imbue","","",74,{"inputs":[{"name":"pointerbuilder"},{"name":"captablebuilder"}],"output":null}],[11,"is_null","","",74,{"inputs":[{"name":"pointerbuilder"}],"output":{"name":"bool"}}],[11,"get_struct","","",74,null],[11,"get_list","","",74,null],[11,"get_struct_list","","",74,null],[11,"get_text","","",74,null],[11,"get_data","","",74,null],[11,"get_capability","","",74,{"inputs":[{"name":"pointerbuilder"}],"output":{"name":"result"}}],[11,"init_struct","","",74,{"inputs":[{"name":"pointerbuilder"},{"name":"structsize"}],"output":{"name":"structbuilder"}}],[11,"init_list","","",74,{"inputs":[{"name":"pointerbuilder"},{"name":"elementsize"},{"name":"elementcount32"}],"output":{"name":"listbuilder"}}],[11,"init_struct_list","","",74,{"inputs":[{"name":"pointerbuilder"},{"name":"elementcount32"},{"name":"structsize"}],"output":{"name":"listbuilder"}}],[11,"init_text","","",74,{"inputs":[{"name":"pointerbuilder"},{"name":"bytecount32"}],"output":{"name":"builder"}}],[11,"init_data","","",74,{"inputs":[{"name":"pointerbuilder"},{"name":"bytecount32"}],"output":{"name":"builder"}}],[11,"set_struct","","",74,{"inputs":[{"name":"pointerbuilder"},{"name":"structreader"}],"output":{"name":"result"}}],[11,"set_list","","",74,{"inputs":[{"name":"pointerbuilder"},{"name":"listreader"}],"output":{"name":"result"}}],[11,"set_text","","",74,{"inputs":[{"name":"pointerbuilder"},{"name":"str"}],"output":null}],[11,"set_data","","",74,null],[11,"set_capability","","",74,{"inputs":[{"name":"pointerbuilder"},{"name":"box"}],"output":null}],[11,"copy_from","","",74,{"inputs":[{"name":"pointerbuilder"},{"name":"pointerreader"}],"output":{"name":"result"}}],[11,"clear","","",74,{"inputs":[{"name":"pointerbuilder"}],"output":null}],[11,"as_reader","","",74,{"inputs":[{"name":"pointerbuilder"}],"output":{"name":"pointerreader"}}],[11,"clone","","",75,{"inputs":[{"name":"structreader"}],"output":{"name":"structreader"}}],[11,"new_default","","",75,{"inputs":[],"output":{"name":"structreader"}}],[11,"imbue","","",75,{"inputs":[{"name":"structreader"},{"name":"captablereader"}],"output":null}],[11,"get_data_section_size","","",75,{"inputs":[{"name":"structreader"}],"output":{"name":"bitcount32"}}],[11,"get_pointer_section_size","","",75,{"inputs":[{"name":"structreader"}],"output":{"name":"wirepointercount16"}}],[11,"get_data_section_as_blob","","",75,{"inputs":[{"name":"structreader"}],"output":{"name":"usize"}}],[11,"get_data_field","","",75,{"inputs":[{"name":"structreader"},{"name":"elementcount"}],"output":{"name":"t"}}],[11,"get_bool_field","","",75,{"inputs":[{"name":"structreader"},{"name":"elementcount"}],"output":{"name":"bool"}}],[11,"get_data_field_mask","","",75,null],[11,"get_bool_field_mask","","",75,{"inputs":[{"name":"structreader"},{"name":"elementcount"},{"name":"bool"}],"output":{"name":"bool"}}],[11,"get_pointer_field","","",75,{"inputs":[{"name":"structreader"},{"name":"wirepointercount"}],"output":{"name":"pointerreader"}}],[11,"total_size","","",75,{"inputs":[{"name":"structreader"}],"output":{"name":"result"}}],[11,"clone","","",76,{"inputs":[{"name":"structbuilder"}],"output":{"name":"structbuilder"}}],[11,"as_reader","","",76,{"inputs":[{"name":"structbuilder"}],"output":{"name":"structreader"}}],[11,"imbue","","",76,{"inputs":[{"name":"structbuilder"},{"name":"captablebuilder"}],"output":null}],[11,"set_data_field","","",76,{"inputs":[{"name":"structbuilder"},{"name":"elementcount"},{"name":"t"}],"output":null}],[11,"set_data_field_mask","","",76,null],[11,"get_data_field","","",76,{"inputs":[{"name":"structbuilder"},{"name":"elementcount"}],"output":{"name":"t"}}],[11,"get_data_field_mask","","",76,null],[11,"set_bool_field","","",76,{"inputs":[{"name":"structbuilder"},{"name":"elementcount"},{"name":"bool"}],"output":null}],[11,"set_bool_field_mask","","",76,{"inputs":[{"name":"structbuilder"},{"name":"elementcount"},{"name":"bool"},{"name":"bool"}],"output":null}],[11,"get_bool_field","","",76,{"inputs":[{"name":"structbuilder"},{"name":"elementcount"}],"output":{"name":"bool"}}],[11,"get_bool_field_mask","","",76,{"inputs":[{"name":"structbuilder"},{"name":"elementcount"},{"name":"bool"}],"output":{"name":"bool"}}],[11,"get_pointer_field","","",76,{"inputs":[{"name":"structbuilder"},{"name":"wirepointercount"}],"output":{"name":"pointerbuilder"}}],[11,"clone","","",77,{"inputs":[{"name":"listreader"}],"output":{"name":"listreader"}}],[11,"new_default","","",77,{"inputs":[],"output":{"name":"listreader"}}],[11,"imbue","","",77,{"inputs":[{"name":"listreader"},{"name":"captablereader"}],"output":null}],[11,"len","","",77,{"inputs":[{"name":"listreader"}],"output":{"name":"elementcount32"}}],[11,"get_struct_element","","",77,{"inputs":[{"name":"listreader"},{"name":"elementcount32"}],"output":{"name":"structreader"}}],[11,"get_pointer_element","","",77,{"inputs":[{"name":"listreader"},{"name":"elementcount32"}],"output":{"name":"pointerreader"}}],[11,"clone","","",78,{"inputs":[{"name":"listbuilder"}],"output":{"name":"listbuilder"}}],[11,"new_default","","",78,{"inputs":[],"output":{"name":"listbuilder"}}],[11,"imbue","","",78,{"inputs":[{"name":"listbuilder"},{"name":"captablebuilder"}],"output":null}],[11,"len","","",78,{"inputs":[{"name":"listbuilder"}],"output":{"name":"elementcount32"}}],[11,"get_struct_element","","",78,{"inputs":[{"name":"listbuilder"},{"name":"elementcount32"}],"output":{"name":"structbuilder"}}],[11,"get_pointer_element","","",78,{"inputs":[{"name":"listbuilder"},{"name":"elementcount32"}],"output":{"name":"pointerbuilder"}}],[0,"units","capnp::private","",null,null],[5,"_bytes_per_element","capnp::private::units","",null,{"inputs":[],"output":{"name":"bytecount"}}],[5,"bits_per_element","","",null,{"inputs":[],"output":{"name":"bitcount0"}}],[6,"BitCount0","","",null,null],[6,"BitCount8","","",null,null],[6,"BitCount16","","",null,null],[6,"BitCount32","","",null,null],[6,"BitCount64","","",null,null],[6,"ByteCount","","",null,null],[6,"ByteCount8","","",null,null],[6,"ByteCount16","","",null,null],[6,"ByteCount32","","",null,null],[6,"ByteCount64","","",null,null],[6,"WordCount","","",null,null],[6,"WordCount8","","",null,null],[6,"WordCount16","","",null,null],[6,"WordCount32","","",null,null],[6,"WordCount64","","",null,null],[6,"ElementCount","","",null,null],[6,"ElementCount8","","",null,null],[6,"ElementCount16","","",null,null],[6,"ElementCount32","","",null,null],[6,"ElementCount64","","",null,null],[6,"WirePointerCount","","",null,null],[6,"WirePointerCount8","","",null,null],[6,"WirePointerCount16","","",null,null],[6,"WirePointerCount32","","",null,null],[6,"WirePointerCount64","","",null,null],[17,"BITS_PER_BYTE","","",null,null],[17,"BITS_PER_WORD","","",null,null],[17,"BYTES_PER_WORD","","",null,null],[17,"BITS_PER_POINTER","","",null,null],[17,"_BYTES_PER_POINTER","","",null,null],[17,"WORDS_PER_POINTER","","",null,null],[17,"POINTER_SIZE_IN_WORDS","","",null,null],[0,"serialize","capnp","Reading and writing of messages using the\n[standard stream framing](https://capnproto.org/encoding.html#serialization-over-a-stream).",null,null],[3,"SliceSegments","capnp::serialize","Segments read from a single flat slice of words.",null,null],[3,"OwnedSegments","","",null,null],[5,"read_message_from_words","","Reads a serialized message from a slice of words.",null,null],[5,"read_message","","Reads a serialized message from a stream with the provided options.",null,{"inputs":[{"name":"r"},{"name":"readeroptions"}],"output":{"name":"result"}}],[5,"write_message_to_words","","Constructs a flat vector containing the entire message.",null,{"inputs":[{"name":"builder"}],"output":{"name":"vec"}}],[5,"write_message","","Writes the provided message to `write`.",null,{"inputs":[{"name":"w"},{"name":"builder"}],"output":{"name":"result"}}],[5,"compute_serialized_size_in_words","","Returns the number of words required to serialize the message.",null,{"inputs":[{"name":"builder"}],"output":{"name":"usize"}}],[11,"get_segment","","",79,{"inputs":[{"name":"slicesegments"},{"name":"u32"}],"output":{"name":"option"}}],[11,"get_segment","","",80,{"inputs":[{"name":"ownedsegments"},{"name":"u32"}],"output":{"name":"option"}}],[0,"serialize_packed","capnp","Reading and writing of messages using the\n[packed stream encoding](https://capnproto.org/encoding.html#packing).",null,null],[5,"read_message","capnp::serialize_packed","Reads a packed message from a stream using the provided options.",null,{"inputs":[{"name":"r"},{"name":"readeroptions"}],"output":{"name":"result"}}],[5,"write_message","","Writes a packed message to a stream.",null,{"inputs":[{"name":"w"},{"name":"builder"}],"output":{"name":"result"}}],[0,"struct_list","capnp","List of structs.",null,null],[3,"Owned","capnp::struct_list","",null,null],[3,"Reader","","",null,null],[3,"Builder","","",null,null],[11,"clone","","",81,{"inputs":[{"name":"owned"}],"output":{"name":"owned"}}],[11,"clone","","",82,{"inputs":[{"name":"reader"}],"output":{"name":"reader"}}],[11,"new","","",82,{"inputs":[{"name":"listreader"}],"output":{"name":"reader"}}],[11,"len","","",82,{"inputs":[{"name":"reader"}],"output":{"name":"u32"}}],[11,"iter","","",82,{"inputs":[{"name":"reader"}],"output":{"name":"listiter"}}],[11,"borrow","","",82,{"inputs":[{"name":"reader"}],"output":{"name":"reader"}}],[11,"get_from_pointer","","",82,{"inputs":[{"name":"pointerreader"}],"output":{"name":"result"}}],[11,"index_move","","",82,null],[11,"get","","",82,null],[11,"new","","",83,{"inputs":[{"name":"listbuilder"}],"output":{"name":"builder"}}],[11,"len","","",83,{"inputs":[{"name":"builder"}],"output":{"name":"u32"}}],[11,"borrow","","",83,{"inputs":[{"name":"builder"}],"output":{"name":"builder"}}],[11,"init_pointer","","",83,{"inputs":[{"name":"pointerbuilder"},{"name":"u32"}],"output":{"name":"builder"}}],[11,"get_from_pointer","","",83,{"inputs":[{"name":"pointerbuilder"}],"output":{"name":"result"}}],[11,"get","","",83,null],[11,"set_pointer_builder","","",82,{"inputs":[{"name":"pointerbuilder"},{"name":"reader"}],"output":{"name":"result"}}],[0,"text","capnp","UTF-8 encoded text.",null,null],[3,"Owned","capnp::text","",null,null],[3,"Builder","","",null,null],[5,"new_reader","","",null,null],[6,"Reader","","",null,null],[11,"clone","","",84,{"inputs":[{"name":"owned"}],"output":{"name":"owned"}}],[11,"get_from_pointer","","",85,{"inputs":[{"name":"pointerreader"}],"output":{"name":"result"}}],[11,"new","","",86,null],[11,"push_ascii","","",86,{"inputs":[{"name":"builder"},{"name":"u8"}],"output":null}],[11,"push_str","","",86,{"inputs":[{"name":"builder"},{"name":"str"}],"output":null}],[11,"clear","","",86,{"inputs":[{"name":"builder"}],"output":null}],[11,"deref","","",86,{"inputs":[{"name":"builder"}],"output":{"name":"str"}}],[11,"as_ref","","",86,{"inputs":[{"name":"builder"}],"output":{"name":"str"}}],[11,"init_pointer","","",86,{"inputs":[{"name":"pointerbuilder"},{"name":"u32"}],"output":{"name":"builder"}}],[11,"get_from_pointer","","",86,{"inputs":[{"name":"pointerbuilder"}],"output":{"name":"result"}}],[11,"set_pointer_builder","","",85,{"inputs":[{"name":"pointerbuilder"},{"name":"reader"}],"output":{"name":"result"}}],[0,"text_list","capnp","List of strings containing UTF-8 encoded text.",null,null],[3,"Owned","capnp::text_list","",null,null],[3,"Reader","","",null,null],[3,"Builder","","",null,null],[11,"clone","","",87,{"inputs":[{"name":"owned"}],"output":{"name":"owned"}}],[11,"clone","","",88,{"inputs":[{"name":"reader"}],"output":{"name":"reader"}}],[11,"new","","",88,{"inputs":[{"name":"listreader"}],"output":{"name":"reader"}}],[11,"len","","",88,{"inputs":[{"name":"reader"}],"output":{"name":"u32"}}],[11,"get_from_pointer","","",88,{"inputs":[{"name":"pointerreader"}],"output":{"name":"result"}}],[11,"get","","",88,{"inputs":[{"name":"reader"},{"name":"u32"}],"output":{"name":"result"}}],[11,"new","","",89,{"inputs":[{"name":"listbuilder"}],"output":{"name":"builder"}}],[11,"len","","",89,{"inputs":[{"name":"builder"}],"output":{"name":"u32"}}],[11,"set","","",89,{"inputs":[{"name":"builder"},{"name":"u32"},{"name":"reader"}],"output":null}],[11,"borrow","","",89,{"inputs":[{"name":"builder"}],"output":{"name":"builder"}}],[11,"init_pointer","","",89,{"inputs":[{"name":"pointerbuilder"},{"name":"u32"}],"output":{"name":"builder"}}],[11,"get_from_pointer","","",89,{"inputs":[{"name":"pointerbuilder"}],"output":{"name":"result"}}],[11,"get","","",89,{"inputs":[{"name":"builder"},{"name":"u32"}],"output":{"name":"result"}}],[11,"set_pointer_builder","","",88,{"inputs":[{"name":"pointerbuilder"},{"name":"reader"}],"output":{"name":"result"}}],[0,"traits","capnp","",null,null],[3,"ListIter","capnp::traits","",null,null],[8,"FromStructReader","","",null,null],[10,"new","","",90,{"inputs":[{"name":"structreader"}],"output":{"name":"self"}}],[8,"HasStructSize","","",null,null],[10,"struct_size","","",91,{"inputs":[],"output":{"name":"structsize"}}],[8,"FromStructBuilder","","",null,null],[10,"new","","",92,{"inputs":[{"name":"structbuilder"}],"output":{"name":"self"}}],[8,"FromPointerReader","","",null,null],[10,"get_from_pointer","","",93,{"inputs":[{"name":"pointerreader"}],"output":{"name":"result"}}],[8,"Owned","","Associated types hackery that allows us to reason about Cap&#39;n Proto types\nwithout needing to give them a lifetime `&#39;a`.",null,null],[16,"Reader","","",94,null],[16,"Builder","","",94,null],[8,"OwnedStruct","","",null,null],[16,"Reader","","",95,null],[16,"Builder","","",95,null],[8,"Pipelined","","",null,null],[16,"Pipeline","","",96,null],[8,"FromPointerReaderRefDefault","","",null,null],[10,"get_from_pointer","","",97,null],[8,"FromPointerBuilder","","",null,null],[10,"init_pointer","","",98,{"inputs":[{"name":"pointerbuilder"},{"name":"u32"}],"output":{"name":"self"}}],[10,"get_from_pointer","","",98,{"inputs":[{"name":"pointerbuilder"}],"output":{"name":"result"}}],[8,"FromPointerBuilderRefDefault","","",null,null],[10,"get_from_pointer","","",99,null],[8,"SetPointerBuilder","","",null,null],[10,"set_pointer_builder","","",100,{"inputs":[{"name":"pointerbuilder"},{"name":"self"}],"output":{"name":"result"}}],[8,"Imbue","","",null,null],[10,"imbue","","",101,{"inputs":[{"name":"imbue"},{"name":"captable"}],"output":null}],[8,"ImbueMut","","",null,null],[10,"imbue_mut","","",102,{"inputs":[{"name":"imbuemut"},{"name":"captable"}],"output":null}],[8,"HasTypeId","","",null,null],[10,"type_id","","",103,{"inputs":[],"output":{"name":"u64"}}],[8,"ToU16","","",null,null],[10,"to_u16","","",104,{"inputs":[{"name":"tou16"}],"output":{"name":"u16"}}],[8,"FromU16","","",null,null],[10,"from_u16","","",105,{"inputs":[{"name":"u16"}],"output":{"name":"result"}}],[8,"IndexMove","","",null,null],[10,"index_move","","",106,{"inputs":[{"name":"indexmove"},{"name":"i"}],"output":{"name":"t"}}],[11,"new","","",107,{"inputs":[{"name":"t"},{"name":"u32"}],"output":{"name":"listiter"}}],[11,"next","","",107,{"inputs":[{"name":"listiter"}],"output":{"name":"option"}}],[6,"Result","capnp","Because messages are lazily validated, the return type of any method that reads a pointer field\nmust be wrapped in a Result.",null,null],[11,"eq","","",108,{"inputs":[{"name":"word"},{"name":"word"}],"output":{"name":"bool"}}],[11,"ne","","",108,{"inputs":[{"name":"word"},{"name":"word"}],"output":{"name":"bool"}}],[11,"fmt","","",108,{"inputs":[{"name":"word"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",108,{"inputs":[{"name":"word"}],"output":{"name":"word"}}],[11,"allocate_zeroed_vec","","Does this, but faster:\n`::std::iter::repeat(Word(0)).take(length).collect()`",108,{"inputs":[{"name":"usize"}],"output":{"name":"vec"}}],[11,"bytes_to_words","","",108,null],[11,"bytes_to_words_mut","","",108,null],[11,"words_to_bytes","","",108,null],[11,"words_to_bytes_mut","","",108,null],[11,"eq","","",0,{"inputs":[{"name":"messagesize"},{"name":"messagesize"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"messagesize"},{"name":"messagesize"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"messagesize"}],"output":{"name":"messagesize"}}],[11,"plus_eq","","",0,{"inputs":[{"name":"messagesize"},{"name":"messagesize"}],"output":null}],[11,"fmt","","",109,{"inputs":[{"name":"notinschema"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",109,{"inputs":[{"name":"notinschema"}],"output":{"name":"notinschema"}}],[11,"eq","","",109,{"inputs":[{"name":"notinschema"},{"name":"notinschema"}],"output":{"name":"bool"}}],[11,"ne","","",109,{"inputs":[{"name":"notinschema"},{"name":"notinschema"}],"output":{"name":"bool"}}],[11,"fmt","","",109,{"inputs":[{"name":"notinschema"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",109,{"inputs":[{"name":"notinschema"}],"output":{"name":"str"}}],[11,"clone","","",1,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"fmt","","",1,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"errorkind"},{"name":"errorkind"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"errorkind"},{"name":"errorkind"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"errorkind"}],"output":{"name":"errorkind"}}],[11,"fmt","","",2,{"inputs":[{"name":"errorkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"failed","","",1,{"inputs":[{"name":"string"}],"output":{"name":"error"}}],[11,"overloaded","","",1,{"inputs":[{"name":"string"}],"output":{"name":"error"}}],[11,"disconnected","","",1,{"inputs":[{"name":"string"}],"output":{"name":"error"}}],[11,"unimplemented","","",1,{"inputs":[{"name":"string"}],"output":{"name":"error"}}],[11,"from","","",1,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"from","","",1,{"inputs":[{"name":"notinschema"}],"output":{"name":"error"}}],[11,"fmt","","",1,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",1,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"cause","","",1,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"deref","","",110,null],[14,"capnp_word!","","Constructs a [`Word`](struct.Word.html) from its constituent bytes.\nThis macro can be used to construct constants. In the future, when\nRust supports [constant functions](https://github.com/rust-lang/rust/issues/24111),\n this macro will be replaced by such a function.",null,null]],"paths":[[3,"MessageSize"],[3,"Error"],[4,"ErrorKind"],[3,"Pipeline"],[3,"Owned"],[3,"Reader"],[3,"Builder"],[3,"RemotePromise"],[3,"Response"],[3,"Request"],[3,"Params"],[3,"Results"],[3,"Client"],[8,"FromTypelessPipeline"],[8,"FromClientHook"],[8,"Server"],[3,"Promise"],[3,"Owned"],[6,"Reader"],[6,"Builder"],[3,"Reader"],[3,"Owned"],[3,"Builder"],[3,"Owned"],[3,"Reader"],[3,"Builder"],[3,"Owned"],[3,"Reader"],[3,"Builder"],[3,"ReaderOptions"],[4,"AllocationStrategy"],[8,"ReaderSegments"],[8,"Allocator"],[3,"SegmentArray"],[3,"Reader"],[3,"Builder"],[3,"HeapAllocator"],[3,"ScratchSpace"],[3,"ScratchSpaceHeapAllocator"],[3,"Owned"],[3,"Reader"],[3,"Builder"],[3,"AlignedData"],[3,"RawSchema"],[3,"SegmentReader"],[3,"SegmentBuilder"],[3,"ReadLimiter"],[3,"ReaderArena"],[3,"BuilderArena"],[4,"ArenaPtr"],[4,"PipelineOp"],[8,"ResponseHook"],[8,"RequestHook"],[8,"ClientHook"],[8,"ServerHook"],[8,"ResultsHook"],[8,"ResultsDoneHook"],[8,"ParamsHook"],[8,"PipelineHook"],[3,"Box"],[8,"Endian"],[3,"WireValue"],[3,"StructSize"],[4,"ElementSize"],[4,"WirePointerKind"],[4,"CapTableReader"],[4,"CapTableBuilder"],[8,"PrimitiveElement"],[3,"StructRef"],[3,"ListRef"],[3,"FarRef"],[3,"CapRef"],[3,"WirePointer"],[3,"PointerReader"],[3,"PointerBuilder"],[3,"StructReader"],[3,"StructBuilder"],[3,"ListReader"],[3,"ListBuilder"],[3,"SliceSegments"],[3,"OwnedSegments"],[3,"Owned"],[3,"Reader"],[3,"Builder"],[3,"Owned"],[6,"Reader"],[3,"Builder"],[3,"Owned"],[3,"Reader"],[3,"Builder"],[8,"FromStructReader"],[8,"HasStructSize"],[8,"FromStructBuilder"],[8,"FromPointerReader"],[8,"Owned"],[8,"OwnedStruct"],[8,"Pipelined"],[8,"FromPointerReaderRefDefault"],[8,"FromPointerBuilder"],[8,"FromPointerBuilderRefDefault"],[8,"SetPointerBuilder"],[8,"Imbue"],[8,"ImbueMut"],[8,"HasTypeId"],[8,"ToU16"],[8,"FromU16"],[8,"IndexMove"],[3,"ListIter"],[3,"Word"],[3,"NotInSchema"],[4,"OutputSegments"]]};
searchIndex["libc"] = {"doc":"Crate docs","items":[[3,"utimbuf","libc","",null,null],[12,"actime","","",0,null],[12,"modtime","","",0,null],[3,"timeval","","",null,null],[12,"tv_sec","","",1,null],[12,"tv_usec","","",1,null],[3,"timespec","","",null,null],[12,"tv_sec","","",2,null],[12,"tv_nsec","","",2,null],[3,"rlimit","","",null,null],[12,"rlim_cur","","",3,null],[12,"rlim_max","","",3,null],[3,"rusage","","",null,null],[12,"ru_utime","","",4,null],[12,"ru_stime","","",4,null],[12,"ru_maxrss","","",4,null],[12,"ru_ixrss","","",4,null],[12,"ru_idrss","","",4,null],[12,"ru_isrss","","",4,null],[12,"ru_minflt","","",4,null],[12,"ru_majflt","","",4,null],[12,"ru_nswap","","",4,null],[12,"ru_inblock","","",4,null],[12,"ru_oublock","","",4,null],[12,"ru_msgsnd","","",4,null],[12,"ru_msgrcv","","",4,null],[12,"ru_nsignals","","",4,null],[12,"ru_nvcsw","","",4,null],[12,"ru_nivcsw","","",4,null],[3,"in_addr","","",null,null],[12,"s_addr","","",5,null],[3,"in6_addr","","",null,null],[12,"s6_addr","","",6,null],[3,"ip_mreq","","",null,null],[12,"imr_multiaddr","","",7,null],[12,"imr_interface","","",7,null],[3,"ipv6_mreq","","",null,null],[12,"ipv6mr_multiaddr","","",8,null],[12,"ipv6mr_interface","","",8,null],[3,"hostent","","",null,null],[12,"h_name","","",9,null],[12,"h_aliases","","",9,null],[12,"h_addrtype","","",9,null],[12,"h_length","","",9,null],[12,"h_addr_list","","",9,null],[3,"iovec","","",null,null],[12,"iov_base","","",10,null],[12,"iov_len","","",10,null],[3,"pollfd","","",null,null],[12,"fd","","",11,null],[12,"events","","",11,null],[12,"revents","","",11,null],[3,"winsize","","",null,null],[12,"ws_row","","",12,null],[12,"ws_col","","",12,null],[12,"ws_xpixel","","",12,null],[12,"ws_ypixel","","",12,null],[3,"sockaddr","","",null,null],[12,"sa_family","","",13,null],[12,"sa_data","","",13,null],[3,"sockaddr_in","","",null,null],[12,"sin_family","","",14,null],[12,"sin_port","","",14,null],[12,"sin_addr","","",14,null],[12,"sin_zero","","",14,null],[3,"sockaddr_in6","","",null,null],[12,"sin6_family","","",15,null],[12,"sin6_port","","",15,null],[12,"sin6_flowinfo","","",15,null],[12,"sin6_addr","","",15,null],[12,"sin6_scope_id","","",15,null],[3,"sockaddr_un","","",null,null],[12,"sun_family","","",16,null],[12,"sun_path","","",16,null],[3,"sockaddr_storage","","",null,null],[12,"ss_family","","",17,null],[3,"addrinfo","","",null,null],[12,"ai_flags","","",18,null],[12,"ai_family","","",18,null],[12,"ai_socktype","","",18,null],[12,"ai_protocol","","",18,null],[12,"ai_addrlen","","",18,null],[12,"ai_addr","","",18,null],[12,"ai_canonname","","",18,null],[12,"ai_next","","",18,null],[3,"sockaddr_nl","","",null,null],[12,"nl_family","","",19,null],[12,"nl_pid","","",19,null],[12,"nl_groups","","",19,null],[3,"sockaddr_ll","","",null,null],[12,"sll_family","","",20,null],[12,"sll_protocol","","",20,null],[12,"sll_ifindex","","",20,null],[12,"sll_hatype","","",20,null],[12,"sll_pkttype","","",20,null],[12,"sll_halen","","",20,null],[12,"sll_addr","","",20,null],[3,"fd_set","","",null,null],[3,"tm","","",null,null],[12,"tm_sec","","",21,null],[12,"tm_min","","",21,null],[12,"tm_hour","","",21,null],[12,"tm_mday","","",21,null],[12,"tm_mon","","",21,null],[12,"tm_year","","",21,null],[12,"tm_wday","","",21,null],[12,"tm_yday","","",21,null],[12,"tm_isdst","","",21,null],[12,"tm_gmtoff","","",21,null],[12,"tm_zone","","",21,null],[3,"sched_param","","",null,null],[12,"sched_priority","","",22,null],[3,"Dl_info","","",null,null],[12,"dli_fname","","",23,null],[12,"dli_fbase","","",23,null],[12,"dli_sname","","",23,null],[12,"dli_saddr","","",23,null],[3,"epoll_event","","",null,null],[12,"events","","",24,null],[12,"u64","","",24,null],[3,"utsname","","",null,null],[12,"sysname","","",25,null],[12,"nodename","","",25,null],[12,"release","","",25,null],[12,"version","","",25,null],[12,"machine","","",25,null],[12,"domainname","","",25,null],[3,"lconv","","",null,null],[12,"decimal_point","","",26,null],[12,"thousands_sep","","",26,null],[12,"grouping","","",26,null],[12,"int_curr_symbol","","",26,null],[12,"currency_symbol","","",26,null],[12,"mon_decimal_point","","",26,null],[12,"mon_thousands_sep","","",26,null],[12,"mon_grouping","","",26,null],[12,"positive_sign","","",26,null],[12,"negative_sign","","",26,null],[12,"int_frac_digits","","",26,null],[12,"frac_digits","","",26,null],[12,"p_cs_precedes","","",26,null],[12,"p_sep_by_space","","",26,null],[12,"n_cs_precedes","","",26,null],[12,"n_sep_by_space","","",26,null],[12,"p_sign_posn","","",26,null],[12,"n_sign_posn","","",26,null],[12,"int_p_cs_precedes","","",26,null],[12,"int_p_sep_by_space","","",26,null],[12,"int_n_cs_precedes","","",26,null],[12,"int_n_sep_by_space","","",26,null],[12,"int_p_sign_posn","","",26,null],[12,"int_n_sign_posn","","",26,null],[3,"dirent","","",null,null],[12,"d_ino","","",27,null],[12,"d_off","","",27,null],[12,"d_reclen","","",27,null],[12,"d_type","","",27,null],[12,"d_name","","",27,null],[3,"dirent64","","",null,null],[12,"d_ino","","",28,null],[12,"d_off","","",28,null],[12,"d_reclen","","",28,null],[12,"d_type","","",28,null],[12,"d_name","","",28,null],[3,"rlimit64","","",null,null],[12,"rlim_cur","","",29,null],[12,"rlim_max","","",29,null],[3,"glob_t","","",null,null],[12,"gl_pathc","","",30,null],[12,"gl_pathv","","",30,null],[12,"gl_offs","","",30,null],[12,"gl_flags","","",30,null],[3,"ifaddrs","","",null,null],[12,"ifa_next","","",31,null],[12,"ifa_name","","",31,null],[12,"ifa_flags","","",31,null],[12,"ifa_addr","","",31,null],[12,"ifa_netmask","","",31,null],[12,"ifa_ifu","","",31,null],[12,"ifa_data","","",31,null],[3,"pthread_mutex_t","","",null,null],[3,"pthread_rwlock_t","","",null,null],[3,"pthread_mutexattr_t","","",null,null],[3,"pthread_cond_t","","",null,null],[3,"passwd","","",null,null],[12,"pw_name","","",32,null],[12,"pw_passwd","","",32,null],[12,"pw_uid","","",32,null],[12,"pw_gid","","",32,null],[12,"pw_gecos","","",32,null],[12,"pw_dir","","",32,null],[12,"pw_shell","","",32,null],[3,"statvfs","","",null,null],[12,"f_bsize","","",33,null],[12,"f_frsize","","",33,null],[12,"f_blocks","","",33,null],[12,"f_bfree","","",33,null],[12,"f_bavail","","",33,null],[12,"f_files","","",33,null],[12,"f_ffree","","",33,null],[12,"f_favail","","",33,null],[12,"f_fsid","","",33,null],[12,"f_flag","","",33,null],[12,"f_namemax","","",33,null],[3,"dqblk","","",null,null],[12,"dqb_bhardlimit","","",34,null],[12,"dqb_bsoftlimit","","",34,null],[12,"dqb_curspace","","",34,null],[12,"dqb_ihardlimit","","",34,null],[12,"dqb_isoftlimit","","",34,null],[12,"dqb_curinodes","","",34,null],[12,"dqb_btime","","",34,null],[12,"dqb_itime","","",34,null],[12,"dqb_valid","","",34,null],[3,"signalfd_siginfo","","",null,null],[12,"ssi_signo","","",35,null],[12,"ssi_errno","","",35,null],[12,"ssi_code","","",35,null],[12,"ssi_pid","","",35,null],[12,"ssi_uid","","",35,null],[12,"ssi_fd","","",35,null],[12,"ssi_tid","","",35,null],[12,"ssi_band","","",35,null],[12,"ssi_overrun","","",35,null],[12,"ssi_trapno","","",35,null],[12,"ssi_status","","",35,null],[12,"ssi_int","","",35,null],[12,"ssi_ptr","","",35,null],[12,"ssi_utime","","",35,null],[12,"ssi_stime","","",35,null],[12,"ssi_addr","","",35,null],[3,"fsid_t","","",null,null],[3,"mq_attr","","",null,null],[12,"mq_flags","","",36,null],[12,"mq_maxmsg","","",36,null],[12,"mq_msgsize","","",36,null],[12,"mq_curmsgs","","",36,null],[3,"cpu_set_t","","",null,null],[3,"sigaction","","",null,null],[12,"sa_sigaction","","",37,null],[12,"sa_mask","","",37,null],[12,"sa_flags","","",37,null],[3,"stack_t","","",null,null],[12,"ss_sp","","",38,null],[12,"ss_flags","","",38,null],[12,"ss_size","","",38,null],[3,"siginfo_t","","",null,null],[12,"si_signo","","",39,null],[12,"si_errno","","",39,null],[12,"si_code","","",39,null],[12,"_pad","","",39,null],[3,"glob64_t","","",null,null],[12,"gl_pathc","","",40,null],[12,"gl_pathv","","",40,null],[12,"gl_offs","","",40,null],[12,"gl_flags","","",40,null],[3,"ucred","","",null,null],[12,"pid","","",41,null],[12,"uid","","",41,null],[12,"gid","","",41,null],[3,"statfs","","",null,null],[12,"f_type","","",42,null],[12,"f_bsize","","",42,null],[12,"f_blocks","","",42,null],[12,"f_bfree","","",42,null],[12,"f_bavail","","",42,null],[12,"f_files","","",42,null],[12,"f_ffree","","",42,null],[12,"f_fsid","","",42,null],[12,"f_namelen","","",42,null],[12,"f_frsize","","",42,null],[3,"msghdr","","",null,null],[12,"msg_name","","",43,null],[12,"msg_namelen","","",43,null],[12,"msg_iov","","",43,null],[12,"msg_iovlen","","",43,null],[12,"msg_control","","",43,null],[12,"msg_controllen","","",43,null],[12,"msg_flags","","",43,null],[3,"termios","","",null,null],[12,"c_iflag","","",44,null],[12,"c_oflag","","",44,null],[12,"c_cflag","","",44,null],[12,"c_lflag","","",44,null],[12,"c_line","","",44,null],[12,"c_cc","","",44,null],[12,"c_ispeed","","",44,null],[12,"c_ospeed","","",44,null],[3,"flock","","",null,null],[12,"l_type","","",45,null],[12,"l_whence","","",45,null],[12,"l_start","","",45,null],[12,"l_len","","",45,null],[12,"l_pid","","",45,null],[3,"ipc_perm","","",null,null],[12,"__key","","",46,null],[12,"uid","","",46,null],[12,"gid","","",46,null],[12,"cuid","","",46,null],[12,"cgid","","",46,null],[12,"mode","","",46,null],[12,"__seq","","",46,null],[3,"shmid_ds","","",null,null],[12,"shm_perm","","",47,null],[12,"shm_segsz","","",47,null],[12,"shm_atime","","",47,null],[12,"shm_dtime","","",47,null],[12,"shm_ctime","","",47,null],[12,"shm_cpid","","",47,null],[12,"shm_lpid","","",47,null],[12,"shm_nattch","","",47,null],[3,"sigset_t","","",null,null],[3,"stat","","",null,null],[12,"st_dev","","",48,null],[12,"st_ino","","",48,null],[12,"st_nlink","","",48,null],[12,"st_mode","","",48,null],[12,"st_uid","","",48,null],[12,"st_gid","","",48,null],[12,"st_rdev","","",48,null],[12,"st_size","","",48,null],[12,"st_blksize","","",48,null],[12,"st_blocks","","",48,null],[12,"st_atime","","",48,null],[12,"st_atime_nsec","","",48,null],[12,"st_mtime","","",48,null],[12,"st_mtime_nsec","","",48,null],[12,"st_ctime","","",48,null],[12,"st_ctime_nsec","","",48,null],[3,"stat64","","",null,null],[12,"st_dev","","",49,null],[12,"st_ino","","",49,null],[12,"st_nlink","","",49,null],[12,"st_mode","","",49,null],[12,"st_uid","","",49,null],[12,"st_gid","","",49,null],[12,"st_rdev","","",49,null],[12,"st_size","","",49,null],[12,"st_blksize","","",49,null],[12,"st_blocks","","",49,null],[12,"st_atime","","",49,null],[12,"st_atime_nsec","","",49,null],[12,"st_mtime","","",49,null],[12,"st_mtime_nsec","","",49,null],[12,"st_ctime","","",49,null],[12,"st_ctime_nsec","","",49,null],[3,"pthread_attr_t","","",null,null],[3,"mcontext_t","","",null,null],[3,"ucontext_t","","",null,null],[12,"uc_flags","","",50,null],[12,"uc_link","","",50,null],[12,"uc_stack","","",50,null],[12,"uc_mcontext","","",50,null],[12,"uc_sigmask","","",50,null],[4,"c_void","","",null,null],[4,"FILE","","",null,null],[4,"fpos_t","","",null,null],[4,"DIR","","",null,null],[4,"locale_t","","",null,null],[4,"timezone","","",null,null],[4,"fpos64_t","","",null,null],[5,"FD_CLR","","",null,null],[5,"FD_ISSET","","",null,null],[5,"FD_SET","","",null,null],[5,"FD_ZERO","","",null,null],[5,"WIFEXITED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WEXITSTATUS","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WTERMSIG","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"CPU_ZERO","","",null,null],[5,"CPU_SET","","",null,null],[5,"CPU_ISSET","","",null,{"inputs":[{"name":"usize"},{"name":"cpu_set_t"}],"output":{"name":"bool"}}],[5,"CPU_EQUAL","","",null,{"inputs":[{"name":"cpu_set_t"},{"name":"cpu_set_t"}],"output":{"name":"bool"}}],[5,"isalnum","","",null,null],[5,"isalpha","","",null,null],[5,"iscntrl","","",null,null],[5,"isdigit","","",null,null],[5,"isgraph","","",null,null],[5,"islower","","",null,null],[5,"isprint","","",null,null],[5,"ispunct","","",null,null],[5,"isspace","","",null,null],[5,"isupper","","",null,null],[5,"isxdigit","","",null,null],[5,"tolower","","",null,null],[5,"toupper","","",null,null],[5,"fopen","","",null,null],[5,"freopen","","",null,null],[5,"fflush","","",null,null],[5,"fclose","","",null,null],[5,"remove","","",null,null],[5,"rename","","",null,null],[5,"tmpfile","","",null,null],[5,"setvbuf","","",null,null],[5,"setbuf","","",null,null],[5,"fgetc","","",null,null],[5,"fgets","","",null,null],[5,"fputc","","",null,null],[5,"fputs","","",null,null],[5,"puts","","",null,null],[5,"ungetc","","",null,null],[5,"fread","","",null,null],[5,"fwrite","","",null,null],[5,"fseek","","",null,null],[5,"ftell","","",null,null],[5,"rewind","","",null,null],[5,"fgetpos","","",null,null],[5,"fsetpos","","",null,null],[5,"feof","","",null,null],[5,"ferror","","",null,null],[5,"perror","","",null,null],[5,"atoi","","",null,null],[5,"strtod","","",null,null],[5,"strtol","","",null,null],[5,"strtoul","","",null,null],[5,"calloc","","",null,null],[5,"malloc","","",null,null],[5,"realloc","","",null,null],[5,"free","","",null,null],[5,"abort","","",null,null],[5,"exit","","",null,null],[5,"_exit","","",null,null],[5,"atexit","","",null,null],[5,"system","","",null,null],[5,"getenv","","",null,null],[5,"strcpy","","",null,null],[5,"strncpy","","",null,null],[5,"strcat","","",null,null],[5,"strncat","","",null,null],[5,"strcmp","","",null,null],[5,"strncmp","","",null,null],[5,"strcoll","","",null,null],[5,"strchr","","",null,null],[5,"strrchr","","",null,null],[5,"strspn","","",null,null],[5,"strcspn","","",null,null],[5,"strpbrk","","",null,null],[5,"strstr","","",null,null],[5,"strlen","","",null,null],[5,"strerror","","",null,null],[5,"strtok","","",null,null],[5,"strxfrm","","",null,null],[5,"wcslen","","",null,null],[5,"memcmp","","",null,null],[5,"memchr","","",null,null],[5,"abs","","",null,null],[5,"atof","","",null,null],[5,"labs","","",null,null],[5,"rand","","",null,null],[5,"srand","","",null,null],[5,"socket","","",null,null],[5,"connect","","",null,null],[5,"bind","","",null,null],[5,"listen","","",null,null],[5,"accept","","",null,null],[5,"getpeername","","",null,null],[5,"getsockname","","",null,null],[5,"setsockopt","","",null,null],[5,"socketpair","","",null,null],[5,"sendto","","",null,null],[5,"shutdown","","",null,null],[5,"chmod","","",null,null],[5,"fchmod","","",null,null],[5,"fstat","","",null,null],[5,"mkdir","","",null,null],[5,"stat","","",null,null],[5,"popen","","",null,null],[5,"pclose","","",null,null],[5,"fdopen","","",null,null],[5,"fileno","","",null,null],[5,"open","","",null,null],[5,"creat","","",null,null],[5,"fcntl","","",null,null],[5,"opendir","","",null,null],[5,"readdir_r","","",null,null],[5,"closedir","","",null,null],[5,"rewinddir","","",null,null],[5,"access","","",null,null],[5,"alarm","","",null,null],[5,"chdir","","",null,null],[5,"chown","","",null,null],[5,"close","","",null,null],[5,"dup","","",null,null],[5,"dup2","","",null,null],[5,"execv","","",null,null],[5,"execve","","",null,null],[5,"execvp","","",null,null],[5,"fork","","",null,null],[5,"fpathconf","","",null,null],[5,"getcwd","","",null,null],[5,"getegid","","",null,null],[5,"geteuid","","",null,null],[5,"getgid","","",null,null],[5,"getgroups","","",null,null],[5,"getlogin","","",null,null],[5,"getopt","","",null,null],[5,"getpgrp","","",null,null],[5,"getpid","","",null,null],[5,"getppid","","",null,null],[5,"getuid","","",null,null],[5,"isatty","","",null,null],[5,"link","","",null,null],[5,"lseek","","",null,null],[5,"pathconf","","",null,null],[5,"pause","","",null,null],[5,"pipe","","",null,null],[5,"posix_memalign","","",null,null],[5,"read","","",null,null],[5,"rmdir","","",null,null],[5,"setgid","","",null,null],[5,"setpgid","","",null,null],[5,"setsid","","",null,null],[5,"setuid","","",null,null],[5,"sleep","","",null,null],[5,"nanosleep","","",null,null],[5,"tcgetpgrp","","",null,null],[5,"ttyname","","",null,null],[5,"unlink","","",null,null],[5,"wait","","",null,null],[5,"waitpid","","",null,null],[5,"write","","",null,null],[5,"pread","","",null,null],[5,"pwrite","","",null,null],[5,"umask","","",null,null],[5,"utime","","",null,null],[5,"kill","","",null,null],[5,"mlock","","",null,null],[5,"munlock","","",null,null],[5,"mlockall","","",null,null],[5,"munlockall","","",null,null],[5,"mmap","","",null,null],[5,"munmap","","",null,null],[5,"if_nametoindex","","",null,null],[5,"if_indextoname","","",null,null],[5,"lstat","","",null,null],[5,"fsync","","",null,null],[5,"setenv","","",null,null],[5,"unsetenv","","",null,null],[5,"symlink","","",null,null],[5,"ftruncate","","",null,null],[5,"signal","","",null,null],[5,"getrlimit","","",null,null],[5,"setrlimit","","",null,null],[5,"getrusage","","",null,null],[5,"getdtablesize","","",null,null],[5,"realpath","","",null,null],[5,"flock","","",null,null],[5,"gettimeofday","","",null,null],[5,"pthread_self","","",null,null],[5,"pthread_create","","",null,null],[5,"pthread_join","","",null,null],[5,"pthread_attr_init","","",null,null],[5,"pthread_attr_destroy","","",null,null],[5,"pthread_attr_setstacksize","","",null,null],[5,"pthread_attr_setdetachstate","","",null,null],[5,"pthread_detach","","",null,null],[5,"sched_yield","","",null,null],[5,"pthread_key_create","","",null,null],[5,"pthread_key_delete","","",null,null],[5,"pthread_getspecific","","",null,null],[5,"pthread_setspecific","","",null,null],[5,"pthread_mutex_init","","",null,null],[5,"pthread_mutex_destroy","","",null,null],[5,"pthread_mutex_lock","","",null,null],[5,"pthread_mutex_trylock","","",null,null],[5,"pthread_mutex_unlock","","",null,null],[5,"pthread_mutexattr_init","","",null,null],[5,"pthread_mutexattr_destroy","","",null,null],[5,"pthread_mutexattr_settype","","",null,null],[5,"pthread_cond_wait","","",null,null],[5,"pthread_cond_timedwait","","",null,null],[5,"pthread_cond_signal","","",null,null],[5,"pthread_cond_broadcast","","",null,null],[5,"pthread_cond_destroy","","",null,null],[5,"pthread_rwlock_destroy","","",null,null],[5,"pthread_rwlock_rdlock","","",null,null],[5,"pthread_rwlock_tryrdlock","","",null,null],[5,"pthread_rwlock_wrlock","","",null,null],[5,"pthread_rwlock_trywrlock","","",null,null],[5,"pthread_rwlock_unlock","","",null,null],[5,"pthread_sigmask","","",null,null],[5,"pthread_kill","","",null,null],[5,"strerror_r","","",null,null],[5,"getsockopt","","",null,null],[5,"raise","","",null,null],[5,"sigaction","","",null,null],[5,"sigaltstack","","",null,null],[5,"sigwait","","",null,null],[5,"utimes","","",null,null],[5,"dlopen","","",null,null],[5,"dlerror","","",null,null],[5,"dlsym","","",null,null],[5,"dlclose","","",null,null],[5,"dladdr","","",null,null],[5,"getaddrinfo","","",null,null],[5,"freeaddrinfo","","",null,null],[5,"gai_strerror","","",null,null],[5,"gmtime_r","","",null,null],[5,"localtime_r","","",null,null],[5,"mktime","","",null,null],[5,"mknod","","",null,null],[5,"writev","","",null,null],[5,"readv","","",null,null],[5,"uname","","",null,null],[5,"daemon","","",null,null],[5,"gethostname","","",null,null],[5,"chroot","","",null,null],[5,"usleep","","",null,null],[5,"send","","",null,null],[5,"recv","","",null,null],[5,"putenv","","",null,null],[5,"sendmsg","","",null,null],[5,"recvmsg","","",null,null],[5,"poll","","",null,null],[5,"select","","",null,null],[5,"setlocale","","",null,null],[5,"localeconv","","",null,null],[5,"getifaddrs","","",null,null],[5,"freeifaddrs","","",null,null],[5,"glob","","",null,null],[5,"globfree","","",null,null],[5,"posix_madvise","","",null,null],[5,"shm_unlink","","",null,null],[5,"seekdir","","",null,null],[5,"telldir","","",null,null],[5,"getsid","","",null,null],[5,"madvise","","",null,null],[5,"readlink","","",null,null],[5,"msync","","",null,null],[5,"sysconf","","",null,null],[5,"recvfrom","","",null,null],[5,"mkfifo","","",null,null],[5,"sigemptyset","","",null,null],[5,"sigaddset","","",null,null],[5,"sigfillset","","",null,null],[5,"sigdelset","","",null,null],[5,"sigismember","","",null,null],[5,"pselect","","",null,null],[5,"fseeko","","",null,null],[5,"ftello","","",null,null],[5,"timegm","","",null,null],[5,"statvfs","","",null,null],[5,"fstatvfs","","",null,null],[5,"tcdrain","","",null,null],[5,"cfgetispeed","","",null,null],[5,"cfgetospeed","","",null,null],[5,"cfsetispeed","","",null,null],[5,"cfsetospeed","","",null,null],[5,"tcgetattr","","",null,null],[5,"tcsetattr","","",null,null],[5,"tcflow","","",null,null],[5,"tcflush","","",null,null],[5,"tcsendbreak","","",null,null],[5,"mkstemp","","",null,null],[5,"mkstemps","","",null,null],[5,"mkdtemp","","",null,null],[5,"futimes","","",null,null],[5,"nl_langinfo","","",null,null],[5,"getpwuid_r","","",null,null],[5,"fdatasync","","",null,null],[5,"mincore","","",null,null],[5,"clock_getres","","",null,null],[5,"clock_gettime","","",null,null],[5,"prctl","","",null,null],[5,"pthread_getattr_np","","",null,null],[5,"pthread_attr_getguardsize","","",null,null],[5,"pthread_attr_getstack","","",null,null],[5,"memalign","","",null,null],[5,"setgroups","","",null,null],[5,"sched_setscheduler","","",null,null],[5,"sched_getscheduler","","",null,null],[5,"sched_get_priority_max","","",null,null],[5,"sched_get_priority_min","","",null,null],[5,"epoll_create","","",null,null],[5,"epoll_ctl","","",null,null],[5,"epoll_wait","","",null,null],[5,"pipe2","","",null,null],[5,"mount","","",null,null],[5,"umount","","",null,null],[5,"umount2","","",null,null],[5,"clone","","",null,null],[5,"statfs","","",null,null],[5,"fstatfs","","",null,null],[5,"memrchr","","",null,null],[5,"syscall","","",null,null],[5,"sendfile","","",null,null],[5,"splice","","",null,null],[5,"tee","","",null,null],[5,"vmsplice","","",null,null],[5,"posix_fadvise","","",null,null],[5,"futimens","","",null,null],[5,"utimensat","","",null,null],[5,"duplocale","","",null,null],[5,"freelocale","","",null,null],[5,"newlocale","","",null,null],[5,"uselocale","","",null,null],[5,"shm_open","","",null,null],[5,"shmget","","",null,null],[5,"shmat","","",null,null],[5,"shmdt","","",null,null],[5,"shmctl","","",null,null],[5,"mprotect","","",null,null],[5,"__errno_location","","",null,null],[5,"fopen64","","",null,null],[5,"freopen64","","",null,null],[5,"tmpfile64","","",null,null],[5,"fgetpos64","","",null,null],[5,"fsetpos64","","",null,null],[5,"fstat64","","",null,null],[5,"stat64","","",null,null],[5,"open64","","",null,null],[5,"creat64","","",null,null],[5,"lseek64","","",null,null],[5,"pread64","","",null,null],[5,"pwrite64","","",null,null],[5,"mmap64","","",null,null],[5,"lstat64","","",null,null],[5,"ftruncate64","","",null,null],[5,"readdir64_r","","",null,null],[5,"getrlimit64","","",null,null],[5,"setrlimit64","","",null,null],[5,"fseeko64","","",null,null],[5,"ftello64","","",null,null],[5,"fallocate","","",null,null],[5,"posix_fallocate","","",null,null],[5,"readahead","","",null,null],[5,"getxattr","","",null,null],[5,"lgetxattr","","",null,null],[5,"fgetxattr","","",null,null],[5,"setxattr","","",null,null],[5,"lsetxattr","","",null,null],[5,"fsetxattr","","",null,null],[5,"listxattr","","",null,null],[5,"llistxattr","","",null,null],[5,"flistxattr","","",null,null],[5,"removexattr","","",null,null],[5,"lremovexattr","","",null,null],[5,"fremovexattr","","",null,null],[5,"signalfd","","",null,null],[5,"pwritev","","",null,null],[5,"preadv","","",null,null],[5,"quotactl","","",null,null],[5,"mq_open","","",null,null],[5,"mq_close","","",null,null],[5,"mq_unlink","","",null,null],[5,"mq_receive","","",null,null],[5,"mq_send","","",null,null],[5,"mq_getattr","","",null,null],[5,"mq_setattr","","",null,null],[5,"sched_getaffinity","","",null,null],[5,"sched_setaffinity","","",null,null],[5,"epoll_pwait","","",null,null],[5,"dup3","","",null,null],[5,"unshare","","",null,null],[5,"sethostname","","",null,null],[5,"setns","","",null,null],[5,"mkostemp","","",null,null],[5,"mkostemps","","",null,null],[5,"sigtimedwait","","",null,null],[5,"sigwaitinfo","","",null,null],[5,"openpty","","",null,null],[5,"forkpty","","",null,null],[5,"nl_langinfo_l","","",null,null],[5,"sysctl","","",null,null],[5,"ioctl","","",null,null],[5,"backtrace","","",null,null],[5,"glob64","","",null,null],[5,"globfree64","","",null,null],[5,"getnameinfo","","",null,null],[5,"eventfd","","",null,null],[5,"ptrace","","",null,null],[5,"pthread_attr_getaffinity_np","","",null,null],[5,"pthread_attr_setaffinity_np","","",null,null],[5,"getcontext","","",null,null],[5,"setcontext","","",null,null],[5,"makecontext","","",null,null],[5,"swapcontext","","",null,null],[11,"is_some","core::option","Returns `true` if the option is a `Some` value",51,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[11,"is_none","","Returns `true` if the option is a `None` value",51,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[11,"as_ref","","Converts from `Option&lt;T&gt;` to `Option&lt;&amp;T&gt;`",51,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"as_mut","","Converts from `Option&lt;T&gt;` to `Option&lt;&amp;mut T&gt;`",51,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"expect","","Unwraps an option, yielding the content of a `Some`.",51,{"inputs":[{"name":"option"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap","","Moves the value `v` out of the `Option&lt;T&gt;` if it is `Some(v)`.",51,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"unwrap_or","","Returns the contained value or a default.",51,{"inputs":[{"name":"option"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",51,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"t"}}],[11,"map","","Maps an `Option&lt;T&gt;` to `Option&lt;U&gt;` by applying a function to a contained value",51,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"map_or","","Applies a function to the contained value (if any),\nor returns a `default` (if not).",51,{"inputs":[{"name":"option"},{"name":"u"},{"name":"f"}],"output":{"name":"u"}}],[11,"map_or_else","","Applies a function to the contained value (if any),\nor computes a `default` (if not).",51,{"inputs":[{"name":"option"},{"name":"d"},{"name":"f"}],"output":{"name":"u"}}],[11,"ok_or","","Transforms the `Option&lt;T&gt;` into a `Result&lt;T, E&gt;`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err)`.",51,{"inputs":[{"name":"option"},{"name":"e"}],"output":{"name":"result"}}],[11,"ok_or_else","","Transforms the `Option&lt;T&gt;` into a `Result&lt;T, E&gt;`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err())`.",51,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",51,{"inputs":[{"name":"option"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",51,{"inputs":[{"name":"option"}],"output":{"name":"itermut"}}],[11,"and","","Returns `None` if the option is `None`, otherwise returns `optb`.",51,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"and_then","","Returns `None` if the option is `None`, otherwise calls `f` with the\nwrapped value and returns the result.",51,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",51,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and\nreturns the result.",51,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"take","","Takes the value out of the option, leaving a `None` in its place.",51,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"cloned","","Maps an `Option&lt;&amp;T&gt;` to an `Option&lt;T&gt;` by cloning the contents of the\noption.",51,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"unwrap_or_default","","Returns the contained value or a default",51,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"default","core::num","",52,{"inputs":[],"output":{"name":"wrapping"}}],[11,"fmt","","",52,{"inputs":[{"name":"wrapping"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",52,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"cmp","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"option"}}],[11,"lt","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"le","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"gt","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"ge","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"eq","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"ne","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"shl","","",52,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",52,null],[11,"shr","","",52,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",52,null],[11,"shl","","",52,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",52,null],[11,"shr","","",52,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",52,null],[11,"shl","","",52,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",52,null],[11,"shr","","",52,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",52,null],[11,"shl","","",52,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",52,null],[11,"shr","","",52,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",52,null],[11,"shl","","",52,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",52,null],[11,"shr","","",52,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",52,null],[11,"shl","","",52,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",52,null],[11,"shr","","",52,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",52,null],[11,"shl","","",52,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",52,null],[11,"shr","","",52,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",52,null],[11,"shl","","",52,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",52,null],[11,"shr","","",52,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",52,null],[11,"shl","","",52,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",52,null],[11,"shr","","",52,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",52,null],[11,"shl","","",52,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",52,null],[11,"shr","","",52,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",52,null],[11,"add","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",52,null],[11,"sub","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",52,null],[11,"mul","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",52,null],[11,"div","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",52,null],[11,"rem","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",52,null],[11,"not","","",52,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",52,null],[11,"bitor","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",52,null],[11,"bitand","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",52,null],[11,"add","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",52,null],[11,"sub","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",52,null],[11,"mul","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",52,null],[11,"div","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",52,null],[11,"rem","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",52,null],[11,"not","","",52,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",52,null],[11,"bitor","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",52,null],[11,"bitand","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",52,null],[11,"add","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",52,null],[11,"sub","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",52,null],[11,"mul","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",52,null],[11,"div","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",52,null],[11,"rem","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",52,null],[11,"not","","",52,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",52,null],[11,"bitor","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",52,null],[11,"bitand","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",52,null],[11,"add","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",52,null],[11,"sub","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",52,null],[11,"mul","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",52,null],[11,"div","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",52,null],[11,"rem","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",52,null],[11,"not","","",52,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",52,null],[11,"bitor","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",52,null],[11,"bitand","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",52,null],[11,"add","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",52,null],[11,"sub","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",52,null],[11,"mul","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",52,null],[11,"div","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",52,null],[11,"rem","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",52,null],[11,"not","","",52,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",52,null],[11,"bitor","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",52,null],[11,"bitand","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",52,null],[11,"add","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",52,null],[11,"sub","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",52,null],[11,"mul","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",52,null],[11,"div","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",52,null],[11,"rem","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",52,null],[11,"not","","",52,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",52,null],[11,"bitor","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",52,null],[11,"bitand","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",52,null],[11,"add","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",52,null],[11,"sub","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",52,null],[11,"mul","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",52,null],[11,"div","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",52,null],[11,"rem","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",52,null],[11,"not","","",52,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",52,null],[11,"bitor","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",52,null],[11,"bitand","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",52,null],[11,"add","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",52,null],[11,"sub","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",52,null],[11,"mul","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",52,null],[11,"div","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",52,null],[11,"rem","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",52,null],[11,"not","","",52,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",52,null],[11,"bitor","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",52,null],[11,"bitand","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",52,null],[11,"add","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",52,null],[11,"sub","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",52,null],[11,"mul","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",52,null],[11,"div","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",52,null],[11,"rem","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",52,null],[11,"not","","",52,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",52,null],[11,"bitor","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",52,null],[11,"bitand","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",52,null],[11,"add","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",52,null],[11,"sub","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",52,null],[11,"mul","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",52,null],[11,"div","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",52,null],[11,"rem","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",52,null],[11,"not","","",52,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",52,null],[11,"bitor","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",52,null],[11,"bitand","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",52,null],[11,"fmt","","",53,{"inputs":[{"name":"fpcategory"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",53,{"inputs":[{"name":"fpcategory"},{"name":"fpcategory"}],"output":{"name":"bool"}}],[11,"ne","","",53,{"inputs":[{"name":"fpcategory"},{"name":"fpcategory"}],"output":{"name":"bool"}}],[11,"clone","","",53,{"inputs":[{"name":"fpcategory"}],"output":{"name":"fpcategory"}}],[11,"eq","","",54,{"inputs":[{"name":"parseinterror"},{"name":"parseinterror"}],"output":{"name":"bool"}}],[11,"ne","","",54,{"inputs":[{"name":"parseinterror"},{"name":"parseinterror"}],"output":{"name":"bool"}}],[11,"clone","","",54,{"inputs":[{"name":"parseinterror"}],"output":{"name":"parseinterror"}}],[11,"fmt","","",54,{"inputs":[{"name":"parseinterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",55,{"inputs":[{"name":"interrorkind"},{"name":"interrorkind"}],"output":{"name":"bool"}}],[11,"ne","","",55,{"inputs":[{"name":"interrorkind"},{"name":"interrorkind"}],"output":{"name":"bool"}}],[11,"clone","","",55,{"inputs":[{"name":"interrorkind"}],"output":{"name":"interrorkind"}}],[11,"fmt","","",55,{"inputs":[{"name":"interrorkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",54,{"inputs":[{"name":"parseinterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","core::nonzero","",56,null],[11,"fmt","","",56,{"inputs":[{"name":"nonzero"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",56,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"option"}}],[11,"lt","","",56,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"le","","",56,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"gt","","",56,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"ge","","",56,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"cmp","","",56,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"ordering"}}],[11,"eq","","",56,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"ne","","",56,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"clone","","",56,{"inputs":[{"name":"nonzero"}],"output":{"name":"nonzero"}}],[11,"new","","Creates an instance of NonZero with the provided value.\nYou must indeed ensure that the value is actually &quot;non-zero&quot;.",56,{"inputs":[{"name":"t"}],"output":{"name":"nonzero"}}],[11,"deref","","",56,{"inputs":[{"name":"nonzero"}],"output":{"name":"t"}}],[11,"new","core::ptr","Creates a new `Unique`.",57,null],[11,"get","","Dereferences the content.",57,{"inputs":[{"name":"unique"}],"output":{"name":"t"}}],[11,"get_mut","","Mutably dereferences the content.",57,{"inputs":[{"name":"unique"}],"output":{"name":"t"}}],[11,"deref","","",57,null],[11,"fmt","","",57,{"inputs":[{"name":"unique"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `Shared`.",58,null],[11,"clone","","",58,{"inputs":[{"name":"shared"}],"output":{"name":"shared"}}],[11,"deref","","",58,null],[11,"fmt","","",58,{"inputs":[{"name":"shared"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","core::marker","",59,null],[11,"eq","","",59,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",59,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"option"}}],[11,"cmp","","",59,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"ordering"}}],[11,"clone","","",59,{"inputs":[{"name":"phantomdata"}],"output":{"name":"phantomdata"}}],[11,"default","","",59,{"inputs":[],"output":{"name":"phantomdata"}}],[11,"eq","core::ops","",60,{"inputs":[{"name":"rangefull"},{"name":"rangefull"}],"output":{"name":"bool"}}],[11,"ne","","",60,{"inputs":[{"name":"rangefull"},{"name":"rangefull"}],"output":{"name":"bool"}}],[11,"clone","","",60,{"inputs":[{"name":"rangefull"}],"output":{"name":"rangefull"}}],[11,"fmt","","",60,{"inputs":[{"name":"rangefull"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",61,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"bool"}}],[11,"ne","","",61,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"bool"}}],[11,"clone","","",61,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"fmt","","",61,{"inputs":[{"name":"range"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",62,{"inputs":[{"name":"rangefrom"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"ne","","",62,{"inputs":[{"name":"rangefrom"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"clone","","",62,{"inputs":[{"name":"rangefrom"}],"output":{"name":"rangefrom"}}],[11,"fmt","","",62,{"inputs":[{"name":"rangefrom"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",63,{"inputs":[{"name":"rangeto"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"ne","","",63,{"inputs":[{"name":"rangeto"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"clone","","",63,{"inputs":[{"name":"rangeto"}],"output":{"name":"rangeto"}}],[11,"fmt","","",63,{"inputs":[{"name":"rangeto"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::cmp","",64,{"inputs":[{"name":"ordering"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",64,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"ne","","",64,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"clone","","",64,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"reverse","","Reverse the `Ordering`.",64,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"cmp","","",64,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",64,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"option"}}],[11,"fmt","libc","",65,{"inputs":[{"name":"any"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",65,{"inputs":[{"name":"any"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is","","Returns true if the boxed type is the same as `T`",65,{"inputs":[{"name":"any"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",65,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",65,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"is","","Forwards to the method defined on the type `Any`.",65,{"inputs":[{"name":"any"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",65,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",65,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"hash","core::any","",66,null],[11,"fmt","","",66,{"inputs":[{"name":"typeid"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",66,{"inputs":[{"name":"typeid"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"ne","","",66,{"inputs":[{"name":"typeid"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"clone","","",66,{"inputs":[{"name":"typeid"}],"output":{"name":"typeid"}}],[11,"of","","Returns the `TypeId` of the type this generic function has been\ninstantiated with",66,{"inputs":[],"output":{"name":"typeid"}}],[11,"default","core::sync::atomic","",67,{"inputs":[],"output":{"name":"atomicbool"}}],[11,"default","","",68,{"inputs":[],"output":{"name":"atomicisize"}}],[11,"default","","",69,{"inputs":[],"output":{"name":"atomicusize"}}],[11,"default","","",70,{"inputs":[],"output":{"name":"atomicptr"}}],[11,"clone","","",71,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"new","","Creates a new `AtomicBool`.",67,{"inputs":[{"name":"bool"}],"output":{"name":"atomicbool"}}],[11,"load","","Loads a value from the bool.",67,{"inputs":[{"name":"atomicbool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"store","","Stores a value into the bool.",67,null],[11,"swap","","Stores a value into the bool, returning the old value.",67,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"compare_and_swap","","Stores a value into the `bool` if the current value is the same as the `current` value.",67,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"compare_exchange","","Stores a value into the `bool` if the current value is the same as the `current` value.",67,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"bool"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"compare_exchange_weak","","Stores a value into the `bool` if the current value is the same as the `current` value.",67,null],[11,"fetch_and","","Logical &quot;and&quot; with a boolean value.",67,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_nand","","Logical &quot;nand&quot; with a boolean value.",67,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_or","","Logical &quot;or&quot; with a boolean value.",67,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_xor","","Logical &quot;xor&quot; with a boolean value.",67,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `AtomicIsize`.",68,{"inputs":[{"name":"isize"}],"output":{"name":"atomicisize"}}],[11,"load","","Loads a value from the isize.",68,{"inputs":[{"name":"atomicisize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"store","","Stores a value into the isize.",68,null],[11,"swap","","Stores a value into the isize, returning the old value.",68,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"compare_and_swap","","Stores a value into the `isize` if the current value is the same as the `current` value.",68,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"compare_exchange","","Stores a value into the `isize` if the current value is the same as the `current` value.",68,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"isize"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"compare_exchange_weak","","Stores a value into the `isize if the current value is the same as the `current` value.",68,null],[11,"fetch_add","","Add an isize to the current value, returning the previous value.",68,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_sub","","Subtract an isize from the current value, returning the previous value.",68,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_and","","Bitwise and with the current isize, returning the previous value.",68,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_or","","Bitwise or with the current isize, returning the previous value.",68,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_xor","","Bitwise xor with the current isize, returning the previous value.",68,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"new","","Creates a new `AtomicUsize`.",69,{"inputs":[{"name":"usize"}],"output":{"name":"atomicusize"}}],[11,"load","","Loads a value from the usize.",69,{"inputs":[{"name":"atomicusize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"store","","Stores a value into the usize.",69,null],[11,"swap","","Stores a value into the usize, returning the old value.",69,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"compare_and_swap","","Stores a value into the `usize` if the current value is the same as the `current` value.",69,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"compare_exchange","","Stores a value into the `usize` if the current value is the same as the `current` value.",69,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"usize"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"compare_exchange_weak","","Stores a value into the `usize` if the current value is the same as the `current` value.",69,null],[11,"fetch_add","","Add to the current usize, returning the previous value.",69,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_sub","","Subtract from the current usize, returning the previous value.",69,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_and","","Bitwise and with the current usize, returning the previous value.",69,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_or","","Bitwise or with the current usize, returning the previous value.",69,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_xor","","Bitwise xor with the current usize, returning the previous value.",69,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"new","","Creates a new `AtomicPtr`.",70,null],[11,"load","","Loads a value from the pointer.",70,null],[11,"store","","Stores a value into the pointer.",70,null],[11,"swap","","Stores a value into the pointer, returning the old value.",70,null],[11,"compare_and_swap","","Stores a value into the pointer if the current value is the same as the `current` value.",70,null],[11,"compare_exchange","","Stores a value into the pointer if the current value is the same as the `current` value.",70,null],[11,"compare_exchange_weak","","Stores a value into the pointer if the current value is the same as the `current` value.",70,null],[11,"fmt","","",69,{"inputs":[{"name":"atomicusize"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",68,{"inputs":[{"name":"atomicisize"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",67,{"inputs":[{"name":"atomicbool"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",70,{"inputs":[{"name":"atomicptr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","core::cell","Creates a new `Cell` containing the given value.",72,{"inputs":[{"name":"t"}],"output":{"name":"cell"}}],[11,"get","","Returns a copy of the contained value.",72,{"inputs":[{"name":"cell"}],"output":{"name":"t"}}],[11,"set","","Sets the contained value.",72,null],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",72,{"inputs":[{"name":"cell"}],"output":{"name":"unsafecell"}}],[11,"clone","","",72,{"inputs":[{"name":"cell"}],"output":{"name":"cell"}}],[11,"default","","",72,{"inputs":[],"output":{"name":"cell"}}],[11,"eq","","",72,{"inputs":[{"name":"cell"},{"name":"cell"}],"output":{"name":"bool"}}],[11,"fmt","","",73,{"inputs":[{"name":"borrowstate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",73,{"inputs":[{"name":"borrowstate"},{"name":"borrowstate"}],"output":{"name":"bool"}}],[11,"ne","","",73,{"inputs":[{"name":"borrowstate"},{"name":"borrowstate"}],"output":{"name":"bool"}}],[11,"clone","","",73,{"inputs":[{"name":"borrowstate"}],"output":{"name":"borrowstate"}}],[11,"new","","Creates a new `RefCell` containing `value`.",74,{"inputs":[{"name":"t"}],"output":{"name":"refcell"}}],[11,"into_inner","","Consumes the `RefCell`, returning the wrapped value.",74,{"inputs":[{"name":"refcell"}],"output":{"name":"t"}}],[11,"borrow_state","","Query the current state of this `RefCell`",74,{"inputs":[{"name":"refcell"}],"output":{"name":"borrowstate"}}],[11,"borrow","","Immutably borrows the wrapped value.",74,{"inputs":[{"name":"refcell"}],"output":{"name":"ref"}}],[11,"borrow_mut","","Mutably borrows the wrapped value.",74,{"inputs":[{"name":"refcell"}],"output":{"name":"refmut"}}],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",74,{"inputs":[{"name":"refcell"}],"output":{"name":"unsafecell"}}],[11,"clone","","",74,{"inputs":[{"name":"refcell"}],"output":{"name":"refcell"}}],[11,"default","","",74,{"inputs":[],"output":{"name":"refcell"}}],[11,"eq","","",74,{"inputs":[{"name":"refcell"},{"name":"refcell"}],"output":{"name":"bool"}}],[11,"drop","","",75,null],[11,"clone","","",75,{"inputs":[{"name":"borrowref"}],"output":{"name":"borrowref"}}],[11,"deref","","",76,{"inputs":[{"name":"ref"}],"output":{"name":"t"}}],[11,"clone","","Copies a `Ref`.",76,{"inputs":[{"name":"ref"}],"output":{"name":"ref"}}],[11,"map","","Make a new `Ref` for a component of the borrowed data.",76,{"inputs":[{"name":"ref"},{"name":"f"}],"output":{"name":"ref"}}],[11,"filter_map","","Make a new `Ref` for an optional component of the borrowed data, e.g. an\nenum variant.",76,{"inputs":[{"name":"ref"},{"name":"f"}],"output":{"name":"option"}}],[11,"map","","Make a new `RefMut` for a component of the borrowed data, e.g. an enum\nvariant.",77,{"inputs":[{"name":"refmut"},{"name":"f"}],"output":{"name":"refmut"}}],[11,"filter_map","","Make a new `RefMut` for an optional component of the borrowed data, e.g.\nan enum variant.",77,{"inputs":[{"name":"refmut"},{"name":"f"}],"output":{"name":"option"}}],[11,"drop","","",78,null],[11,"deref","","",77,{"inputs":[{"name":"refmut"}],"output":{"name":"t"}}],[11,"deref_mut","","",77,{"inputs":[{"name":"refmut"}],"output":{"name":"t"}}],[11,"new","","Constructs a new instance of `UnsafeCell` which will wrap the specified\nvalue.",79,{"inputs":[{"name":"t"}],"output":{"name":"unsafecell"}}],[11,"into_inner","","Unwraps the value.",79,{"inputs":[{"name":"unsafecell"}],"output":{"name":"t"}}],[11,"get","","Gets a mutable pointer to the wrapped value.",79,null],[11,"clone","core::char","",80,{"inputs":[{"name":"escapeunicode"}],"output":{"name":"escapeunicode"}}],[11,"clone","","",81,{"inputs":[{"name":"escapeunicodestate"}],"output":{"name":"escapeunicodestate"}}],[11,"next","","",80,{"inputs":[{"name":"escapeunicode"}],"output":{"name":"option"}}],[11,"size_hint","","",80,null],[11,"clone","","",82,{"inputs":[{"name":"escapedefault"}],"output":{"name":"escapedefault"}}],[11,"clone","","",83,{"inputs":[{"name":"escapedefaultstate"}],"output":{"name":"escapedefaultstate"}}],[11,"next","","",82,{"inputs":[{"name":"escapedefault"}],"output":{"name":"option"}}],[11,"size_hint","","",82,null],[11,"count","","",82,{"inputs":[{"name":"escapedefault"}],"output":{"name":"usize"}}],[11,"nth","","",82,{"inputs":[{"name":"escapedefault"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",82,{"inputs":[{"name":"escapedefault"}],"output":{"name":"option"}}],[11,"clone","core::iter","",84,{"inputs":[{"name":"rev"}],"output":{"name":"rev"}}],[11,"next","","",84,{"inputs":[{"name":"rev"}],"output":{"name":"option"}}],[11,"size_hint","","",84,null],[11,"next_back","","",84,{"inputs":[{"name":"rev"}],"output":{"name":"option"}}],[11,"clone","","",85,{"inputs":[{"name":"cloned"}],"output":{"name":"cloned"}}],[11,"next","","",85,{"inputs":[{"name":"cloned"}],"output":{"name":"option"}}],[11,"size_hint","","",85,null],[11,"next_back","","",85,{"inputs":[{"name":"cloned"}],"output":{"name":"option"}}],[11,"clone","","",86,{"inputs":[{"name":"cycle"}],"output":{"name":"cycle"}}],[11,"next","","",86,{"inputs":[{"name":"cycle"}],"output":{"name":"option"}}],[11,"size_hint","","",86,null],[11,"clone","","",87,{"inputs":[{"name":"chain"}],"output":{"name":"chain"}}],[11,"clone","","",88,{"inputs":[{"name":"chainstate"}],"output":{"name":"chainstate"}}],[11,"next","","",87,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"count","","",87,{"inputs":[{"name":"chain"}],"output":{"name":"usize"}}],[11,"nth","","",87,{"inputs":[{"name":"chain"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",87,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"size_hint","","",87,null],[11,"next_back","","",87,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"clone","","",89,{"inputs":[{"name":"zip"}],"output":{"name":"zip"}}],[11,"next","","",89,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"size_hint","","",89,null],[11,"next_back","","",89,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"clone","","",90,{"inputs":[{"name":"map"}],"output":{"name":"map"}}],[11,"next","","",90,{"inputs":[{"name":"map"}],"output":{"name":"option"}}],[11,"size_hint","","",90,null],[11,"next_back","","",90,{"inputs":[{"name":"map"}],"output":{"name":"option"}}],[11,"clone","","",91,{"inputs":[{"name":"filter"}],"output":{"name":"filter"}}],[11,"next","","",91,{"inputs":[{"name":"filter"}],"output":{"name":"option"}}],[11,"size_hint","","",91,null],[11,"next_back","","",91,{"inputs":[{"name":"filter"}],"output":{"name":"option"}}],[11,"clone","","",92,{"inputs":[{"name":"filtermap"}],"output":{"name":"filtermap"}}],[11,"next","","",92,{"inputs":[{"name":"filtermap"}],"output":{"name":"option"}}],[11,"size_hint","","",92,null],[11,"next_back","","",92,{"inputs":[{"name":"filtermap"}],"output":{"name":"option"}}],[11,"clone","","",93,{"inputs":[{"name":"enumerate"}],"output":{"name":"enumerate"}}],[11,"next","","# Overflow Behavior",93,{"inputs":[{"name":"enumerate"}],"output":{"name":"option"}}],[11,"size_hint","","",93,null],[11,"nth","","",93,{"inputs":[{"name":"enumerate"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",93,{"inputs":[{"name":"enumerate"}],"output":{"name":"usize"}}],[11,"next_back","","",93,{"inputs":[{"name":"enumerate"}],"output":{"name":"option"}}],[11,"clone","","",94,{"inputs":[{"name":"peekable"}],"output":{"name":"peekable"}}],[11,"next","","",94,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"count","","",94,{"inputs":[{"name":"peekable"}],"output":{"name":"usize"}}],[11,"nth","","",94,{"inputs":[{"name":"peekable"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",94,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"size_hint","","",94,null],[11,"peek","","Returns a reference to the next() value without advancing the iterator.",94,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"is_empty","","Checks if the iterator has finished iterating.",94,{"inputs":[{"name":"peekable"}],"output":{"name":"bool"}}],[11,"clone","","",95,{"inputs":[{"name":"skipwhile"}],"output":{"name":"skipwhile"}}],[11,"next","","",95,{"inputs":[{"name":"skipwhile"}],"output":{"name":"option"}}],[11,"size_hint","","",95,null],[11,"clone","","",96,{"inputs":[{"name":"takewhile"}],"output":{"name":"takewhile"}}],[11,"next","","",96,{"inputs":[{"name":"takewhile"}],"output":{"name":"option"}}],[11,"size_hint","","",96,null],[11,"clone","","",97,{"inputs":[{"name":"skip"}],"output":{"name":"skip"}}],[11,"next","","",97,{"inputs":[{"name":"skip"}],"output":{"name":"option"}}],[11,"nth","","",97,{"inputs":[{"name":"skip"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",97,{"inputs":[{"name":"skip"}],"output":{"name":"usize"}}],[11,"last","","",97,{"inputs":[{"name":"skip"}],"output":{"name":"option"}}],[11,"size_hint","","",97,null],[11,"clone","","",98,{"inputs":[{"name":"take"}],"output":{"name":"take"}}],[11,"next","","",98,{"inputs":[{"name":"take"}],"output":{"name":"option"}}],[11,"nth","","",98,{"inputs":[{"name":"take"},{"name":"usize"}],"output":{"name":"option"}}],[11,"size_hint","","",98,null],[11,"clone","","",99,{"inputs":[{"name":"scan"}],"output":{"name":"scan"}}],[11,"next","","",99,{"inputs":[{"name":"scan"}],"output":{"name":"option"}}],[11,"size_hint","","",99,null],[11,"clone","","",100,{"inputs":[{"name":"flatmap"}],"output":{"name":"flatmap"}}],[11,"next","","",100,{"inputs":[{"name":"flatmap"}],"output":{"name":"option"}}],[11,"size_hint","","",100,null],[11,"next_back","","",100,{"inputs":[{"name":"flatmap"}],"output":{"name":"option"}}],[11,"clone","","",101,{"inputs":[{"name":"fuse"}],"output":{"name":"fuse"}}],[11,"next","","",101,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"nth","","",101,{"inputs":[{"name":"fuse"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",101,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"count","","",101,{"inputs":[{"name":"fuse"}],"output":{"name":"usize"}}],[11,"size_hint","","",101,null],[11,"next_back","","",101,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"clone","","",102,{"inputs":[{"name":"inspect"}],"output":{"name":"inspect"}}],[11,"next","","",102,{"inputs":[{"name":"inspect"}],"output":{"name":"option"}}],[11,"size_hint","","",102,null],[11,"next_back","","",102,{"inputs":[{"name":"inspect"}],"output":{"name":"option"}}],[11,"clone","","",103,{"inputs":[{"name":"stepby"}],"output":{"name":"stepby"}}],[11,"step_by","core::ops","Creates an iterator starting at the same point, but stepping by\nthe given amount at each iteration.",62,{"inputs":[{"name":"rangefrom"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",61,{"inputs":[{"name":"range"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"next","core::iter","",103,{"inputs":[{"name":"stepby"}],"output":{"name":"option"}}],[11,"size_hint","","",103,null],[11,"clone","","",104,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"rangeinclusive"}}],[11,"next","","",104,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"size_hint","","",104,null],[11,"next_back","","",104,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"next","","",103,{"inputs":[{"name":"stepby"}],"output":{"name":"option"}}],[11,"size_hint","","",103,null],[11,"next","core::ops","",61,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"size_hint","","",61,null],[11,"next_back","","",61,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"next","","",62,{"inputs":[{"name":"rangefrom"}],"output":{"name":"option"}}],[11,"clone","core::iter","",105,{"inputs":[{"name":"repeat"}],"output":{"name":"repeat"}}],[11,"next","","",105,{"inputs":[{"name":"repeat"}],"output":{"name":"option"}}],[11,"size_hint","","",105,null],[11,"next_back","","",105,{"inputs":[{"name":"repeat"}],"output":{"name":"option"}}],[11,"next","","",106,{"inputs":[{"name":"empty"}],"output":{"name":"option"}}],[11,"size_hint","","",106,null],[11,"next_back","","",106,{"inputs":[{"name":"empty"}],"output":{"name":"option"}}],[11,"len","","",106,{"inputs":[{"name":"empty"}],"output":{"name":"usize"}}],[11,"clone","","",106,{"inputs":[{"name":"empty"}],"output":{"name":"empty"}}],[11,"default","","",106,{"inputs":[],"output":{"name":"empty"}}],[11,"clone","","",107,{"inputs":[{"name":"once"}],"output":{"name":"once"}}],[11,"next","","",107,{"inputs":[{"name":"once"}],"output":{"name":"option"}}],[11,"size_hint","","",107,null],[11,"next_back","","",107,{"inputs":[{"name":"once"}],"output":{"name":"option"}}],[11,"len","","",107,{"inputs":[{"name":"once"}],"output":{"name":"usize"}}],[11,"hash","core::option","",51,null],[11,"fmt","","",51,{"inputs":[{"name":"option"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",51,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",51,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"lt","","",51,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"le","","",51,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"gt","","",51,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ge","","",51,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"eq","","",51,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ne","","",51,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"clone","","",51,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"default","","",51,{"inputs":[],"output":{"name":"option"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",51,{"inputs":[{"name":"option"}],"output":{"name":"intoiter"}}],[11,"clone","","",108,{"inputs":[{"name":"item"}],"output":{"name":"item"}}],[11,"next","","",108,{"inputs":[{"name":"item"}],"output":{"name":"option"}}],[11,"size_hint","","",108,null],[11,"next_back","","",108,{"inputs":[{"name":"item"}],"output":{"name":"option"}}],[11,"next","","",109,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",109,null],[11,"next_back","","",109,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",109,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",110,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",110,null],[11,"next_back","","",110,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"clone","","",111,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[11,"next","","",111,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",111,null],[11,"next_back","","",111,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","Takes each element in the `Iterator`: if it is `None`, no further\nelements are taken, and the `None` is returned. Should no `None` occur, a\ncontainer with the values of each `Option` is returned.",51,{"inputs":[{"name":"i"}],"output":{"name":"option"}}],[11,"clone","core::raw","",112,{"inputs":[{"name":"slice"}],"output":{"name":"slice"}}],[11,"clone","","",113,{"inputs":[{"name":"traitobject"}],"output":{"name":"traitobject"}}],[11,"hash","core::result","",114,null],[11,"fmt","","",114,{"inputs":[{"name":"result"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",114,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",114,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"option"}}],[11,"lt","","",114,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"le","","",114,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"gt","","",114,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ge","","",114,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"eq","","",114,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ne","","",114,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"clone","","",114,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"is_ok","","Returns true if the result is `Ok`",114,{"inputs":[{"name":"result"}],"output":{"name":"bool"}}],[11,"is_err","","Returns true if the result is `Err`",114,{"inputs":[{"name":"result"}],"output":{"name":"bool"}}],[11,"ok","","Converts from `Result&lt;T, E&gt;` to `Option&lt;T&gt;`",114,{"inputs":[{"name":"result"}],"output":{"name":"option"}}],[11,"err","","Converts from `Result&lt;T, E&gt;` to `Option&lt;E&gt;`",114,{"inputs":[{"name":"result"}],"output":{"name":"option"}}],[11,"as_ref","","Converts from `Result&lt;T, E&gt;` to `Result&lt;&amp;T, &amp;E&gt;`",114,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"as_mut","","Converts from `Result&lt;T, E&gt;` to `Result&lt;&amp;mut T, &amp;mut E&gt;`",114,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"map","","Maps a `Result&lt;T, E&gt;` to `Result&lt;U, E&gt;` by applying a function to a\ncontained `Ok` value, leaving an `Err` value untouched.",114,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"result"}}],[11,"map_err","","Maps a `Result&lt;T, E&gt;` to `Result&lt;T, F&gt;` by applying a function to a\ncontained `Err` value, leaving an `Ok` value untouched.",114,{"inputs":[{"name":"result"},{"name":"o"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",114,{"inputs":[{"name":"result"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",114,{"inputs":[{"name":"result"}],"output":{"name":"itermut"}}],[11,"and","","Returns `res` if the result is `Ok`, otherwise returns the `Err` value of `self`.",114,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"result"}}],[11,"and_then","","Calls `op` if the result is `Ok`, otherwise returns the `Err` value of `self`.",114,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"result"}}],[11,"or","","Returns `res` if the result is `Err`, otherwise returns the `Ok` value of `self`.",114,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"result"}}],[11,"or_else","","Calls `op` if the result is `Err`, otherwise returns the `Ok` value of `self`.",114,{"inputs":[{"name":"result"},{"name":"o"}],"output":{"name":"result"}}],[11,"unwrap_or","","Unwraps a result, yielding the content of an `Ok`.\nElse it returns `optb`.",114,{"inputs":[{"name":"result"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Unwraps a result, yielding the content of an `Ok`.\nIf the value is an `Err` then it calls `op` with its value.",114,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"t"}}],[11,"unwrap","","Unwraps a result, yielding the content of an `Ok`.",114,{"inputs":[{"name":"result"}],"output":{"name":"t"}}],[11,"expect","","Unwraps a result, yielding the content of an `Ok`.",114,{"inputs":[{"name":"result"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap_err","","Unwraps a result, yielding the content of an `Err`.",114,{"inputs":[{"name":"result"}],"output":{"name":"e"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",114,{"inputs":[{"name":"result"}],"output":{"name":"intoiter"}}],[11,"next","","",115,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",115,null],[11,"next_back","","",115,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",115,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",116,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",116,null],[11,"next_back","","",116,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next","","",117,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",117,null],[11,"next_back","","",117,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","Takes each element in the `Iterator`: if it is an `Err`, no further\nelements are taken, and the `Err` is returned. Should no `Err` occur, a\ncontainer with the values of each `Result` is returned.",114,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"as_slice","core::slice","View the underlying data as a subslice of the original data.",118,null],[11,"next","","",118,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",118,null],[11,"count","","",118,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[11,"nth","","",118,{"inputs":[{"name":"iter"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",118,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next_back","","",118,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",118,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"into_slice","","View the underlying data as a subslice of the original data.",119,null],[11,"next","","",119,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",119,null],[11,"count","","",119,{"inputs":[{"name":"itermut"}],"output":{"name":"usize"}}],[11,"nth","","",119,{"inputs":[{"name":"itermut"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",119,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next_back","","",119,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"clone","","",120,{"inputs":[{"name":"split"}],"output":{"name":"split"}}],[11,"next","","",120,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"size_hint","","",120,null],[11,"next_back","","",120,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"finish","","",120,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"finish","","",121,{"inputs":[{"name":"splitmut"}],"output":{"name":"option"}}],[11,"next","","",121,{"inputs":[{"name":"splitmut"}],"output":{"name":"option"}}],[11,"size_hint","","",121,null],[11,"next_back","","",121,{"inputs":[{"name":"splitmut"}],"output":{"name":"option"}}],[11,"next","","",122,{"inputs":[{"name":"genericsplitn"}],"output":{"name":"option"}}],[11,"size_hint","","",122,null],[11,"next","","",123,{"inputs":[{"name":"splitn"}],"output":{"name":"option"}}],[11,"size_hint","","",123,null],[11,"next","","",124,{"inputs":[{"name":"rsplitn"}],"output":{"name":"option"}}],[11,"size_hint","","",124,null],[11,"next","","",125,{"inputs":[{"name":"splitnmut"}],"output":{"name":"option"}}],[11,"size_hint","","",125,null],[11,"next","","",126,{"inputs":[{"name":"rsplitnmut"}],"output":{"name":"option"}}],[11,"size_hint","","",126,null],[11,"clone","","",127,{"inputs":[{"name":"windows"}],"output":{"name":"windows"}}],[11,"next","","",127,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"size_hint","","",127,null],[11,"count","","",127,{"inputs":[{"name":"windows"}],"output":{"name":"usize"}}],[11,"nth","","",127,{"inputs":[{"name":"windows"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",127,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"next_back","","",127,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"clone","","",128,{"inputs":[{"name":"chunks"}],"output":{"name":"chunks"}}],[11,"next","","",128,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"size_hint","","",128,null],[11,"count","","",128,{"inputs":[{"name":"chunks"}],"output":{"name":"usize"}}],[11,"nth","","",128,{"inputs":[{"name":"chunks"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",128,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"next_back","","",128,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"next","","",129,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"size_hint","","",129,null],[11,"count","","",129,{"inputs":[{"name":"chunksmut"}],"output":{"name":"usize"}}],[11,"nth","","",129,{"inputs":[{"name":"chunksmut"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",129,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"next_back","","",129,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"fmt","core::str::pattern","",130,{"inputs":[{"name":"searchstep"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",130,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"ne","","",130,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"clone","","",130,{"inputs":[{"name":"searchstep"}],"output":{"name":"searchstep"}}],[11,"clone","","",131,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"chareqsearcher"}}],[11,"into_searcher","","",132,{"inputs":[{"name":"chareqpattern"},{"name":"str"}],"output":{"name":"chareqsearcher"}}],[11,"haystack","","",131,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"str"}}],[11,"next","","",131,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"searchstep"}}],[11,"next_back","","",131,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"searchstep"}}],[11,"clone","","",133,{"inputs":[{"name":"charsearcher"}],"output":{"name":"charsearcher"}}],[11,"haystack","","",133,{"inputs":[{"name":"charsearcher"}],"output":{"name":"str"}}],[11,"next","","",133,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",133,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",133,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_back","","",133,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",133,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",133,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"clone","","",134,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"charslicesearcher"}}],[11,"haystack","","",134,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"str"}}],[11,"next","","",134,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",134,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",134,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_back","","",134,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",134,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",134,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"clone","","",135,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"charpredicatesearcher"}}],[11,"haystack","","",135,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"str"}}],[11,"next","","",135,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",135,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",135,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_back","","",135,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",135,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",135,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"fmt","","",136,{"inputs":[{"name":"strsearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",136,{"inputs":[{"name":"strsearcher"}],"output":{"name":"strsearcher"}}],[11,"fmt","","",137,{"inputs":[{"name":"strsearcherimpl"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",137,{"inputs":[{"name":"strsearcherimpl"}],"output":{"name":"strsearcherimpl"}}],[11,"fmt","","",138,{"inputs":[{"name":"emptyneedle"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",138,{"inputs":[{"name":"emptyneedle"}],"output":{"name":"emptyneedle"}}],[11,"haystack","","",136,{"inputs":[{"name":"strsearcher"}],"output":{"name":"str"}}],[11,"next","","",136,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",136,{"inputs":[{"name":"strsearcher"}],"output":{"name":"option"}}],[11,"next_back","","",136,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",136,{"inputs":[{"name":"strsearcher"}],"output":{"name":"option"}}],[11,"fmt","","",139,{"inputs":[{"name":"twowaysearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",139,{"inputs":[{"name":"twowaysearcher"}],"output":{"name":"twowaysearcher"}}],[11,"use_early_reject","","",140,{"inputs":[],"output":{"name":"bool"}}],[11,"rejecting","","",140,null],[11,"matching","","",140,null],[11,"use_early_reject","","",141,{"inputs":[],"output":{"name":"bool"}}],[11,"rejecting","","",141,null],[11,"matching","","",141,null],[11,"eq","core::str","",142,{"inputs":[{"name":"parseboolerror"},{"name":"parseboolerror"}],"output":{"name":"bool"}}],[11,"ne","","",142,{"inputs":[{"name":"parseboolerror"},{"name":"parseboolerror"}],"output":{"name":"bool"}}],[11,"clone","","",142,{"inputs":[{"name":"parseboolerror"}],"output":{"name":"parseboolerror"}}],[11,"fmt","","",142,{"inputs":[{"name":"parseboolerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",142,{"inputs":[{"name":"parseboolerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",143,{"inputs":[{"name":"utf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",143,{"inputs":[{"name":"utf8error"}],"output":{"name":"utf8error"}}],[11,"eq","","",143,{"inputs":[{"name":"utf8error"},{"name":"utf8error"}],"output":{"name":"bool"}}],[11,"ne","","",143,{"inputs":[{"name":"utf8error"},{"name":"utf8error"}],"output":{"name":"bool"}}],[11,"valid_up_to","","Returns the index in the given string up to which valid UTF-8 was\nverified.",143,{"inputs":[{"name":"utf8error"}],"output":{"name":"usize"}}],[11,"fmt","","",143,{"inputs":[{"name":"utf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",144,{"inputs":[{"name":"chars"}],"output":{"name":"chars"}}],[11,"next","","",144,{"inputs":[{"name":"chars"}],"output":{"name":"option"}}],[11,"size_hint","","",144,null],[11,"next_back","","",144,{"inputs":[{"name":"chars"}],"output":{"name":"option"}}],[11,"as_str","","View the underlying data as a subslice of the original data.",144,{"inputs":[{"name":"chars"}],"output":{"name":"str"}}],[11,"clone","","",145,{"inputs":[{"name":"charindices"}],"output":{"name":"charindices"}}],[11,"next","","",145,{"inputs":[{"name":"charindices"}],"output":{"name":"option"}}],[11,"size_hint","","",145,null],[11,"next_back","","",145,{"inputs":[{"name":"charindices"}],"output":{"name":"option"}}],[11,"as_str","","View the underlying data as a subslice of the original data.",145,{"inputs":[{"name":"charindices"}],"output":{"name":"str"}}],[11,"clone","","",146,{"inputs":[{"name":"bytes"}],"output":{"name":"bytes"}}],[11,"next","","",146,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"size_hint","","",146,null],[11,"count","","",146,{"inputs":[{"name":"bytes"}],"output":{"name":"usize"}}],[11,"last","","",146,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"nth","","",146,{"inputs":[{"name":"bytes"},{"name":"usize"}],"output":{"name":"option"}}],[11,"next_back","","",146,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"len","","",146,{"inputs":[{"name":"bytes"}],"output":{"name":"usize"}}],[11,"clone","","",147,{"inputs":[{"name":"splitinternal"}],"output":{"name":"splitinternal"}}],[11,"next","","",148,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"clone","","",148,{"inputs":[{"name":"split"}],"output":{"name":"split"}}],[11,"next","","",149,{"inputs":[{"name":"rsplit"}],"output":{"name":"option"}}],[11,"clone","","",149,{"inputs":[{"name":"rsplit"}],"output":{"name":"rsplit"}}],[11,"next_back","","",148,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"next_back","","",149,{"inputs":[{"name":"rsplit"}],"output":{"name":"option"}}],[11,"next","","",150,{"inputs":[{"name":"splitterminator"}],"output":{"name":"option"}}],[11,"clone","","",150,{"inputs":[{"name":"splitterminator"}],"output":{"name":"splitterminator"}}],[11,"next","","",151,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"option"}}],[11,"clone","","",151,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"rsplitterminator"}}],[11,"next_back","","",150,{"inputs":[{"name":"splitterminator"}],"output":{"name":"option"}}],[11,"next_back","","",151,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"option"}}],[11,"clone","","",152,{"inputs":[{"name":"splitninternal"}],"output":{"name":"splitninternal"}}],[11,"next","","",153,{"inputs":[{"name":"splitn"}],"output":{"name":"option"}}],[11,"clone","","",153,{"inputs":[{"name":"splitn"}],"output":{"name":"splitn"}}],[11,"next","","",154,{"inputs":[{"name":"rsplitn"}],"output":{"name":"option"}}],[11,"clone","","",154,{"inputs":[{"name":"rsplitn"}],"output":{"name":"rsplitn"}}],[11,"clone","","",155,{"inputs":[{"name":"matchindicesinternal"}],"output":{"name":"matchindicesinternal"}}],[11,"next","","",156,{"inputs":[{"name":"matchindices"}],"output":{"name":"option"}}],[11,"clone","","",156,{"inputs":[{"name":"matchindices"}],"output":{"name":"matchindices"}}],[11,"next","","",157,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"option"}}],[11,"clone","","",157,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"rmatchindices"}}],[11,"next_back","","",156,{"inputs":[{"name":"matchindices"}],"output":{"name":"option"}}],[11,"next_back","","",157,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"option"}}],[11,"clone","","",158,{"inputs":[{"name":"matchesinternal"}],"output":{"name":"matchesinternal"}}],[11,"next","","",159,{"inputs":[{"name":"matches"}],"output":{"name":"option"}}],[11,"clone","","",159,{"inputs":[{"name":"matches"}],"output":{"name":"matches"}}],[11,"next","","",160,{"inputs":[{"name":"rmatches"}],"output":{"name":"option"}}],[11,"clone","","",160,{"inputs":[{"name":"rmatches"}],"output":{"name":"rmatches"}}],[11,"next_back","","",159,{"inputs":[{"name":"matches"}],"output":{"name":"option"}}],[11,"next_back","","",160,{"inputs":[{"name":"rmatches"}],"output":{"name":"option"}}],[11,"clone","","",161,{"inputs":[{"name":"lines"}],"output":{"name":"lines"}}],[11,"next","","",161,{"inputs":[{"name":"lines"}],"output":{"name":"option"}}],[11,"size_hint","","",161,null],[11,"next_back","","",161,{"inputs":[{"name":"lines"}],"output":{"name":"option"}}],[11,"clone","","",162,{"inputs":[{"name":"linesany"}],"output":{"name":"linesany"}}],[11,"clone","","",163,{"inputs":[{"name":"linesanymap"}],"output":{"name":"linesanymap"}}],[11,"call","","",163,null],[11,"call_mut","","",163,null],[11,"call_once","","",163,null],[11,"next","","",162,{"inputs":[{"name":"linesany"}],"output":{"name":"option"}}],[11,"size_hint","","",162,null],[11,"next_back","","",162,{"inputs":[{"name":"linesany"}],"output":{"name":"option"}}],[11,"clone","","",164,{"inputs":[{"name":"charrange"}],"output":{"name":"charrange"}}],[11,"new","core::hash::sip","Creates a new `SipHasher` with the two initial keys set to 0.",165,{"inputs":[],"output":{"name":"siphasher"}}],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",165,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher"}}],[11,"write","","",165,null],[11,"finish","","",165,{"inputs":[{"name":"siphasher"}],"output":{"name":"u64"}}],[11,"clone","","",165,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"default","","",165,{"inputs":[],"output":{"name":"siphasher"}}],[11,"build_hasher","core::hash","",166,{"inputs":[{"name":"buildhasherdefault"}],"output":{"name":"h"}}],[11,"clone","","",166,{"inputs":[{"name":"buildhasherdefault"}],"output":{"name":"buildhasherdefault"}}],[11,"default","","",166,{"inputs":[],"output":{"name":"buildhasherdefault"}}],[11,"eq","core::fmt::num","",167,{"inputs":[{"name":"binary"},{"name":"binary"}],"output":{"name":"bool"}}],[11,"ne","","",167,{"inputs":[{"name":"binary"},{"name":"binary"}],"output":{"name":"bool"}}],[11,"clone","","",167,{"inputs":[{"name":"binary"}],"output":{"name":"binary"}}],[11,"eq","","",168,{"inputs":[{"name":"octal"},{"name":"octal"}],"output":{"name":"bool"}}],[11,"ne","","",168,{"inputs":[{"name":"octal"},{"name":"octal"}],"output":{"name":"bool"}}],[11,"clone","","",168,{"inputs":[{"name":"octal"}],"output":{"name":"octal"}}],[11,"eq","","",169,{"inputs":[{"name":"decimal"},{"name":"decimal"}],"output":{"name":"bool"}}],[11,"ne","","",169,{"inputs":[{"name":"decimal"},{"name":"decimal"}],"output":{"name":"bool"}}],[11,"clone","","",169,{"inputs":[{"name":"decimal"}],"output":{"name":"decimal"}}],[11,"eq","","",170,{"inputs":[{"name":"lowerhex"},{"name":"lowerhex"}],"output":{"name":"bool"}}],[11,"ne","","",170,{"inputs":[{"name":"lowerhex"},{"name":"lowerhex"}],"output":{"name":"bool"}}],[11,"clone","","",170,{"inputs":[{"name":"lowerhex"}],"output":{"name":"lowerhex"}}],[11,"eq","","",171,{"inputs":[{"name":"upperhex"},{"name":"upperhex"}],"output":{"name":"bool"}}],[11,"ne","","",171,{"inputs":[{"name":"upperhex"},{"name":"upperhex"}],"output":{"name":"bool"}}],[11,"clone","","",171,{"inputs":[{"name":"upperhex"}],"output":{"name":"upperhex"}}],[11,"eq","","",172,{"inputs":[{"name":"radix"},{"name":"radix"}],"output":{"name":"bool"}}],[11,"ne","","",172,{"inputs":[{"name":"radix"},{"name":"radix"}],"output":{"name":"bool"}}],[11,"clone","","",172,{"inputs":[{"name":"radix"}],"output":{"name":"radix"}}],[11,"clone","","",173,{"inputs":[{"name":"radixfmt"}],"output":{"name":"radixfmt"}}],[11,"fmt","","",173,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",173,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",173,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",173,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",173,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",173,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",173,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",173,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",173,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",173,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",173,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",173,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",173,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",173,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",173,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",173,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",173,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",173,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",173,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",173,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"write_str","core::fmt::builders","",174,{"inputs":[{"name":"padadapter"},{"name":"str"}],"output":{"name":"result"}}],[11,"field","","Adds a new field to the generated struct output.",175,{"inputs":[{"name":"debugstruct"},{"name":"str"},{"name":"debug"}],"output":{"name":"debugstruct"}}],[11,"finish","","Finishes output and returns any error encountered.",175,{"inputs":[{"name":"debugstruct"}],"output":{"name":"result"}}],[11,"field","","Adds a new field to the generated tuple struct output.",176,{"inputs":[{"name":"debugtuple"},{"name":"debug"}],"output":{"name":"debugtuple"}}],[11,"finish","","Finishes output and returns any error encountered.",176,{"inputs":[{"name":"debugtuple"}],"output":{"name":"result"}}],[11,"formatter","","Returns the wrapped `Formatter`.",176,{"inputs":[{"name":"debugtuple"}],"output":{"name":"formatter"}}],[11,"finish","","",177,null],[11,"entry","","Adds a new entry to the set output.",178,{"inputs":[{"name":"debugset"},{"name":"debug"}],"output":{"name":"debugset"}}],[11,"entries","","Adds the contents of an iterator of entries to the set output.",178,{"inputs":[{"name":"debugset"},{"name":"i"}],"output":{"name":"debugset"}}],[11,"finish","","Finishes output and returns any error encountered.",178,{"inputs":[{"name":"debugset"}],"output":{"name":"result"}}],[11,"entry","","Adds a new entry to the list output.",179,{"inputs":[{"name":"debuglist"},{"name":"debug"}],"output":{"name":"debuglist"}}],[11,"entries","","Adds the contents of an iterator of entries to the list output.",179,{"inputs":[{"name":"debuglist"},{"name":"i"}],"output":{"name":"debuglist"}}],[11,"finish","","Finishes output and returns any error encountered.",179,{"inputs":[{"name":"debuglist"}],"output":{"name":"result"}}],[11,"entry","","Adds a new entry to the map output.",180,{"inputs":[{"name":"debugmap"},{"name":"debug"},{"name":"debug"}],"output":{"name":"debugmap"}}],[11,"entries","","Adds the contents of an iterator of entries to the map output.",180,{"inputs":[{"name":"debugmap"},{"name":"i"}],"output":{"name":"debugmap"}}],[11,"finish","","Finishes output and returns any error encountered.",180,{"inputs":[{"name":"debugmap"}],"output":{"name":"result"}}],[11,"fmt","core::fmt","",181,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",181,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"clone","","",182,{"inputs":[{"name":"argumentv1"}],"output":{"name":"argumentv1"}}],[11,"clone","","",183,{"inputs":[{"name":"flagv1"}],"output":{"name":"flagv1"}}],[11,"clone","","",184,{"inputs":[{"name":"arguments"}],"output":{"name":"arguments"}}],[11,"fmt","","",184,{"inputs":[{"name":"arguments"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",184,{"inputs":[{"name":"arguments"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"pad_integral","","Performs the correct padding for an integer which has already been\nemitted into a str. The str should *not* contain the sign for the\ninteger, that will be added by this method.",185,{"inputs":[{"name":"formatter"},{"name":"bool"},{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[11,"pad","","This function takes a string slice and emits it to the internal buffer\nafter applying the relevant formatting flags specified. The flags\nrecognized for generic strings are:",185,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_str","","Writes some data to the underlying buffer contained within this\nformatter.",185,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_fmt","","Writes some formatted information into this instance",185,{"inputs":[{"name":"formatter"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"flags","","Flags for formatting (packed version of rt::Flag)",185,{"inputs":[{"name":"formatter"}],"output":{"name":"u32"}}],[11,"fill","","Character used as &#39;fill&#39; whenever there is alignment",185,{"inputs":[{"name":"formatter"}],"output":{"name":"char"}}],[11,"align","","Flag indicating what form of alignment was requested",185,{"inputs":[{"name":"formatter"}],"output":{"name":"alignment"}}],[11,"width","","Optionally specified integer width that the output should be",185,{"inputs":[{"name":"formatter"}],"output":{"name":"option"}}],[11,"precision","","Optionally specified precision for numeric types",185,{"inputs":[{"name":"formatter"}],"output":{"name":"option"}}],[11,"sign_plus","","Determines if the `+` flag was specified.",185,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"sign_minus","","Determines if the `-` flag was specified.",185,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"alternate","","Determines if the `#` flag was specified.",185,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"sign_aware_zero_pad","","Determines if the `0` flag was specified.",185,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"debug_struct","","Creates a `DebugStruct` builder designed to assist with creation of\n`fmt::Debug` implementations for structs.",185,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"debugstruct"}}],[11,"debug_tuple","","Creates a `DebugTuple` builder designed to assist with creation of\n`fmt::Debug` implementations for tuple structs.",185,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"debugtuple"}}],[11,"debug_list","","Creates a `DebugList` builder designed to assist with creation of\n`fmt::Debug` implementations for list-like structures.",185,{"inputs":[{"name":"formatter"}],"output":{"name":"debuglist"}}],[11,"debug_set","","Creates a `DebugSet` builder designed to assist with creation of\n`fmt::Debug` implementations for set-like structures.",185,{"inputs":[{"name":"formatter"}],"output":{"name":"debugset"}}],[11,"debug_map","","Creates a `DebugMap` builder designed to assist with creation of\n`fmt::Debug` implementations for map-like structures.",185,{"inputs":[{"name":"formatter"}],"output":{"name":"debugmap"}}],[11,"write_str","","",185,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char","","",185,{"inputs":[{"name":"formatter"},{"name":"char"}],"output":{"name":"result"}}],[11,"write_fmt","","",185,{"inputs":[{"name":"formatter"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"fmt","","",181,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::marker","",59,{"inputs":[{"name":"phantomdata"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::cell","",72,{"inputs":[{"name":"cell"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",74,{"inputs":[{"name":"refcell"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",76,{"inputs":[{"name":"ref"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",77,{"inputs":[{"name":"refmut"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone_from","libc::dox","Performs copy-assignment from `source`.",186,null],[11,"clone_from","libc::dox::imp","Performs copy-assignment from `source`.",186,null],[11,"clone","libc","",48,{"inputs":[{"name":"stat"}],"output":{"name":"stat"}}],[11,"clone","","",49,{"inputs":[{"name":"stat64"}],"output":{"name":"stat64"}}],[11,"clone","","",187,{"inputs":[{"name":"pthread_attr_t"}],"output":{"name":"pthread_attr_t"}}],[11,"clone","","",188,{"inputs":[{"name":"mcontext_t"}],"output":{"name":"mcontext_t"}}],[11,"clone","","",50,{"inputs":[{"name":"ucontext_t"}],"output":{"name":"ucontext_t"}}],[11,"clone","","",189,{"inputs":[{"name":"sigset_t"}],"output":{"name":"sigset_t"}}],[11,"clone","","",37,{"inputs":[{"name":"sigaction"}],"output":{"name":"sigaction"}}],[11,"clone","","",38,{"inputs":[{"name":"stack_t"}],"output":{"name":"stack_t"}}],[11,"clone","","",39,{"inputs":[{"name":"siginfo_t"}],"output":{"name":"siginfo_t"}}],[11,"clone","","",40,{"inputs":[{"name":"glob64_t"}],"output":{"name":"glob64_t"}}],[11,"clone","","",41,{"inputs":[{"name":"ucred"}],"output":{"name":"ucred"}}],[11,"clone","","",42,{"inputs":[{"name":"statfs"}],"output":{"name":"statfs"}}],[11,"clone","","",43,{"inputs":[{"name":"msghdr"}],"output":{"name":"msghdr"}}],[11,"clone","","",44,{"inputs":[{"name":"termios"}],"output":{"name":"termios"}}],[11,"clone","","",45,{"inputs":[{"name":"flock"}],"output":{"name":"flock"}}],[11,"clone","","",46,{"inputs":[{"name":"ipc_perm"}],"output":{"name":"ipc_perm"}}],[11,"clone","","",47,{"inputs":[{"name":"shmid_ds"}],"output":{"name":"shmid_ds"}}],[11,"clone","","",27,{"inputs":[{"name":"dirent"}],"output":{"name":"dirent"}}],[11,"clone","","",28,{"inputs":[{"name":"dirent64"}],"output":{"name":"dirent64"}}],[11,"clone","","",29,{"inputs":[{"name":"rlimit64"}],"output":{"name":"rlimit64"}}],[11,"clone","","",30,{"inputs":[{"name":"glob_t"}],"output":{"name":"glob_t"}}],[11,"clone","","",31,{"inputs":[{"name":"ifaddrs"}],"output":{"name":"ifaddrs"}}],[11,"clone","","",190,{"inputs":[{"name":"pthread_mutex_t"}],"output":{"name":"pthread_mutex_t"}}],[11,"clone","","",191,{"inputs":[{"name":"pthread_rwlock_t"}],"output":{"name":"pthread_rwlock_t"}}],[11,"clone","","",192,{"inputs":[{"name":"pthread_mutexattr_t"}],"output":{"name":"pthread_mutexattr_t"}}],[11,"clone","","",193,{"inputs":[{"name":"pthread_cond_t"}],"output":{"name":"pthread_cond_t"}}],[11,"clone","","",32,{"inputs":[{"name":"passwd"}],"output":{"name":"passwd"}}],[11,"clone","","",33,{"inputs":[{"name":"statvfs"}],"output":{"name":"statvfs"}}],[11,"clone","","",34,{"inputs":[{"name":"dqblk"}],"output":{"name":"dqblk"}}],[11,"clone","","",35,{"inputs":[{"name":"signalfd_siginfo"}],"output":{"name":"signalfd_siginfo"}}],[11,"clone","","",194,{"inputs":[{"name":"fsid_t"}],"output":{"name":"fsid_t"}}],[11,"clone","","",36,{"inputs":[{"name":"mq_attr"}],"output":{"name":"mq_attr"}}],[11,"clone","","",195,{"inputs":[{"name":"cpu_set_t"}],"output":{"name":"cpu_set_t"}}],[11,"clone","","",13,{"inputs":[{"name":"sockaddr"}],"output":{"name":"sockaddr"}}],[11,"clone","","",14,{"inputs":[{"name":"sockaddr_in"}],"output":{"name":"sockaddr_in"}}],[11,"clone","","",15,{"inputs":[{"name":"sockaddr_in6"}],"output":{"name":"sockaddr_in6"}}],[11,"clone","","",16,{"inputs":[{"name":"sockaddr_un"}],"output":{"name":"sockaddr_un"}}],[11,"clone","","",17,{"inputs":[{"name":"sockaddr_storage"}],"output":{"name":"sockaddr_storage"}}],[11,"clone","","",18,{"inputs":[{"name":"addrinfo"}],"output":{"name":"addrinfo"}}],[11,"clone","","",19,{"inputs":[{"name":"sockaddr_nl"}],"output":{"name":"sockaddr_nl"}}],[11,"clone","","",20,{"inputs":[{"name":"sockaddr_ll"}],"output":{"name":"sockaddr_ll"}}],[11,"clone","","",196,{"inputs":[{"name":"fd_set"}],"output":{"name":"fd_set"}}],[11,"clone","","",21,{"inputs":[{"name":"tm"}],"output":{"name":"tm"}}],[11,"clone","","",22,{"inputs":[{"name":"sched_param"}],"output":{"name":"sched_param"}}],[11,"clone","","",23,{"inputs":[{"name":"dl_info"}],"output":{"name":"dl_info"}}],[11,"clone","","",24,{"inputs":[{"name":"epoll_event"}],"output":{"name":"epoll_event"}}],[11,"clone","","",25,{"inputs":[{"name":"utsname"}],"output":{"name":"utsname"}}],[11,"clone","","",26,{"inputs":[{"name":"lconv"}],"output":{"name":"lconv"}}],[11,"clone","","",0,{"inputs":[{"name":"utimbuf"}],"output":{"name":"utimbuf"}}],[11,"clone","","",1,{"inputs":[{"name":"timeval"}],"output":{"name":"timeval"}}],[11,"clone","","",2,{"inputs":[{"name":"timespec"}],"output":{"name":"timespec"}}],[11,"clone","","",3,{"inputs":[{"name":"rlimit"}],"output":{"name":"rlimit"}}],[11,"clone","","",4,{"inputs":[{"name":"rusage"}],"output":{"name":"rusage"}}],[11,"clone","","",5,{"inputs":[{"name":"in_addr"}],"output":{"name":"in_addr"}}],[11,"clone","","",6,{"inputs":[{"name":"in6_addr"}],"output":{"name":"in6_addr"}}],[11,"clone","","",7,{"inputs":[{"name":"ip_mreq"}],"output":{"name":"ip_mreq"}}],[11,"clone","","",8,{"inputs":[{"name":"ipv6_mreq"}],"output":{"name":"ipv6_mreq"}}],[11,"clone","","",9,{"inputs":[{"name":"hostent"}],"output":{"name":"hostent"}}],[11,"clone","","",10,{"inputs":[{"name":"iovec"}],"output":{"name":"iovec"}}],[11,"clone","","",11,{"inputs":[{"name":"pollfd"}],"output":{"name":"pollfd"}}],[11,"clone","","",12,{"inputs":[{"name":"winsize"}],"output":{"name":"winsize"}}],[6,"int8_t","","",null,null],[6,"int16_t","","",null,null],[6,"int32_t","","",null,null],[6,"int64_t","","",null,null],[6,"uint8_t","","",null,null],[6,"uint16_t","","",null,null],[6,"uint32_t","","",null,null],[6,"uint64_t","","",null,null],[6,"c_schar","","",null,null],[6,"c_uchar","","",null,null],[6,"c_short","","",null,null],[6,"c_ushort","","",null,null],[6,"c_int","","",null,null],[6,"c_uint","","",null,null],[6,"c_float","","",null,null],[6,"c_double","","",null,null],[6,"c_longlong","","",null,null],[6,"c_ulonglong","","",null,null],[6,"intmax_t","","",null,null],[6,"uintmax_t","","",null,null],[6,"size_t","","",null,null],[6,"ptrdiff_t","","",null,null],[6,"intptr_t","","",null,null],[6,"uintptr_t","","",null,null],[6,"ssize_t","","",null,null],[6,"pid_t","","",null,null],[6,"uid_t","","",null,null],[6,"gid_t","","",null,null],[6,"in_addr_t","","",null,null],[6,"in_port_t","","",null,null],[6,"sighandler_t","","",null,null],[6,"cc_t","","",null,null],[6,"sa_family_t","","",null,null],[6,"pthread_key_t","","",null,null],[6,"speed_t","","",null,null],[6,"tcflag_t","","",null,null],[6,"loff_t","","",null,null],[6,"clockid_t","","",null,null],[6,"useconds_t","","",null,null],[6,"dev_t","","",null,null],[6,"socklen_t","","",null,null],[6,"pthread_t","","",null,null],[6,"mode_t","","",null,null],[6,"ino64_t","","",null,null],[6,"off64_t","","",null,null],[6,"blkcnt64_t","","",null,null],[6,"rlim64_t","","",null,null],[6,"key_t","","",null,null],[6,"shmatt_t","","",null,null],[6,"mqd_t","","",null,null],[6,"nfds_t","","",null,null],[6,"nl_item","","",null,null],[6,"fsblkcnt_t","","",null,null],[6,"fsfilcnt_t","","",null,null],[6,"rlim_t","","",null,null],[6,"c_long","","",null,null],[6,"c_ulong","","",null,null],[6,"clock_t","","",null,null],[6,"time_t","","",null,null],[6,"suseconds_t","","",null,null],[6,"ino_t","","",null,null],[6,"off_t","","",null,null],[6,"blkcnt_t","","",null,null],[6,"__fsword_t","","",null,null],[6,"c_char","","",null,null],[6,"wchar_t","","",null,null],[6,"nlink_t","","",null,null],[6,"blksize_t","","",null,null],[17,"SIG_DFL","","",null,null],[17,"SIG_IGN","","",null,null],[17,"SIG_ERR","","",null,null],[17,"DT_FIFO","","",null,null],[17,"DT_CHR","","",null,null],[17,"DT_DIR","","",null,null],[17,"DT_BLK","","",null,null],[17,"DT_REG","","",null,null],[17,"DT_LNK","","",null,null],[17,"DT_SOCK","","",null,null],[17,"FD_CLOEXEC","","",null,null],[17,"USRQUOTA","","",null,null],[17,"GRPQUOTA","","",null,null],[17,"SIGIOT","","",null,null],[17,"S_ISUID","","",null,null],[17,"S_ISGID","","",null,null],[17,"S_ISVTX","","",null,null],[17,"POLLIN","","",null,null],[17,"POLLPRI","","",null,null],[17,"POLLOUT","","",null,null],[17,"POLLERR","","",null,null],[17,"POLLHUP","","",null,null],[17,"POLLNVAL","","",null,null],[17,"IF_NAMESIZE","","",null,null],[17,"RTLD_LAZY","","",null,null],[17,"EXIT_FAILURE","","",null,null],[17,"EXIT_SUCCESS","","",null,null],[17,"RAND_MAX","","",null,null],[17,"EOF","","",null,null],[17,"SEEK_SET","","",null,null],[17,"SEEK_CUR","","",null,null],[17,"SEEK_END","","",null,null],[17,"_IOFBF","","",null,null],[17,"_IONBF","","",null,null],[17,"_IOLBF","","",null,null],[17,"F_DUPFD","","",null,null],[17,"F_GETFD","","",null,null],[17,"F_SETFD","","",null,null],[17,"F_GETFL","","",null,null],[17,"F_SETFL","","",null,null],[17,"F_SETLEASE","","",null,null],[17,"F_GETLEASE","","",null,null],[17,"F_NOTIFY","","",null,null],[17,"F_DUPFD_CLOEXEC","","",null,null],[17,"F_SETPIPE_SZ","","",null,null],[17,"F_GETPIPE_SZ","","",null,null],[17,"SIGTRAP","","",null,null],[17,"PTHREAD_CREATE_JOINABLE","","",null,null],[17,"PTHREAD_CREATE_DETACHED","","",null,null],[17,"CLOCK_REALTIME","","",null,null],[17,"CLOCK_MONOTONIC","","",null,null],[17,"CLOCK_PROCESS_CPUTIME_ID","","",null,null],[17,"CLOCK_THREAD_CPUTIME_ID","","",null,null],[17,"CLOCK_MONOTONIC_RAW","","",null,null],[17,"CLOCK_REALTIME_COARSE","","",null,null],[17,"CLOCK_MONOTONIC_COARSE","","",null,null],[17,"CLOCK_BOOTTIME","","",null,null],[17,"CLOCK_REALTIME_ALARM","","",null,null],[17,"CLOCK_BOOTTIME_ALARM","","",null,null],[17,"RLIMIT_CPU","","",null,null],[17,"RLIMIT_FSIZE","","",null,null],[17,"RLIMIT_DATA","","",null,null],[17,"RLIMIT_STACK","","",null,null],[17,"RLIMIT_CORE","","",null,null],[17,"RLIMIT_LOCKS","","",null,null],[17,"RLIMIT_SIGPENDING","","",null,null],[17,"RLIMIT_MSGQUEUE","","",null,null],[17,"RLIMIT_NICE","","",null,null],[17,"RLIMIT_RTPRIO","","",null,null],[17,"RUSAGE_SELF","","",null,null],[17,"O_RDONLY","","",null,null],[17,"O_WRONLY","","",null,null],[17,"O_RDWR","","",null,null],[17,"O_TRUNC","","",null,null],[17,"O_CLOEXEC","","",null,null],[17,"SOCK_CLOEXEC","","",null,null],[17,"S_IFIFO","","",null,null],[17,"S_IFCHR","","",null,null],[17,"S_IFBLK","","",null,null],[17,"S_IFDIR","","",null,null],[17,"S_IFREG","","",null,null],[17,"S_IFLNK","","",null,null],[17,"S_IFSOCK","","",null,null],[17,"S_IFMT","","",null,null],[17,"S_IRWXU","","",null,null],[17,"S_IXUSR","","",null,null],[17,"S_IWUSR","","",null,null],[17,"S_IRUSR","","",null,null],[17,"S_IRWXG","","",null,null],[17,"S_IXGRP","","",null,null],[17,"S_IWGRP","","",null,null],[17,"S_IRGRP","","",null,null],[17,"S_IRWXO","","",null,null],[17,"S_IXOTH","","",null,null],[17,"S_IWOTH","","",null,null],[17,"S_IROTH","","",null,null],[17,"F_OK","","",null,null],[17,"R_OK","","",null,null],[17,"W_OK","","",null,null],[17,"X_OK","","",null,null],[17,"STDIN_FILENO","","",null,null],[17,"STDOUT_FILENO","","",null,null],[17,"STDERR_FILENO","","",null,null],[17,"SIGHUP","","",null,null],[17,"SIGINT","","",null,null],[17,"SIGQUIT","","",null,null],[17,"SIGILL","","",null,null],[17,"SIGABRT","","",null,null],[17,"SIGFPE","","",null,null],[17,"SIGKILL","","",null,null],[17,"SIGSEGV","","",null,null],[17,"SIGPIPE","","",null,null],[17,"SIGALRM","","",null,null],[17,"SIGTERM","","",null,null],[17,"PROT_NONE","","",null,null],[17,"PROT_READ","","",null,null],[17,"PROT_WRITE","","",null,null],[17,"PROT_EXEC","","",null,null],[17,"LC_CTYPE","","",null,null],[17,"LC_NUMERIC","","",null,null],[17,"LC_TIME","","",null,null],[17,"LC_COLLATE","","",null,null],[17,"LC_MONETARY","","",null,null],[17,"LC_MESSAGES","","",null,null],[17,"LC_ALL","","",null,null],[17,"LC_CTYPE_MASK","","",null,null],[17,"LC_NUMERIC_MASK","","",null,null],[17,"LC_TIME_MASK","","",null,null],[17,"LC_COLLATE_MASK","","",null,null],[17,"LC_MONETARY_MASK","","",null,null],[17,"LC_MESSAGES_MASK","","",null,null],[17,"MAP_FILE","","",null,null],[17,"MAP_SHARED","","",null,null],[17,"MAP_PRIVATE","","",null,null],[17,"MAP_FIXED","","",null,null],[17,"MAP_FAILED","","",null,null],[17,"MCL_CURRENT","","",null,null],[17,"MCL_FUTURE","","",null,null],[17,"MS_ASYNC","","",null,null],[17,"MS_INVALIDATE","","",null,null],[17,"MS_SYNC","","",null,null],[17,"MS_RDONLY","","",null,null],[17,"MS_NOSUID","","",null,null],[17,"MS_NODEV","","",null,null],[17,"MS_NOEXEC","","",null,null],[17,"MS_SYNCHRONOUS","","",null,null],[17,"MS_REMOUNT","","",null,null],[17,"MS_MANDLOCK","","",null,null],[17,"MS_DIRSYNC","","",null,null],[17,"MS_NOATIME","","",null,null],[17,"MS_NODIRATIME","","",null,null],[17,"MS_BIND","","",null,null],[17,"MS_MOVE","","",null,null],[17,"MS_REC","","",null,null],[17,"MS_SILENT","","",null,null],[17,"MS_POSIXACL","","",null,null],[17,"MS_UNBINDABLE","","",null,null],[17,"MS_PRIVATE","","",null,null],[17,"MS_SLAVE","","",null,null],[17,"MS_SHARED","","",null,null],[17,"MS_RELATIME","","",null,null],[17,"MS_KERNMOUNT","","",null,null],[17,"MS_I_VERSION","","",null,null],[17,"MS_STRICTATIME","","",null,null],[17,"MS_ACTIVE","","",null,null],[17,"MS_NOUSER","","",null,null],[17,"MS_MGC_VAL","","",null,null],[17,"MS_MGC_MSK","","",null,null],[17,"MS_RMT_MASK","","",null,null],[17,"EPERM","","",null,null],[17,"ENOENT","","",null,null],[17,"ESRCH","","",null,null],[17,"EINTR","","",null,null],[17,"EIO","","",null,null],[17,"ENXIO","","",null,null],[17,"E2BIG","","",null,null],[17,"ENOEXEC","","",null,null],[17,"EBADF","","",null,null],[17,"ECHILD","","",null,null],[17,"EAGAIN","","",null,null],[17,"ENOMEM","","",null,null],[17,"EACCES","","",null,null],[17,"EFAULT","","",null,null],[17,"ENOTBLK","","",null,null],[17,"EBUSY","","",null,null],[17,"EEXIST","","",null,null],[17,"EXDEV","","",null,null],[17,"ENODEV","","",null,null],[17,"ENOTDIR","","",null,null],[17,"EISDIR","","",null,null],[17,"EINVAL","","",null,null],[17,"ENFILE","","",null,null],[17,"EMFILE","","",null,null],[17,"ENOTTY","","",null,null],[17,"ETXTBSY","","",null,null],[17,"EFBIG","","",null,null],[17,"ENOSPC","","",null,null],[17,"ESPIPE","","",null,null],[17,"EROFS","","",null,null],[17,"EMLINK","","",null,null],[17,"EPIPE","","",null,null],[17,"EDOM","","",null,null],[17,"ERANGE","","",null,null],[17,"EWOULDBLOCK","","",null,null],[17,"EBFONT","","",null,null],[17,"ENOSTR","","",null,null],[17,"ENODATA","","",null,null],[17,"ETIME","","",null,null],[17,"ENOSR","","",null,null],[17,"ENONET","","",null,null],[17,"ENOPKG","","",null,null],[17,"EREMOTE","","",null,null],[17,"ENOLINK","","",null,null],[17,"EADV","","",null,null],[17,"ESRMNT","","",null,null],[17,"ECOMM","","",null,null],[17,"EPROTO","","",null,null],[17,"EDOTDOT","","",null,null],[17,"AF_PACKET","","",null,null],[17,"IPPROTO_RAW","","",null,null],[17,"PROT_GROWSDOWN","","",null,null],[17,"PROT_GROWSUP","","",null,null],[17,"MAP_TYPE","","",null,null],[17,"MADV_NORMAL","","",null,null],[17,"MADV_RANDOM","","",null,null],[17,"MADV_SEQUENTIAL","","",null,null],[17,"MADV_WILLNEED","","",null,null],[17,"MADV_DONTNEED","","",null,null],[17,"MADV_REMOVE","","",null,null],[17,"MADV_DONTFORK","","",null,null],[17,"MADV_DOFORK","","",null,null],[17,"MADV_MERGEABLE","","",null,null],[17,"MADV_UNMERGEABLE","","",null,null],[17,"MADV_HWPOISON","","",null,null],[17,"IFF_LOOPBACK","","",null,null],[17,"AF_UNIX","","",null,null],[17,"AF_INET","","",null,null],[17,"AF_INET6","","",null,null],[17,"SOCK_RAW","","",null,null],[17,"IPPROTO_TCP","","",null,null],[17,"IPPROTO_IP","","",null,null],[17,"IPPROTO_IPV6","","",null,null],[17,"IP_MULTICAST_TTL","","",null,null],[17,"IP_MULTICAST_LOOP","","",null,null],[17,"IP_TTL","","",null,null],[17,"IP_HDRINCL","","",null,null],[17,"IP_ADD_MEMBERSHIP","","",null,null],[17,"IP_DROP_MEMBERSHIP","","",null,null],[17,"IP_TRANSPARENT","","",null,null],[17,"IPV6_ADD_MEMBERSHIP","","",null,null],[17,"IPV6_DROP_MEMBERSHIP","","",null,null],[17,"TCP_NODELAY","","",null,null],[17,"TCP_MAXSEG","","",null,null],[17,"TCP_CORK","","",null,null],[17,"TCP_KEEPIDLE","","",null,null],[17,"TCP_KEEPINTVL","","",null,null],[17,"TCP_KEEPCNT","","",null,null],[17,"TCP_SYNCNT","","",null,null],[17,"TCP_LINGER2","","",null,null],[17,"TCP_DEFER_ACCEPT","","",null,null],[17,"TCP_WINDOW_CLAMP","","",null,null],[17,"TCP_INFO","","",null,null],[17,"TCP_QUICKACK","","",null,null],[17,"TCP_CONGESTION","","",null,null],[17,"IPV6_MULTICAST_LOOP","","",null,null],[17,"IPV6_V6ONLY","","",null,null],[17,"SO_DEBUG","","",null,null],[17,"SHUT_RD","","",null,null],[17,"SHUT_WR","","",null,null],[17,"SHUT_RDWR","","",null,null],[17,"LOCK_SH","","",null,null],[17,"LOCK_EX","","",null,null],[17,"LOCK_NB","","",null,null],[17,"LOCK_UN","","",null,null],[17,"SIGSTKSZ","","",null,null],[17,"SA_NODEFER","","",null,null],[17,"SA_RESETHAND","","",null,null],[17,"SA_RESTART","","",null,null],[17,"SA_NOCLDSTOP","","",null,null],[17,"SS_ONSTACK","","",null,null],[17,"SS_DISABLE","","",null,null],[17,"PATH_MAX","","",null,null],[17,"FD_SETSIZE","","",null,null],[17,"EPOLLIN","","",null,null],[17,"EPOLLPRI","","",null,null],[17,"EPOLLOUT","","",null,null],[17,"EPOLLRDNORM","","",null,null],[17,"EPOLLRDBAND","","",null,null],[17,"EPOLLWRNORM","","",null,null],[17,"EPOLLWRBAND","","",null,null],[17,"EPOLLMSG","","",null,null],[17,"EPOLLERR","","",null,null],[17,"EPOLLHUP","","",null,null],[17,"EPOLLET","","",null,null],[17,"EPOLL_CTL_ADD","","",null,null],[17,"EPOLL_CTL_MOD","","",null,null],[17,"EPOLL_CTL_DEL","","",null,null],[17,"MNT_DETACH","","",null,null],[17,"MNT_EXPIRE","","",null,null],[17,"Q_GETFMT","","",null,null],[17,"Q_GETINFO","","",null,null],[17,"Q_SETINFO","","",null,null],[17,"QIF_BLIMITS","","",null,null],[17,"QIF_SPACE","","",null,null],[17,"QIF_ILIMITS","","",null,null],[17,"QIF_INODES","","",null,null],[17,"QIF_BTIME","","",null,null],[17,"QIF_ITIME","","",null,null],[17,"QIF_LIMITS","","",null,null],[17,"QIF_USAGE","","",null,null],[17,"QIF_TIMES","","",null,null],[17,"QIF_ALL","","",null,null],[17,"CBAUD","","",null,null],[17,"EFD_CLOEXEC","","",null,null],[17,"MNT_FORCE","","",null,null],[17,"Q_SYNC","","",null,null],[17,"Q_QUOTAON","","",null,null],[17,"Q_QUOTAOFF","","",null,null],[17,"Q_GETQUOTA","","",null,null],[17,"Q_SETQUOTA","","",null,null],[17,"TCIOFF","","",null,null],[17,"TCION","","",null,null],[17,"TCOOFF","","",null,null],[17,"TCOON","","",null,null],[17,"TCIFLUSH","","",null,null],[17,"TCOFLUSH","","",null,null],[17,"TCIOFLUSH","","",null,null],[17,"NL0","","",null,null],[17,"NL1","","",null,null],[17,"TAB0","","",null,null],[17,"TAB1","","",null,null],[17,"TAB2","","",null,null],[17,"TAB3","","",null,null],[17,"CR0","","",null,null],[17,"CR1","","",null,null],[17,"CR2","","",null,null],[17,"CR3","","",null,null],[17,"FF0","","",null,null],[17,"FF1","","",null,null],[17,"BS0","","",null,null],[17,"BS1","","",null,null],[17,"VT0","","",null,null],[17,"VT1","","",null,null],[17,"VERASE","","",null,null],[17,"VWERASE","","",null,null],[17,"VKILL","","",null,null],[17,"VREPRINT","","",null,null],[17,"VINTR","","",null,null],[17,"VQUIT","","",null,null],[17,"VSUSP","","",null,null],[17,"VSTART","","",null,null],[17,"VSTOP","","",null,null],[17,"VLNEXT","","",null,null],[17,"VDISCARD","","",null,null],[17,"VTIME","","",null,null],[17,"IGNBRK","","",null,null],[17,"BRKINT","","",null,null],[17,"IGNPAR","","",null,null],[17,"PARMRK","","",null,null],[17,"INPCK","","",null,null],[17,"ISTRIP","","",null,null],[17,"INLCR","","",null,null],[17,"IGNCR","","",null,null],[17,"ICRNL","","",null,null],[17,"IXON","","",null,null],[17,"IXOFF","","",null,null],[17,"IXANY","","",null,null],[17,"IMAXBEL","","",null,null],[17,"OPOST","","",null,null],[17,"ONLCR","","",null,null],[17,"CSIZE","","",null,null],[17,"CS5","","",null,null],[17,"CS6","","",null,null],[17,"CS7","","",null,null],[17,"CS8","","",null,null],[17,"CSTOPB","","",null,null],[17,"CREAD","","",null,null],[17,"PARENB","","",null,null],[17,"PARODD","","",null,null],[17,"HUPCL","","",null,null],[17,"CLOCAL","","",null,null],[17,"CRTSCTS","","",null,null],[17,"ECHOKE","","",null,null],[17,"ECHOE","","",null,null],[17,"ECHOK","","",null,null],[17,"ECHO","","",null,null],[17,"ECHONL","","",null,null],[17,"ECHOPRT","","",null,null],[17,"ECHOCTL","","",null,null],[17,"ISIG","","",null,null],[17,"ICANON","","",null,null],[17,"PENDIN","","",null,null],[17,"NOFLSH","","",null,null],[17,"CLONE_VM","","",null,null],[17,"CLONE_FS","","",null,null],[17,"CLONE_FILES","","",null,null],[17,"CLONE_SIGHAND","","",null,null],[17,"CLONE_PTRACE","","",null,null],[17,"CLONE_VFORK","","",null,null],[17,"CLONE_PARENT","","",null,null],[17,"CLONE_THREAD","","",null,null],[17,"CLONE_NEWNS","","",null,null],[17,"CLONE_SYSVSEM","","",null,null],[17,"CLONE_SETTLS","","",null,null],[17,"CLONE_PARENT_SETTID","","",null,null],[17,"CLONE_CHILD_CLEARTID","","",null,null],[17,"CLONE_DETACHED","","",null,null],[17,"CLONE_UNTRACED","","",null,null],[17,"CLONE_CHILD_SETTID","","",null,null],[17,"CLONE_NEWUTS","","",null,null],[17,"CLONE_NEWIPC","","",null,null],[17,"CLONE_NEWUSER","","",null,null],[17,"CLONE_NEWPID","","",null,null],[17,"CLONE_NEWNET","","",null,null],[17,"CLONE_IO","","",null,null],[17,"WNOHANG","","",null,null],[17,"SPLICE_F_MOVE","","",null,null],[17,"SPLICE_F_NONBLOCK","","",null,null],[17,"SPLICE_F_MORE","","",null,null],[17,"SPLICE_F_GIFT","","",null,null],[17,"RTLD_LOCAL","","",null,null],[17,"POSIX_FADV_NORMAL","","",null,null],[17,"POSIX_FADV_RANDOM","","",null,null],[17,"POSIX_FADV_SEQUENTIAL","","",null,null],[17,"POSIX_FADV_WILLNEED","","",null,null],[17,"POSIX_FADV_DONTNEED","","",null,null],[17,"POSIX_FADV_NOREUSE","","",null,null],[17,"AT_FDCWD","","",null,null],[17,"AT_SYMLINK_NOFOLLOW","","",null,null],[17,"ABDAY_1","","",null,null],[17,"ABDAY_2","","",null,null],[17,"ABDAY_3","","",null,null],[17,"ABDAY_4","","",null,null],[17,"ABDAY_5","","",null,null],[17,"ABDAY_6","","",null,null],[17,"ABDAY_7","","",null,null],[17,"DAY_1","","",null,null],[17,"DAY_2","","",null,null],[17,"DAY_3","","",null,null],[17,"DAY_4","","",null,null],[17,"DAY_5","","",null,null],[17,"DAY_6","","",null,null],[17,"DAY_7","","",null,null],[17,"ABMON_1","","",null,null],[17,"ABMON_2","","",null,null],[17,"ABMON_3","","",null,null],[17,"ABMON_4","","",null,null],[17,"ABMON_5","","",null,null],[17,"ABMON_6","","",null,null],[17,"ABMON_7","","",null,null],[17,"ABMON_8","","",null,null],[17,"ABMON_9","","",null,null],[17,"ABMON_10","","",null,null],[17,"ABMON_11","","",null,null],[17,"ABMON_12","","",null,null],[17,"MON_1","","",null,null],[17,"MON_2","","",null,null],[17,"MON_3","","",null,null],[17,"MON_4","","",null,null],[17,"MON_5","","",null,null],[17,"MON_6","","",null,null],[17,"MON_7","","",null,null],[17,"MON_8","","",null,null],[17,"MON_9","","",null,null],[17,"MON_10","","",null,null],[17,"MON_11","","",null,null],[17,"MON_12","","",null,null],[17,"AM_STR","","",null,null],[17,"PM_STR","","",null,null],[17,"D_T_FMT","","",null,null],[17,"D_FMT","","",null,null],[17,"T_FMT","","",null,null],[17,"T_FMT_AMPM","","",null,null],[17,"ERA","","",null,null],[17,"ERA_D_FMT","","",null,null],[17,"ALT_DIGITS","","",null,null],[17,"ERA_D_T_FMT","","",null,null],[17,"ERA_T_FMT","","",null,null],[17,"CODESET","","",null,null],[17,"CRNCYSTR","","",null,null],[17,"RADIXCHAR","","",null,null],[17,"THOUSEP","","",null,null],[17,"YESEXPR","","",null,null],[17,"NOEXPR","","",null,null],[17,"YESSTR","","",null,null],[17,"NOSTR","","",null,null],[17,"FILENAME_MAX","","",null,null],[17,"L_tmpnam","","",null,null],[17,"_PC_NAME_MAX","","",null,null],[17,"_SC_ARG_MAX","","",null,null],[17,"_SC_CHILD_MAX","","",null,null],[17,"_SC_CLK_TCK","","",null,null],[17,"_SC_NGROUPS_MAX","","",null,null],[17,"_SC_OPEN_MAX","","",null,null],[17,"_SC_STREAM_MAX","","",null,null],[17,"_SC_TZNAME_MAX","","",null,null],[17,"_SC_JOB_CONTROL","","",null,null],[17,"_SC_SAVED_IDS","","",null,null],[17,"_SC_REALTIME_SIGNALS","","",null,null],[17,"_SC_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_TIMERS","","",null,null],[17,"_SC_ASYNCHRONOUS_IO","","",null,null],[17,"_SC_PRIORITIZED_IO","","",null,null],[17,"_SC_SYNCHRONIZED_IO","","",null,null],[17,"_SC_FSYNC","","",null,null],[17,"_SC_MAPPED_FILES","","",null,null],[17,"_SC_MEMLOCK","","",null,null],[17,"_SC_MEMLOCK_RANGE","","",null,null],[17,"_SC_MEMORY_PROTECTION","","",null,null],[17,"_SC_MESSAGE_PASSING","","",null,null],[17,"_SC_SEMAPHORES","","",null,null],[17,"_SC_SHARED_MEMORY_OBJECTS","","",null,null],[17,"_SC_AIO_LISTIO_MAX","","",null,null],[17,"_SC_AIO_MAX","","",null,null],[17,"_SC_AIO_PRIO_DELTA_MAX","","",null,null],[17,"_SC_DELAYTIMER_MAX","","",null,null],[17,"_SC_MQ_OPEN_MAX","","",null,null],[17,"_SC_MQ_PRIO_MAX","","",null,null],[17,"_SC_VERSION","","",null,null],[17,"_SC_PAGESIZE","","",null,null],[17,"_SC_PAGE_SIZE","","",null,null],[17,"_SC_RTSIG_MAX","","",null,null],[17,"_SC_SEM_NSEMS_MAX","","",null,null],[17,"_SC_SEM_VALUE_MAX","","",null,null],[17,"_SC_SIGQUEUE_MAX","","",null,null],[17,"_SC_TIMER_MAX","","",null,null],[17,"_SC_BC_BASE_MAX","","",null,null],[17,"_SC_BC_DIM_MAX","","",null,null],[17,"_SC_BC_SCALE_MAX","","",null,null],[17,"_SC_BC_STRING_MAX","","",null,null],[17,"_SC_COLL_WEIGHTS_MAX","","",null,null],[17,"_SC_EXPR_NEST_MAX","","",null,null],[17,"_SC_LINE_MAX","","",null,null],[17,"_SC_RE_DUP_MAX","","",null,null],[17,"_SC_2_VERSION","","",null,null],[17,"_SC_2_C_BIND","","",null,null],[17,"_SC_2_C_DEV","","",null,null],[17,"_SC_2_FORT_DEV","","",null,null],[17,"_SC_2_FORT_RUN","","",null,null],[17,"_SC_2_SW_DEV","","",null,null],[17,"_SC_2_LOCALEDEF","","",null,null],[17,"_SC_IOV_MAX","","",null,null],[17,"_SC_THREADS","","",null,null],[17,"_SC_THREAD_SAFE_FUNCTIONS","","",null,null],[17,"_SC_GETGR_R_SIZE_MAX","","",null,null],[17,"_SC_GETPW_R_SIZE_MAX","","",null,null],[17,"_SC_LOGIN_NAME_MAX","","",null,null],[17,"_SC_TTY_NAME_MAX","","",null,null],[17,"_SC_THREAD_DESTRUCTOR_ITERATIONS","","",null,null],[17,"_SC_THREAD_KEYS_MAX","","",null,null],[17,"_SC_THREAD_STACK_MIN","","",null,null],[17,"_SC_THREAD_THREADS_MAX","","",null,null],[17,"_SC_THREAD_ATTR_STACKADDR","","",null,null],[17,"_SC_THREAD_ATTR_STACKSIZE","","",null,null],[17,"_SC_THREAD_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_THREAD_PRIO_INHERIT","","",null,null],[17,"_SC_THREAD_PRIO_PROTECT","","",null,null],[17,"_SC_NPROCESSORS_ONLN","","",null,null],[17,"_SC_ATEXIT_MAX","","",null,null],[17,"_SC_XOPEN_VERSION","","",null,null],[17,"_SC_XOPEN_XCU_VERSION","","",null,null],[17,"_SC_XOPEN_UNIX","","",null,null],[17,"_SC_XOPEN_CRYPT","","",null,null],[17,"_SC_XOPEN_ENH_I18N","","",null,null],[17,"_SC_XOPEN_SHM","","",null,null],[17,"_SC_2_CHAR_TERM","","",null,null],[17,"_SC_2_UPE","","",null,null],[17,"_SC_XBS5_ILP32_OFF32","","",null,null],[17,"_SC_XBS5_ILP32_OFFBIG","","",null,null],[17,"_SC_XBS5_LPBIG_OFFBIG","","",null,null],[17,"_SC_XOPEN_LEGACY","","",null,null],[17,"_SC_XOPEN_REALTIME","","",null,null],[17,"_SC_XOPEN_REALTIME_THREADS","","",null,null],[17,"RLIM_SAVED_MAX","","",null,null],[17,"RLIM_SAVED_CUR","","",null,null],[17,"GLOB_ERR","","",null,null],[17,"GLOB_MARK","","",null,null],[17,"GLOB_NOSORT","","",null,null],[17,"GLOB_DOOFFS","","",null,null],[17,"GLOB_NOCHECK","","",null,null],[17,"GLOB_APPEND","","",null,null],[17,"GLOB_NOESCAPE","","",null,null],[17,"GLOB_NOSPACE","","",null,null],[17,"GLOB_ABORTED","","",null,null],[17,"GLOB_NOMATCH","","",null,null],[17,"POSIX_MADV_NORMAL","","",null,null],[17,"POSIX_MADV_RANDOM","","",null,null],[17,"POSIX_MADV_SEQUENTIAL","","",null,null],[17,"POSIX_MADV_WILLNEED","","",null,null],[17,"S_IEXEC","","",null,null],[17,"S_IWRITE","","",null,null],[17,"S_IREAD","","",null,null],[17,"F_LOCK","","",null,null],[17,"F_TEST","","",null,null],[17,"F_TLOCK","","",null,null],[17,"F_ULOCK","","",null,null],[17,"ST_RDONLY","","",null,null],[17,"ST_NOSUID","","",null,null],[17,"ST_NODEV","","",null,null],[17,"ST_NOEXEC","","",null,null],[17,"ST_SYNCHRONOUS","","",null,null],[17,"ST_MANDLOCK","","",null,null],[17,"ST_WRITE","","",null,null],[17,"ST_APPEND","","",null,null],[17,"ST_IMMUTABLE","","",null,null],[17,"ST_NOATIME","","",null,null],[17,"ST_NODIRATIME","","",null,null],[17,"RTLD_NEXT","","",null,null],[17,"RTLD_DEFAULT","","",null,null],[17,"RTLD_NODELETE","","",null,null],[17,"RTLD_NOW","","",null,null],[17,"TCP_MD5SIG","","",null,null],[17,"PTHREAD_MUTEX_INITIALIZER","","",null,null],[17,"PTHREAD_COND_INITIALIZER","","",null,null],[17,"PTHREAD_RWLOCK_INITIALIZER","","",null,null],[17,"PTHREAD_MUTEX_RECURSIVE","","",null,null],[17,"__SIZEOF_PTHREAD_COND_T","","",null,null],[17,"SCHED_OTHER","","",null,null],[17,"SCHED_FIFO","","",null,null],[17,"SCHED_RR","","",null,null],[17,"SCHED_BATCH","","",null,null],[17,"SCHED_IDLE","","",null,null],[17,"IPC_CREAT","","",null,null],[17,"IPC_EXCL","","",null,null],[17,"IPC_NOWAIT","","",null,null],[17,"IPC_RMID","","",null,null],[17,"IPC_SET","","",null,null],[17,"IPC_STAT","","",null,null],[17,"IPC_INFO","","",null,null],[17,"SHM_R","","",null,null],[17,"SHM_W","","",null,null],[17,"SHM_RDONLY","","",null,null],[17,"SHM_RND","","",null,null],[17,"SHM_REMAP","","",null,null],[17,"SHM_EXEC","","",null,null],[17,"SHM_LOCK","","",null,null],[17,"SHM_UNLOCK","","",null,null],[17,"SHM_HUGETLB","","",null,null],[17,"SHM_NORESERVE","","",null,null],[17,"EPOLLRDHUP","","",null,null],[17,"EPOLLONESHOT","","",null,null],[17,"QFMT_VFS_OLD","","",null,null],[17,"QFMT_VFS_V0","","",null,null],[17,"SFD_CLOEXEC","","",null,null],[17,"EFD_SEMAPHORE","","",null,null],[17,"NCCS","","",null,null],[17,"AF_NETLINK","","",null,null],[17,"RLIMIT_RSS","","",null,null],[17,"RLIMIT_NOFILE","","",null,null],[17,"RLIMIT_AS","","",null,null],[17,"RLIMIT_NPROC","","",null,null],[17,"RLIMIT_MEMLOCK","","",null,null],[17,"RLIM_INFINITY","","",null,null],[17,"RLIMIT_RTTIME","","",null,null],[17,"RLIMIT_NLIMITS","","",null,null],[17,"O_APPEND","","",null,null],[17,"O_CREAT","","",null,null],[17,"O_EXCL","","",null,null],[17,"O_NOCTTY","","",null,null],[17,"O_NONBLOCK","","",null,null],[17,"O_SYNC","","",null,null],[17,"O_RSYNC","","",null,null],[17,"O_DSYNC","","",null,null],[17,"O_FSYNC","","",null,null],[17,"SOCK_NONBLOCK","","",null,null],[17,"LC_PAPER","","",null,null],[17,"LC_NAME","","",null,null],[17,"LC_ADDRESS","","",null,null],[17,"LC_TELEPHONE","","",null,null],[17,"LC_MEASUREMENT","","",null,null],[17,"LC_IDENTIFICATION","","",null,null],[17,"LC_PAPER_MASK","","",null,null],[17,"LC_NAME_MASK","","",null,null],[17,"LC_ADDRESS_MASK","","",null,null],[17,"LC_TELEPHONE_MASK","","",null,null],[17,"LC_MEASUREMENT_MASK","","",null,null],[17,"LC_IDENTIFICATION_MASK","","",null,null],[17,"LC_ALL_MASK","","",null,null],[17,"MAP_ANON","","",null,null],[17,"MAP_ANONYMOUS","","",null,null],[17,"MAP_GROWSDOWN","","",null,null],[17,"MAP_DENYWRITE","","",null,null],[17,"MAP_EXECUTABLE","","",null,null],[17,"MAP_POPULATE","","",null,null],[17,"MAP_NONBLOCK","","",null,null],[17,"MAP_STACK","","",null,null],[17,"EDEADLK","","",null,null],[17,"ENAMETOOLONG","","",null,null],[17,"ENOLCK","","",null,null],[17,"ENOSYS","","",null,null],[17,"ENOTEMPTY","","",null,null],[17,"ELOOP","","",null,null],[17,"ENOMSG","","",null,null],[17,"EIDRM","","",null,null],[17,"ECHRNG","","",null,null],[17,"EL2NSYNC","","",null,null],[17,"EL3HLT","","",null,null],[17,"EL3RST","","",null,null],[17,"ELNRNG","","",null,null],[17,"EUNATCH","","",null,null],[17,"ENOCSI","","",null,null],[17,"EL2HLT","","",null,null],[17,"EBADE","","",null,null],[17,"EBADR","","",null,null],[17,"EXFULL","","",null,null],[17,"ENOANO","","",null,null],[17,"EBADRQC","","",null,null],[17,"EBADSLT","","",null,null],[17,"EMULTIHOP","","",null,null],[17,"EOVERFLOW","","",null,null],[17,"ENOTUNIQ","","",null,null],[17,"EBADFD","","",null,null],[17,"EBADMSG","","",null,null],[17,"EREMCHG","","",null,null],[17,"ELIBACC","","",null,null],[17,"ELIBBAD","","",null,null],[17,"ELIBSCN","","",null,null],[17,"ELIBMAX","","",null,null],[17,"ELIBEXEC","","",null,null],[17,"EILSEQ","","",null,null],[17,"ERESTART","","",null,null],[17,"ESTRPIPE","","",null,null],[17,"EUSERS","","",null,null],[17,"ENOTSOCK","","",null,null],[17,"EDESTADDRREQ","","",null,null],[17,"EMSGSIZE","","",null,null],[17,"EPROTOTYPE","","",null,null],[17,"ENOPROTOOPT","","",null,null],[17,"EPROTONOSUPPORT","","",null,null],[17,"ESOCKTNOSUPPORT","","",null,null],[17,"EOPNOTSUPP","","",null,null],[17,"EPFNOSUPPORT","","",null,null],[17,"EAFNOSUPPORT","","",null,null],[17,"EADDRINUSE","","",null,null],[17,"EADDRNOTAVAIL","","",null,null],[17,"ENETDOWN","","",null,null],[17,"ENETUNREACH","","",null,null],[17,"ENETRESET","","",null,null],[17,"ECONNABORTED","","",null,null],[17,"ECONNRESET","","",null,null],[17,"ENOBUFS","","",null,null],[17,"EISCONN","","",null,null],[17,"ENOTCONN","","",null,null],[17,"ESHUTDOWN","","",null,null],[17,"ETOOMANYREFS","","",null,null],[17,"ETIMEDOUT","","",null,null],[17,"ECONNREFUSED","","",null,null],[17,"EHOSTDOWN","","",null,null],[17,"EHOSTUNREACH","","",null,null],[17,"EALREADY","","",null,null],[17,"EINPROGRESS","","",null,null],[17,"ESTALE","","",null,null],[17,"EUCLEAN","","",null,null],[17,"ENOTNAM","","",null,null],[17,"ENAVAIL","","",null,null],[17,"EISNAM","","",null,null],[17,"EREMOTEIO","","",null,null],[17,"EDQUOT","","",null,null],[17,"ENOMEDIUM","","",null,null],[17,"EMEDIUMTYPE","","",null,null],[17,"ECANCELED","","",null,null],[17,"ENOKEY","","",null,null],[17,"EKEYEXPIRED","","",null,null],[17,"EKEYREVOKED","","",null,null],[17,"EKEYREJECTED","","",null,null],[17,"EOWNERDEAD","","",null,null],[17,"ENOTRECOVERABLE","","",null,null],[17,"EHWPOISON","","",null,null],[17,"ERFKILL","","",null,null],[17,"SOCK_STREAM","","",null,null],[17,"SOCK_DGRAM","","",null,null],[17,"SOL_SOCKET","","",null,null],[17,"SO_REUSEADDR","","",null,null],[17,"SO_TYPE","","",null,null],[17,"SO_ERROR","","",null,null],[17,"SO_DONTROUTE","","",null,null],[17,"SO_BROADCAST","","",null,null],[17,"SO_SNDBUF","","",null,null],[17,"SO_RCVBUF","","",null,null],[17,"SO_KEEPALIVE","","",null,null],[17,"SO_OOBINLINE","","",null,null],[17,"SO_LINGER","","",null,null],[17,"SO_REUSEPORT","","",null,null],[17,"SO_ACCEPTCONN","","",null,null],[17,"TCP_COOKIE_TRANSACTIONS","","",null,null],[17,"TCP_THIN_LINEAR_TIMEOUTS","","",null,null],[17,"TCP_THIN_DUPACK","","",null,null],[17,"TCP_USER_TIMEOUT","","",null,null],[17,"TCP_REPAIR","","",null,null],[17,"TCP_REPAIR_QUEUE","","",null,null],[17,"TCP_QUEUE_SEQ","","",null,null],[17,"TCP_REPAIR_OPTIONS","","",null,null],[17,"TCP_FASTOPEN","","",null,null],[17,"TCP_TIMESTAMP","","",null,null],[17,"SA_ONSTACK","","",null,null],[17,"SA_SIGINFO","","",null,null],[17,"SA_NOCLDWAIT","","",null,null],[17,"SIGCHLD","","",null,null],[17,"SIGBUS","","",null,null],[17,"SIGUSR1","","",null,null],[17,"SIGUSR2","","",null,null],[17,"SIGCONT","","",null,null],[17,"SIGSTOP","","",null,null],[17,"SIGTSTP","","",null,null],[17,"SIGURG","","",null,null],[17,"SIGIO","","",null,null],[17,"SIGSYS","","",null,null],[17,"SIGSTKFLT","","",null,null],[17,"SIGUNUSED","","",null,null],[17,"SIGTTIN","","",null,null],[17,"SIGTTOU","","",null,null],[17,"SIGXCPU","","",null,null],[17,"SIGXFSZ","","",null,null],[17,"SIGVTALRM","","",null,null],[17,"SIGPROF","","",null,null],[17,"SIGWINCH","","",null,null],[17,"SIGPOLL","","",null,null],[17,"SIGPWR","","",null,null],[17,"SIG_SETMASK","","",null,null],[17,"SIG_BLOCK","","",null,null],[17,"SIG_UNBLOCK","","",null,null],[17,"FALLOC_FL_KEEP_SIZE","","",null,null],[17,"FALLOC_FL_PUNCH_HOLE","","",null,null],[17,"BUFSIZ","","",null,null],[17,"TMP_MAX","","",null,null],[17,"FOPEN_MAX","","",null,null],[17,"POSIX_MADV_DONTNEED","","",null,null],[17,"_SC_2_C_VERSION","","",null,null],[17,"RUSAGE_THREAD","","",null,null],[17,"O_ACCMODE","","",null,null],[17,"O_ASYNC","","",null,null],[17,"O_NDELAY","","",null,null],[17,"RUSAGE_CHILDREN","","",null,null],[17,"ST_RELATIME","","",null,null],[17,"NI_MAXHOST","","",null,null],[17,"ADFS_SUPER_MAGIC","","",null,null],[17,"AFFS_SUPER_MAGIC","","",null,null],[17,"CODA_SUPER_MAGIC","","",null,null],[17,"CRAMFS_MAGIC","","",null,null],[17,"EFS_SUPER_MAGIC","","",null,null],[17,"EXT2_SUPER_MAGIC","","",null,null],[17,"EXT3_SUPER_MAGIC","","",null,null],[17,"EXT4_SUPER_MAGIC","","",null,null],[17,"HPFS_SUPER_MAGIC","","",null,null],[17,"HUGETLBFS_MAGIC","","",null,null],[17,"ISOFS_SUPER_MAGIC","","",null,null],[17,"JFFS2_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC2","","",null,null],[17,"MINIX2_SUPER_MAGIC","","",null,null],[17,"MINIX2_SUPER_MAGIC2","","",null,null],[17,"MSDOS_SUPER_MAGIC","","",null,null],[17,"NCP_SUPER_MAGIC","","",null,null],[17,"NFS_SUPER_MAGIC","","",null,null],[17,"OPENPROM_SUPER_MAGIC","","",null,null],[17,"PROC_SUPER_MAGIC","","",null,null],[17,"QNX4_SUPER_MAGIC","","",null,null],[17,"REISERFS_SUPER_MAGIC","","",null,null],[17,"SMB_SUPER_MAGIC","","",null,null],[17,"TMPFS_MAGIC","","",null,null],[17,"USBDEVICE_SUPER_MAGIC","","",null,null],[17,"VEOF","","",null,null],[17,"VEOL","","",null,null],[17,"VEOL2","","",null,null],[17,"VMIN","","",null,null],[17,"IEXTEN","","",null,null],[17,"TOSTOP","","",null,null],[17,"FLUSHO","","",null,null],[17,"IUTF8","","",null,null],[17,"CPU_SETSIZE","","",null,null],[17,"EXTPROC","","",null,null],[17,"QFMT_VFS_V1","","",null,null],[17,"PTRACE_TRACEME","","",null,null],[17,"PTRACE_PEEKTEXT","","",null,null],[17,"PTRACE_PEEKDATA","","",null,null],[17,"PTRACE_PEEKUSER","","",null,null],[17,"PTRACE_POKETEXT","","",null,null],[17,"PTRACE_POKEDATA","","",null,null],[17,"PTRACE_POKEUSER","","",null,null],[17,"PTRACE_CONT","","",null,null],[17,"PTRACE_KILL","","",null,null],[17,"PTRACE_SINGLESTEP","","",null,null],[17,"PTRACE_ATTACH","","",null,null],[17,"PTRACE_DETACH","","",null,null],[17,"PTRACE_SYSCALL","","",null,null],[17,"PTRACE_SETOPTIONS","","",null,null],[17,"PTRACE_GETEVENTMSG","","",null,null],[17,"PTRACE_GETSIGINFO","","",null,null],[17,"PTRACE_SETSIGINFO","","",null,null],[17,"PTRACE_GETREGSET","","",null,null],[17,"PTRACE_SETREGSET","","",null,null],[17,"PTRACE_SEIZE","","",null,null],[17,"PTRACE_INTERRUPT","","",null,null],[17,"PTRACE_LISTEN","","",null,null],[17,"PTRACE_PEEKSIGINFO","","",null,null],[17,"MADV_DODUMP","","",null,null],[17,"MADV_DONTDUMP","","",null,null],[17,"EPOLLWAKEUP","","",null,null],[17,"MADV_HUGEPAGE","","",null,null],[17,"MADV_NOHUGEPAGE","","",null,null],[17,"MAP_HUGETLB","","",null,null],[17,"EFD_NONBLOCK","","",null,null],[17,"F_GETLK","","",null,null],[17,"F_GETOWN","","",null,null],[17,"F_SETOWN","","",null,null],[17,"F_SETLK","","",null,null],[17,"F_SETLKW","","",null,null],[17,"SFD_NONBLOCK","","",null,null],[17,"TCSANOW","","",null,null],[17,"TCSADRAIN","","",null,null],[17,"TCSAFLUSH","","",null,null],[17,"TCGETS","","",null,null],[17,"TCSETS","","",null,null],[17,"TCSETSW","","",null,null],[17,"TCSETSF","","",null,null],[17,"TCGETA","","",null,null],[17,"TCSETA","","",null,null],[17,"TCSETAW","","",null,null],[17,"TCSETAF","","",null,null],[17,"TCSBRK","","",null,null],[17,"TCXONC","","",null,null],[17,"TCFLSH","","",null,null],[17,"TIOCGSOFTCAR","","",null,null],[17,"TIOCSSOFTCAR","","",null,null],[17,"TIOCINQ","","",null,null],[17,"TIOCLINUX","","",null,null],[17,"TIOCGSERIAL","","",null,null],[17,"TIOCEXCL","","",null,null],[17,"TIOCNXCL","","",null,null],[17,"TIOCSCTTY","","",null,null],[17,"TIOCGPGRP","","",null,null],[17,"TIOCSPGRP","","",null,null],[17,"TIOCOUTQ","","",null,null],[17,"TIOCSTI","","",null,null],[17,"TIOCGWINSZ","","",null,null],[17,"TIOCSWINSZ","","",null,null],[17,"TIOCMGET","","",null,null],[17,"TIOCMBIS","","",null,null],[17,"TIOCMBIC","","",null,null],[17,"TIOCMSET","","",null,null],[17,"FIONREAD","","",null,null],[17,"TIOCCONS","","",null,null],[17,"RTLD_DEEPBIND","","",null,null],[17,"RTLD_GLOBAL","","",null,null],[17,"RTLD_NOLOAD","","",null,null],[17,"PTHREAD_STACK_MIN","","",null,null],[17,"__SIZEOF_PTHREAD_RWLOCK_T","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEX_T","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEXATTR_T","","",null,null],[17,"O_DIRECT","","",null,null],[17,"O_DIRECTORY","","",null,null],[17,"O_NOFOLLOW","","",null,null],[17,"MAP_LOCKED","","",null,null],[17,"MAP_NORESERVE","","",null,null],[17,"MAP_32BIT","","",null,null],[17,"EDEADLOCK","","",null,null],[17,"SO_PEERCRED","","",null,null],[17,"SO_RCVLOWAT","","",null,null],[17,"SO_SNDLOWAT","","",null,null],[17,"SO_RCVTIMEO","","",null,null],[17,"SO_SNDTIMEO","","",null,null],[17,"FIOCLEX","","",null,null],[17,"FIONBIO","","",null,null],[17,"PTRACE_GETFPREGS","","",null,null],[17,"PTRACE_SETFPREGS","","",null,null],[17,"PTRACE_GETFPXREGS","","",null,null],[17,"PTRACE_SETFPXREGS","","",null,null],[17,"PTRACE_GETREGS","","",null,null],[17,"PTRACE_SETREGS","","",null,null],[17,"SYS_gettid","","",null,null],[17,"SYS_perf_event_open","","",null,null]],"paths":[[3,"utimbuf"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"in_addr"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"hostent"],[3,"iovec"],[3,"pollfd"],[3,"winsize"],[3,"sockaddr"],[3,"sockaddr_in"],[3,"sockaddr_in6"],[3,"sockaddr_un"],[3,"sockaddr_storage"],[3,"addrinfo"],[3,"sockaddr_nl"],[3,"sockaddr_ll"],[3,"tm"],[3,"sched_param"],[3,"Dl_info"],[3,"epoll_event"],[3,"utsname"],[3,"lconv"],[3,"dirent"],[3,"dirent64"],[3,"rlimit64"],[3,"glob_t"],[3,"ifaddrs"],[3,"passwd"],[3,"statvfs"],[3,"dqblk"],[3,"signalfd_siginfo"],[3,"mq_attr"],[3,"sigaction"],[3,"stack_t"],[3,"siginfo_t"],[3,"glob64_t"],[3,"ucred"],[3,"statfs"],[3,"msghdr"],[3,"termios"],[3,"flock"],[3,"ipc_perm"],[3,"shmid_ds"],[3,"stat"],[3,"stat64"],[3,"ucontext_t"],[4,"Option"],[3,"Wrapping"],[4,"FpCategory"],[3,"ParseIntError"],[4,"IntErrorKind"],[3,"NonZero"],[3,"Unique"],[3,"Shared"],[3,"PhantomData"],[3,"RangeFull"],[3,"Range"],[3,"RangeFrom"],[3,"RangeTo"],[4,"Ordering"],[8,"Any"],[3,"TypeId"],[3,"AtomicBool"],[3,"AtomicIsize"],[3,"AtomicUsize"],[3,"AtomicPtr"],[4,"Ordering"],[3,"Cell"],[4,"BorrowState"],[3,"RefCell"],[3,"BorrowRef"],[3,"Ref"],[3,"RefMut"],[3,"BorrowRefMut"],[3,"UnsafeCell"],[3,"EscapeUnicode"],[4,"EscapeUnicodeState"],[3,"EscapeDefault"],[4,"EscapeDefaultState"],[3,"Rev"],[3,"Cloned"],[3,"Cycle"],[3,"Chain"],[4,"ChainState"],[3,"Zip"],[3,"Map"],[3,"Filter"],[3,"FilterMap"],[3,"Enumerate"],[3,"Peekable"],[3,"SkipWhile"],[3,"TakeWhile"],[3,"Skip"],[3,"Take"],[3,"Scan"],[3,"FlatMap"],[3,"Fuse"],[3,"Inspect"],[3,"StepBy"],[3,"RangeInclusive"],[3,"Repeat"],[3,"Empty"],[3,"Once"],[3,"Item"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Slice"],[3,"TraitObject"],[4,"Result"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"Split"],[3,"SplitMut"],[3,"GenericSplitN"],[3,"SplitN"],[3,"RSplitN"],[3,"SplitNMut"],[3,"RSplitNMut"],[3,"Windows"],[3,"Chunks"],[3,"ChunksMut"],[4,"SearchStep"],[3,"CharEqSearcher"],[3,"CharEqPattern"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"StrSearcher"],[4,"StrSearcherImpl"],[3,"EmptyNeedle"],[3,"TwoWaySearcher"],[4,"MatchOnly"],[4,"RejectAndMatch"],[3,"ParseBoolError"],[3,"Utf8Error"],[3,"Chars"],[3,"CharIndices"],[3,"Bytes"],[3,"SplitInternal"],[3,"Split"],[3,"RSplit"],[3,"SplitTerminator"],[3,"RSplitTerminator"],[3,"SplitNInternal"],[3,"SplitN"],[3,"RSplitN"],[3,"MatchIndicesInternal"],[3,"MatchIndices"],[3,"RMatchIndices"],[3,"MatchesInternal"],[3,"Matches"],[3,"RMatches"],[3,"Lines"],[3,"LinesAny"],[3,"LinesAnyMap"],[3,"CharRange"],[3,"SipHasher"],[3,"BuildHasherDefault"],[3,"Binary"],[3,"Octal"],[3,"Decimal"],[3,"LowerHex"],[3,"UpperHex"],[3,"Radix"],[3,"RadixFmt"],[3,"PadAdapter"],[3,"DebugStruct"],[3,"DebugTuple"],[3,"DebugInner"],[3,"DebugSet"],[3,"DebugList"],[3,"DebugMap"],[3,"Error"],[3,"ArgumentV1"],[4,"FlagV1"],[3,"Arguments"],[3,"Formatter"],[8,"Clone"],[3,"pthread_attr_t"],[3,"mcontext_t"],[3,"sigset_t"],[3,"pthread_mutex_t"],[3,"pthread_rwlock_t"],[3,"pthread_mutexattr_t"],[3,"pthread_cond_t"],[3,"fsid_t"],[3,"cpu_set_t"],[3,"fd_set"]]};
searchIndex["num_iter"] = {"doc":"External iterators for generic mathematics","items":[[3,"Range","num_iter","An iterator over the range [start, stop)",null,null],[3,"RangeInclusive","","An iterator over the range [start, stop]",null,null],[3,"RangeStep","","An iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,null],[3,"RangeStepInclusive","","An iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,null],[5,"range","","Returns an iterator over the given range [start, stop) (that is, starting\nat start (inclusive), and ending at stop (exclusive)).",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"range"}}],[5,"range_inclusive","","Return an iterator over the range [start, stop]",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"rangeinclusive"}}],[5,"range_step","","Return an iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestep"}}],[5,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestepinclusive"}}],[11,"clone","","",0,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"next","","",0,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"size_hint","","",0,null],[11,"next_back","","",0,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"clone","","",1,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"rangeinclusive"}}],[11,"next","","",1,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"size_hint","","",1,null],[11,"next_back","","",1,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"clone","","",2,{"inputs":[{"name":"rangestep"}],"output":{"name":"rangestep"}}],[11,"next","","",2,{"inputs":[{"name":"rangestep"}],"output":{"name":"option"}}],[11,"clone","","",3,{"inputs":[{"name":"rangestepinclusive"}],"output":{"name":"rangestepinclusive"}}],[11,"next","","",3,{"inputs":[{"name":"rangestepinclusive"}],"output":{"name":"option"}}]],"paths":[[3,"Range"],[3,"RangeInclusive"],[3,"RangeStep"],[3,"RangeStepInclusive"]]};
searchIndex["num_integer"] = {"doc":"Integer trait and functions.","items":[[5,"div_rem","num_integer","Simultaneous integer division and modulus",null,null],[5,"div_floor","","Floored integer division",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"mod_floor","","Floored integer modulus",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"div_mod_floor","","Simultaneous floored integer division and modulus",null,null],[5,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`. The\nresult is always positive.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[8,"Integer","","",null,null],[10,"div_floor","","Floored integer division.",0,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"self"}}],[10,"mod_floor","","Floored integer modulo, satisfying:",0,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"self"}}],[10,"gcd","","Greatest Common Divisor (GCD).",0,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"self"}}],[10,"lcm","","Lowest Common Multiple (LCM).",0,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"self"}}],[10,"divides","","Deprecated, use `is_multiple_of` instead.",0,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_multiple_of","","Returns `true` if `other` is a multiple of `self`.",0,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_even","","Returns `true` if the number is even.",0,{"inputs":[{"name":"integer"}],"output":{"name":"bool"}}],[10,"is_odd","","Returns `true` if the number is odd.",0,{"inputs":[{"name":"integer"}],"output":{"name":"bool"}}],[10,"div_rem","","Simultaneous truncated integer division and modulus.\nReturns `(quotient, remainder)`.",0,null],[11,"div_mod_floor","","Simultaneous floored integer division and modulus.\nReturns `(quotient, remainder)`.",0,null]],"paths":[[8,"Integer"]]};
searchIndex["num_traits"] = {"doc":"Numeric traits for generic mathematics","items":[[3,"ParseFloatError","num_traits","",null,null],[12,"kind","","",0,null],[4,"FloatErrorKind","","",null,null],[13,"Empty","","",1,null],[13,"Invalid","","",1,null],[0,"identities","","",null,null],[8,"Zero","num_traits::identities","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",2,{"inputs":[{"name":"zero"}],"output":{"name":"bool"}}],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",3,{"inputs":[],"output":{"name":"self"}}],[0,"sign","num_traits","",null,null],[8,"Signed","num_traits::sign","Useful functions for signed numbers (i.e. numbers that can be negative).",null,null],[10,"abs","","Computes the absolute value.",4,{"inputs":[{"name":"signed"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",4,{"inputs":[{"name":"signed"},{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns the sign of the number.",4,{"inputs":[{"name":"signed"}],"output":{"name":"self"}}],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",4,{"inputs":[{"name":"signed"}],"output":{"name":"bool"}}],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",4,{"inputs":[{"name":"signed"}],"output":{"name":"bool"}}],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[0,"ops","num_traits","",null,null],[0,"saturating","num_traits::ops","",null,null],[8,"Saturating","num_traits::ops::saturating","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator.\nReturns a+b, saturating at the numeric bounds instead of overflowing.",5,{"inputs":[{"name":"saturating"},{"name":"self"}],"output":{"name":"self"}}],[10,"saturating_sub","","Saturating subtraction operator.\nReturns a-b, saturating at the numeric bounds instead of overflowing.",5,{"inputs":[{"name":"saturating"},{"name":"self"}],"output":{"name":"self"}}],[0,"checked","num_traits::ops","",null,null],[8,"CheckedAdd","num_traits::ops::checked","Performs addition that returns `None` instead of wrapping around on\noverflow.",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is\nreturned.",6,{"inputs":[{"name":"checkedadd"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens,\n`None` is returned.",7,{"inputs":[{"name":"checkedsub"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or\noverflow.",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow\nor overflow happens, `None` is returned.",8,{"inputs":[{"name":"checkedmul"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of\nwrapping around on underflow and overflow.",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by\nzero. If any of that happens, `None` is returned.",9,{"inputs":[{"name":"checkeddiv"},{"name":"self"}],"output":{"name":"option"}}],[0,"bounds","num_traits","",null,null],[8,"Bounded","num_traits::bounds","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",10,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","returns the largest finite number this type can represent",10,{"inputs":[],"output":{"name":"self"}}],[0,"float","num_traits","",null,null],[8,"Float","num_traits::float","",null,null],[10,"nan","","Returns the `NaN` value.",11,{"inputs":[],"output":{"name":"self"}}],[10,"infinity","","Returns the infinite value.",11,{"inputs":[],"output":{"name":"self"}}],[10,"neg_infinity","","Returns the negative infinite value.",11,{"inputs":[],"output":{"name":"self"}}],[10,"neg_zero","","Returns `-0.0`.",11,{"inputs":[],"output":{"name":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",11,{"inputs":[],"output":{"name":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",11,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",11,{"inputs":[],"output":{"name":"self"}}],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",11,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and\nfalse otherwise.",11,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",11,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_normal","","Returns `true` if the number is neither zero, infinite,\n[subnormal][subnormal], or `NaN`.",11,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"classify","","Returns the floating point category of the number. If only one property\nis going to be tested, it is generally faster to use the specific\npredicate instead.",11,{"inputs":[{"name":"float"}],"output":{"name":"fpcategory"}}],[10,"floor","","Returns the largest integer less than or equal to a number.",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from\n`0.0`.",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"trunc","","Return the integer part of a number.",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"fract","","Returns the fractional part of a number.",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the\nnumber is `Float::nan()`.",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"signum","","Returns a number that represents the sign of `self`.",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0` and\n`Float::infinity()`.",11,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0` and\n`Float::neg_infinity()`.",11,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding\nerror. This produces a more accurate result with better performance than\na separate multiplication operation followed by an add.",11,{"inputs":[{"name":"float"},{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"powi","","Raise a number to an integer power.",11,{"inputs":[{"name":"float"},{"name":"i32"}],"output":{"name":"self"}}],[10,"powf","","Raise a number to a floating point power.",11,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"sqrt","","Take the square root of a number.",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"exp","","Returns `e^(self)`, (the exponential function).",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"exp2","","Returns `2^(self)`.",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"ln","","Returns the natural logarithm of the number.",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",11,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"log2","","Returns the base 2 logarithm of the number.",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"log10","","Returns the base 10 logarithm of the number.",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"max","","Returns the maximum of the two numbers.",11,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"min","","Returns the minimum of the two numbers.",11,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",11,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"cbrt","","Take the cubic root of a number.",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given\nlegs of length `x` and `y`.",11,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin","","Computes the sine of a number (in radians).",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"cos","","Computes the cosine of a number (in radians).",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"tan","","Computes the tangent of a number (in radians).",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"asin","","Computes the arcsine of a number. Return value is in radians in\nthe range [-pi/2, pi/2] or NaN if the number is outside the range\n[-1, 1].",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"acos","","Computes the arccosine of a number. Return value is in radians in\nthe range [0, pi] or NaN if the number is outside the range\n[-1, 1].",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the\nrange [-pi/2, pi/2];",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",11,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns\n`(sin(x), cos(x))`.",11,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the\nnumber is close to zero.",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if\nthe operations were performed separately.",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"sinh","","Hyperbolic sine function.",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"cosh","","Hyperbolic cosine function.",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"tanh","","Hyperbolic tangent function.",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"asinh","","Inverse hyperbolic sine function.",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"acosh","","Inverse hyperbolic cosine function.",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"atanh","","Inverse hyperbolic tangent function.",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively.\nThe original number can be recovered by `sign * mantissa * 2 ^ exponent`.\nThe floating point encoding is documented in the [Reference][floating-point].",11,null],[0,"cast","num_traits","",null,null],[5,"cast","num_traits::cast","Cast from one machine scalar to another.",null,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",12,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_i8","","Converts the value of `self` to an `i8`.",12,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_i16","","Converts the value of `self` to an `i16`.",12,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_i32","","Converts the value of `self` to an `i32`.",12,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[10,"to_i64","","Converts the value of `self` to an `i64`.",12,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_usize","","Converts the value of `self` to a `usize`.",12,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_u8","","Converts the value of `self` to an `u8`.",12,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_u16","","Converts the value of `self` to an `u16`.",12,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_u32","","Converts the value of `self` to an `u32`.",12,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[10,"to_u64","","Converts the value of `self` to an `u64`.",12,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_f32","","Converts the value of `self` to an `f32`.",12,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_f64","","Converts the value of `self` to an `f64`.",12,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the\nvalue cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into\na primitive via the `ToPrimitive` trait.",14,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[0,"int","num_traits","",null,null],[8,"PrimInt","num_traits::int","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",15,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",15,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation\nof `self`.",15,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation\nof `self`.",15,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping\nthe truncated bits to the end of the resulting integer.",15,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping\nthe truncated bits to the beginning of the resulting integer.",15,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling\nzeros in the least significant bits.",15,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying\nthe &quot;sign bit&quot; in the most significant bits even for unsigned types.",15,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling\nzeros in the least significant bits.",15,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling\nzeros in the most significant bits.",15,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"swap_bytes","","Reverses the byte order of the integer.",15,{"inputs":[{"name":"primint"}],"output":{"name":"self"}}],[10,"from_be","","Convert an integer from big endian to the target&#39;s endianness.",15,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_le","","Convert an integer from little endian to the target&#39;s endianness.",15,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_be","","Convert `self` to big endian from the target&#39;s endianness.",15,{"inputs":[{"name":"primint"}],"output":{"name":"self"}}],[10,"to_le","","Convert `self` to little endian from the target&#39;s endianness.",15,{"inputs":[{"name":"primint"}],"output":{"name":"self"}}],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",15,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[8,"Num","num_traits","The base trait for numeric types",null,null],[16,"FromStrRadixErr","","",16,null],[10,"from_str_radix","","Convert from a string and radix &lt;= 36.",16,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"floaterrorkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"parsefloaterror"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"ParseFloatError"],[4,"FloatErrorKind"],[8,"Zero"],[8,"One"],[8,"Signed"],[8,"Saturating"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"Bounded"],[8,"Float"],[8,"ToPrimitive"],[8,"FromPrimitive"],[8,"NumCast"],[8,"PrimInt"],[8,"Num"]]};
searchIndex["kernel32"] = {"doc":"","items":[],"paths":[]};
searchIndex["winapi"] = {"doc":"","items":[],"paths":[]};
searchIndex["linear_map"] = {"doc":"A module providing a map implementation `LinearMap` backed by a vector.","items":[[3,"LinearMap","linear_map","A very simple map implementation backed by a vector.",null,null],[3,"OccupiedEntry","","A view into a single occupied location in a LinearMap.",null,null],[3,"VacantEntry","","A view into a single empty location in a LinearMap.",null,null],[3,"IntoIter","","A consuming iterator over a map.",null,null],[3,"Iter","","The iterator returned by `LinearMap::iter`.",null,null],[3,"IterMut","","The iterator returned by `LinearMap::iter_mut`.",null,null],[3,"Keys","","The iterator returned by `LinearMap::keys`.",null,null],[3,"Values","","The iterator returned by `LinearMap::values`.",null,null],[4,"Entry","","A view into a single location in a map, which may be vacant or occupied.",null,null],[13,"Occupied","","An occupied Entry.",0,null],[13,"Vacant","","A vacant Entry.",0,null],[11,"clone","","",1,{"inputs":[{"name":"linearmap"}],"output":{"name":"linearmap"}}],[11,"new","","Creates an empty map. This method does not allocate.",1,{"inputs":[],"output":{"name":"linearmap"}}],[11,"with_capacity","","Creates an empty map with the given initial capacity.",1,{"inputs":[{"name":"usize"}],"output":{"name":"linearmap"}}],[11,"capacity","","Returns the number of elements the map can hold without reallocating.",1,{"inputs":[{"name":"linearmap"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more to be inserted in the\nmap. The collection may reserve more space to avoid frequent\nreallocations.",1,{"inputs":[{"name":"linearmap"},{"name":"usize"}],"output":null}],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elemnnts to\nbe inserted in the map.",1,{"inputs":[{"name":"linearmap"},{"name":"usize"}],"output":null}],[11,"shrink_to_fit","","Shrinks the capacity of the map as much as possible.",1,{"inputs":[{"name":"linearmap"}],"output":null}],[11,"len","","Returns the number of elements in the map.",1,{"inputs":[{"name":"linearmap"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the map contains no elements.",1,{"inputs":[{"name":"linearmap"}],"output":{"name":"bool"}}],[11,"clear","","Clears the map, removing all elements. Keeps the allocated memory for\nreuse.",1,{"inputs":[{"name":"linearmap"}],"output":null}],[11,"iter","","An iterator visiting all key-value pairs in arbitrary order. Iterator\nelement type is `(&amp;&#39;a K, &amp;&#39;a V)`.",1,{"inputs":[{"name":"linearmap"}],"output":{"name":"iter"}}],[11,"iter_mut","","An iterator visiting all key-value pairs in arbitrary order with\nmutable references to the values. Iterator element type is `(&amp;&#39;a K, &amp;&#39;a\nmut V)`.",1,{"inputs":[{"name":"linearmap"}],"output":{"name":"itermut"}}],[11,"keys","","An iterator visiting all keys in arbitrary order. Iterator element type\nis `&amp;&#39;a K`.",1,{"inputs":[{"name":"linearmap"}],"output":{"name":"keys"}}],[11,"values","","An iterator visiting all values in arbitrary order. Iterator element\ntype is `&amp;&#39;a V`.",1,{"inputs":[{"name":"linearmap"}],"output":{"name":"values"}}],[11,"get","","Returns a reference to the value corresponding to the key.",1,{"inputs":[{"name":"linearmap"},{"name":"q"}],"output":{"name":"option"}}],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",1,{"inputs":[{"name":"linearmap"},{"name":"q"}],"output":{"name":"option"}}],[11,"contains_key","","Returns true if the map contains a value to the specified key.",1,{"inputs":[{"name":"linearmap"},{"name":"q"}],"output":{"name":"bool"}}],[11,"insert","","Inserts a key-value pair into the map. If the key already had a value\npresent in the map, it is returned. Otherwise, `None` is returned.",1,{"inputs":[{"name":"linearmap"},{"name":"k"},{"name":"v"}],"output":{"name":"option"}}],[11,"remove","","Removes a key-value pair from the map. If the key had a value present\nin the map, it is returned. Otherwise, `None` is returned.",1,{"inputs":[{"name":"linearmap"},{"name":"q"}],"output":{"name":"option"}}],[11,"entry","","Gets the given key&#39;s corresponding entry in the map for in-place manipulation.",1,{"inputs":[{"name":"linearmap"},{"name":"k"}],"output":{"name":"entry"}}],[11,"fmt","","",1,{"inputs":[{"name":"linearmap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",1,{"inputs":[],"output":{"name":"self"}}],[11,"extend","","",1,{"inputs":[{"name":"linearmap"},{"name":"i"}],"output":null}],[11,"from_iter","","",1,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"hash","","",1,{"inputs":[{"name":"linearmap"},{"name":"h"}],"output":null}],[11,"index","","",1,{"inputs":[{"name":"linearmap"},{"name":"q"}],"output":{"name":"v"}}],[11,"eq","","",1,{"inputs":[{"name":"linearmap"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"linearmap"},{"name":"self"}],"output":{"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"linearmap"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns\na mutable reference to the value in the entry.",0,{"inputs":[{"name":"entry"},{"name":"v"}],"output":{"name":"v"}}],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty,\nand returns a mutable reference to the value in the entry.",0,{"inputs":[{"name":"entry"},{"name":"f"}],"output":{"name":"v"}}],[11,"get","","Gets a reference to the value in the entry.",2,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"get_mut","","Gets a mutable reference to the value in the entry.",2,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"into_mut","","Converts the OccupiedEntry into a mutable reference to the value in the entry\nwith a lifetime bound to the map itself",2,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry, and returns the entry&#39;s old value",2,{"inputs":[{"name":"occupiedentry"},{"name":"v"}],"output":{"name":"v"}}],[11,"remove","","Takes the value out of the entry, and returns it",2,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry with the VacantEntry&#39;s key,\nand returns a mutable reference to it",3,{"inputs":[{"name":"vacantentry"},{"name":"v"}],"output":{"name":"v"}}],[11,"next","","",4,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",4,null],[11,"next_back","","",4,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"len","","",4,{"inputs":[{"name":"intoiter"}],"output":{"name":"usize"}}],[11,"next","","",5,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",5,null],[11,"next","","",6,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",6,null],[11,"next","","",7,{"inputs":[{"name":"keys"}],"output":{"name":"option"}}],[11,"size_hint","","",7,null],[11,"next","","",8,{"inputs":[{"name":"values"}],"output":{"name":"option"}}],[11,"size_hint","","",8,null],[11,"clone","","",5,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"clone","","",7,{"inputs":[{"name":"keys"}],"output":{"name":"keys"}}],[11,"clone","","",8,{"inputs":[{"name":"values"}],"output":{"name":"values"}}],[11,"next_back","","",5,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next_back","","",6,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next_back","","",7,{"inputs":[{"name":"keys"}],"output":{"name":"option"}}],[11,"next_back","","",8,{"inputs":[{"name":"values"}],"output":{"name":"option"}}],[11,"into_iter","","",1,{"inputs":[{"name":"linearmap"}],"output":{"name":"intoiter"}}]],"paths":[[4,"Entry"],[3,"LinearMap"],[3,"OccupiedEntry"],[3,"VacantEntry"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"Keys"],[3,"Values"]]};
searchIndex["log"] = {"doc":"A lightweight logging facade.","items":[[3,"LogRecord","log","The &quot;payload&quot; of a log message.",null,null],[3,"LogMetadata","","Metadata about a log message.",null,null],[3,"LogLocation","","The location of a log message.",null,null],[3,"MaxLogLevelFilter","","A token providing read and write access to the global maximum log level\nfilter.",null,null],[3,"SetLoggerError","","The type returned by `set_logger` if `set_logger` has already been called.",null,null],[3,"ShutdownLoggerError","","The type returned by `shutdown_logger_raw` if `shutdown_logger_raw` has\nalready been called or if `set_logger_raw` has not been called yet.",null,null],[4,"LogLevel","","An enum representing the available verbosity levels of the logging framework",null,null],[13,"Error","","The &quot;error&quot; level.",0,null],[13,"Warn","","The &quot;warn&quot; level.",0,null],[13,"Info","","The &quot;info&quot; level.",0,null],[13,"Debug","","The &quot;debug&quot; level.",0,null],[13,"Trace","","The &quot;trace&quot; level.",0,null],[4,"LogLevelFilter","","An enum representing the available verbosity level filters of the logging\nframework.",null,null],[13,"Off","","A level lower than all log levels.",1,null],[13,"Error","","Corresponds to the `Error` log level.",1,null],[13,"Warn","","Corresponds to the `Warn` log level.",1,null],[13,"Info","","Corresponds to the `Info` log level.",1,null],[13,"Debug","","Corresponds to the `Debug` log level.",1,null],[13,"Trace","","Corresponds to the `Trace` log level.",1,null],[5,"max_log_level","","Returns the current maximum log level.",null,{"inputs":[],"output":{"name":"loglevelfilter"}}],[5,"set_logger","","Sets the global logger.",null,{"inputs":[{"name":"m"}],"output":{"name":"result"}}],[5,"set_logger_raw","","Sets the global logger from a raw pointer.",null,{"inputs":[{"name":"m"}],"output":{"name":"result"}}],[5,"shutdown_logger","","Shuts down the global logger.",null,{"inputs":[],"output":{"name":"result"}}],[5,"shutdown_logger_raw","","Shuts down the global logger.",null,{"inputs":[],"output":{"name":"result"}}],[8,"Log","","A trait encapsulating the operations required of a logger",null,null],[10,"enabled","","Determines if a log message with the specified metadata would be\nlogged.",2,{"inputs":[{"name":"log"},{"name":"logmetadata"}],"output":{"name":"bool"}}],[10,"log","","Logs the `LogRecord`.",2,{"inputs":[{"name":"log"},{"name":"logrecord"}],"output":null}],[11,"fmt","","",0,{"inputs":[{"name":"loglevel"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"loglevel"}],"output":{"name":"loglevel"}}],[11,"eq","","",0,{"inputs":[{"name":"loglevel"},{"name":"loglevel"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"loglevel"},{"name":"loglevelfilter"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"loglevel"},{"name":"loglevel"}],"output":{"name":"option"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"loglevel"},{"name":"loglevelfilter"}],"output":{"name":"option"}}],[11,"cmp","","",0,{"inputs":[{"name":"loglevel"},{"name":"loglevel"}],"output":{"name":"ordering"}}],[11,"from_str","","",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"loglevel"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"max","","Returns the most verbose logging level.",0,{"inputs":[],"output":{"name":"loglevel"}}],[11,"to_log_level_filter","","Converts the `LogLevel` to the equivalent `LogLevelFilter`.",0,{"inputs":[{"name":"loglevel"}],"output":{"name":"loglevelfilter"}}],[11,"fmt","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"loglevelfilter"}],"output":{"name":"loglevelfilter"}}],[11,"eq","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"loglevelfilter"}],"output":{"name":"bool"}}],[11,"eq","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"loglevel"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"loglevelfilter"}],"output":{"name":"option"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"loglevel"}],"output":{"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"loglevelfilter"}],"output":{"name":"ordering"}}],[11,"from_str","","",1,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"max","","Returns the most verbose logging level filter.",1,{"inputs":[],"output":{"name":"loglevelfilter"}}],[11,"to_log_level","","Converts `self` to the equivalent `LogLevel`.",1,{"inputs":[{"name":"loglevelfilter"}],"output":{"name":"option"}}],[11,"args","","The message body.",3,{"inputs":[{"name":"logrecord"}],"output":{"name":"arguments"}}],[11,"metadata","","Metadata about the log directive.",3,{"inputs":[{"name":"logrecord"}],"output":{"name":"logmetadata"}}],[11,"location","","The location of the log directive.",3,{"inputs":[{"name":"logrecord"}],"output":{"name":"loglocation"}}],[11,"level","","The verbosity level of the message.",3,{"inputs":[{"name":"logrecord"}],"output":{"name":"loglevel"}}],[11,"target","","The name of the target of the directive.",3,{"inputs":[{"name":"logrecord"}],"output":{"name":"str"}}],[11,"level","","The verbosity level of the message.",4,{"inputs":[{"name":"logmetadata"}],"output":{"name":"loglevel"}}],[11,"target","","The name of the target of the directive.",4,{"inputs":[{"name":"logmetadata"}],"output":{"name":"str"}}],[11,"fmt","","",5,{"inputs":[{"name":"loglocation"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"loglocation"}],"output":{"name":"loglocation"}}],[11,"module_path","","The module path of the message.",5,{"inputs":[{"name":"loglocation"}],"output":{"name":"str"}}],[11,"file","","The source file containing the message.",5,{"inputs":[{"name":"loglocation"}],"output":{"name":"str"}}],[11,"line","","The line containing the message.",5,{"inputs":[{"name":"loglocation"}],"output":{"name":"u32"}}],[11,"fmt","","",6,{"inputs":[{"name":"maxloglevelfilter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get","","Gets the current maximum log level filter.",6,{"inputs":[{"name":"maxloglevelfilter"}],"output":{"name":"loglevelfilter"}}],[11,"set","","Sets the maximum log level.",6,{"inputs":[{"name":"maxloglevelfilter"},{"name":"loglevelfilter"}],"output":null}],[11,"fmt","","",7,{"inputs":[{"name":"setloggererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"setloggererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",7,{"inputs":[{"name":"setloggererror"}],"output":{"name":"str"}}],[11,"fmt","","",8,{"inputs":[{"name":"shutdownloggererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"shutdownloggererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",8,{"inputs":[{"name":"shutdownloggererror"}],"output":{"name":"str"}}],[14,"log!","","The standard logging macro.",null,null],[14,"error!","","Logs a message at the error level.",null,null],[14,"warn!","","Logs a message at the warn level.",null,null],[14,"info!","","Logs a message at the info level.",null,null],[14,"debug!","","Logs a message at the debug level.",null,null],[14,"trace!","","Logs a message at the trace level.",null,null],[14,"log_enabled!","","Determines if a message logged at the specified level in that module will\nbe logged.",null,null]],"paths":[[4,"LogLevel"],[4,"LogLevelFilter"],[8,"Log"],[3,"LogRecord"],[3,"LogMetadata"],[3,"LogLocation"],[3,"MaxLogLevelFilter"],[3,"SetLoggerError"],[3,"ShutdownLoggerError"]]};
searchIndex["byteorder"] = {"doc":"This crate provides convenience methods for encoding and decoding numbers\nin either big-endian or little-endian order.","items":[[4,"Error","byteorder","An error type for reading bytes.",null,null],[13,"UnexpectedEOF","","An unexpected EOF.",0,null],[13,"Io","","Any underlying IO error that occurs while reading bytes.",0,null],[4,"BigEndian","","Defines big-endian serialization.",null,null],[4,"LittleEndian","","Defines little-endian serialization.",null,null],[11,"fmt","","",0,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",0,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"from","std::io::error","",1,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"fmt","byteorder","",0,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",0,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"cause","","",0,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[6,"Result","","A short-hand for `result::Result&lt;T, byteorder::Error&gt;`.",null,null],[6,"NativeEndian","","Defines system native-endian serialization.",null,null],[8,"ReadBytesExt","","Extends `Read` with methods for reading numbers. (For `std::io`.)",null,null],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"},{"name":"usize"}],"output":{"name":"result"}}],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"},{"name":"usize"}],"output":{"name":"result"}}],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from\nthe underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from\nthe underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[8,"WriteBytesExt","","Extends `Write` with methods for writing numbers. (For `std::io`.)",null,null],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"u8"}],"output":{"name":"result"}}],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"i8"}],"output":{"name":"result"}}],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"u16"}],"output":{"name":"result"}}],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"i16"}],"output":{"name":"result"}}],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"u32"}],"output":{"name":"result"}}],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"i32"}],"output":{"name":"result"}}],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"u64"}],"output":{"name":"result"}}],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"i64"}],"output":{"name":"result"}}],[11,"write_uint","","Writes an unsigned n-bytes integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"u64"},{"name":"usize"}],"output":{"name":"result"}}],[11,"write_int","","Writes a signed n-bytes integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"i64"},{"name":"usize"}],"output":{"name":"result"}}],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to\nthe underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"f32"}],"output":{"name":"result"}}],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to\nthe underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"f64"}],"output":{"name":"result"}}],[8,"ByteOrder","","ByteOrder describes types that can serialize integers as bytes.",null,null],[10,"read_u16","","Reads an unsigned 16 bit integer from `buf`.",4,null],[10,"read_u32","","Reads an unsigned 32 bit integer from `buf`.",4,null],[10,"read_u64","","Reads an unsigned 64 bit integer from `buf`.",4,null],[10,"read_uint","","Reads an unsigned n-bytes integer from `buf`.",4,null],[10,"write_u16","","Writes an unsigned 16 bit integer `n` to `buf`.",4,null],[10,"write_u32","","Writes an unsigned 32 bit integer `n` to `buf`.",4,null],[10,"write_u64","","Writes an unsigned 64 bit integer `n` to `buf`.",4,null],[10,"write_uint","","Writes an unsigned integer `n` to `buf` using only `nbytes`.",4,null],[11,"read_i16","","Reads a signed 16 bit integer from `buf`.",4,null],[11,"read_i32","","Reads a signed 32 bit integer from `buf`.",4,null],[11,"read_i64","","Reads a signed 64 bit integer from `buf`.",4,null],[11,"read_int","","Reads a signed n-bytes integer from `buf`.",4,null],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number.",4,null],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number.",4,null],[11,"write_i16","","Writes a signed 16 bit integer `n` to `buf`.",4,null],[11,"write_i32","","Writes a signed 32 bit integer `n` to `buf`.",4,null],[11,"write_i64","","Writes a signed 64 bit integer `n` to `buf`.",4,null],[11,"write_int","","Writes a signed integer `n` to `buf` using only `nbytes`.",4,null],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number.",4,null],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number.",4,null],[11,"read_u16","","",5,null],[11,"read_u32","","",5,null],[11,"read_u64","","",5,null],[11,"read_uint","","",5,null],[11,"write_u16","","",5,null],[11,"write_u32","","",5,null],[11,"write_u64","","",5,null],[11,"write_uint","","",5,null],[11,"read_u16","","",6,null],[11,"read_u32","","",6,null],[11,"read_u64","","",6,null],[11,"read_uint","","",6,null],[11,"write_u16","","",6,null],[11,"write_u32","","",6,null],[11,"write_u64","","",6,null],[11,"write_uint","","",6,null],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"},{"name":"usize"}],"output":{"name":"result"}}],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"},{"name":"usize"}],"output":{"name":"result"}}],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from\nthe underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from\nthe underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"u8"}],"output":{"name":"result"}}],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"i8"}],"output":{"name":"result"}}],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"u16"}],"output":{"name":"result"}}],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"i16"}],"output":{"name":"result"}}],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"u32"}],"output":{"name":"result"}}],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"i32"}],"output":{"name":"result"}}],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"u64"}],"output":{"name":"result"}}],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"i64"}],"output":{"name":"result"}}],[11,"write_uint","","Writes an unsigned n-bytes integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"u64"},{"name":"usize"}],"output":{"name":"result"}}],[11,"write_int","","Writes a signed n-bytes integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"i64"},{"name":"usize"}],"output":{"name":"result"}}],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to\nthe underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"f32"}],"output":{"name":"result"}}],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to\nthe underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"f64"}],"output":{"name":"result"}}]],"paths":[[4,"Error"],[3,"Error"],[8,"ReadBytesExt"],[8,"WriteBytesExt"],[8,"ByteOrder"],[4,"BigEndian"],[4,"LittleEndian"]]};
searchIndex["bitflags"] = {"doc":"A typesafe bitmask flag generator.","items":[[14,"bitflags!","bitflags","The `bitflags!` macro generates a `struct` that holds a set of C-style\nbitmask flags. It is useful for creating typesafe wrappers for C APIs.",null,null]],"paths":[]};
searchIndex["lazy_static"] = {"doc":"A macro for declaring lazily evaluated statics.","items":[[14,"lazy_static!","lazy_static","",null,null]],"paths":[]};
initSearch(searchIndex);
